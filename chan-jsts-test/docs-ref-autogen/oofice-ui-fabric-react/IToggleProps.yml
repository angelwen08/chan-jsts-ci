### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IToggleProps
    name: IToggleProps
    fullName: IToggleProps
    children:
      - office-ui-fabric-react.IToggleProps.ariaLabel
      - office-ui-fabric-react.IToggleProps.as
      - office-ui-fabric-react.IToggleProps.checked
      - office-ui-fabric-react.IToggleProps.componentRef
      - office-ui-fabric-react.IToggleProps.defaultChecked
      - office-ui-fabric-react.IToggleProps.disabled
      - office-ui-fabric-react.IToggleProps.inlineLabel
      - office-ui-fabric-react.IToggleProps.keytipProps
      - office-ui-fabric-react.IToggleProps.label
      - office-ui-fabric-react.IToggleProps.offAriaLabel
      - office-ui-fabric-react.IToggleProps.offText
      - office-ui-fabric-react.IToggleProps.onAriaLabel
      - office-ui-fabric-react.IToggleProps.onChange
      - office-ui-fabric-react.IToggleProps.onChanged
      - office-ui-fabric-react.IToggleProps.onText
      - office-ui-fabric-react.IToggleProps.styles
      - office-ui-fabric-react.IToggleProps.theme
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: |-
      Toggle component props.
      {@docCategory Toggle}
    extends:
      name: HTMLAttributes<HTMLElement>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.ariaLabel
    name: ariaLabel
    fullName: ariaLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: Text for screen-reader to announce as the name of the toggle.
    optional: true
    syntax:
      content: 'ariaLabel?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.as
    name: as
    fullName: as
    children: []
    langs:
      - typeScript
    type: property
    summary: Render the root element as another type.
    optional: true
    syntax:
      content: 'as?: IComponentAs<HTMLAttributes<HTMLElement>>'
      return:
        type:
          - IComponentAs<HTMLAttributes<HTMLElement>>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.checked
    name: checked
    fullName: checked
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Checked state of the toggle. If you are maintaining state yourself, use
      this property. Otherwise refer to `defaultChecked`.
    optional: true
    syntax:
      content: 'checked?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to access the IToggle interface. Use this instead of ref
      for accessing

      the public methods and properties of the component.
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<IToggle>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.IToggle>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.defaultChecked
    name: defaultChecked
    fullName: defaultChecked
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Initial state of the toggle. If you want the toggle to maintain its own
      state, use this. Otherwise refer to `checked`.
    optional: true
    syntax:
      content: 'defaultChecked?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.disabled
    name: disabled
    fullName: disabled
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional disabled flag.
    optional: true
    syntax:
      content: 'disabled?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.inlineLabel
    name: inlineLabel
    fullName: inlineLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the label (not the onText/offText) should be positioned inline
      with the toggle control.

      Left (right in RTL) side when on/off text provided VS right (left in RTL)
      side when no on/off text.

      Caution: when not providing on/off text user may get confused in
      differentiating the on/off states of the toggle.
    optional: true
    syntax:
      content: 'inlineLabel?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.keytipProps
    name: keytipProps
    fullName: keytipProps
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional keytip for this toggle
    optional: true
    syntax:
      content: 'keytipProps?: IKeytipProps'
      return:
        type:
          - office-ui-fabric-react.IKeytipProps
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.label
    name: label
    fullName: label
    children: []
    langs:
      - typeScript
    type: property
    summary: A label for the toggle.
    optional: true
    syntax:
      content: 'label?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.offAriaLabel
    name: offAriaLabel
    fullName: offAriaLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'offAriaLabel?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
    deprecated:
      content: 'Use `ariaLabel` for name, and let the metadata convey state'
  - uid: office-ui-fabric-react.IToggleProps.offText
    name: offText
    fullName: offText
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Text to display when toggle is OFF.

      Caution: when not providing on/off text user may get confused in
      differentiating the on/off states of the toggle.
    optional: true
    syntax:
      content: 'offText?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.onAriaLabel
    name: onAriaLabel
    fullName: onAriaLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onAriaLabel?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
    deprecated:
      content: 'Use `ariaLabel` for name, and let the metadata convey state'
  - uid: office-ui-fabric-react.IToggleProps.onChange
    name: onChange
    fullName: onChange
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback issued when the value changes.
    optional: true
    syntax:
      content: 'onChange?: (event: MouseEvent<HTMLElement>, checked?: boolean) => void'
      return:
        type:
          - '(event: MouseEvent<HTMLElement>, checked?: boolean) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.onChanged
    name: onChanged
    fullName: onChanged
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onChanged?: (checked: boolean) => void'
      return:
        type:
          - '(checked: boolean) => void'
    package: office-ui-fabric-react
    deprecated:
      content: Use `onChange` instead.
  - uid: office-ui-fabric-react.IToggleProps.onText
    name: onText
    fullName: onText
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Text to display when toggle is ON.

      Caution: when not providing on/off text user may get confused in
      differentiating the on/off states of the toggle.
    optional: true
    syntax:
      content: 'onText?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.styles
    name: styles
    fullName: styles
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional styles for the component.
    optional: true
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>'
      return:
        type:
          - >-
            IStyleFunctionOrObject<office-ui-fabric-react.IToggleStyleProps,
            office-ui-fabric-react.IToggleStyles>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IToggleProps.theme
    name: theme
    fullName: theme
    children: []
    langs:
      - typeScript
    type: property
    summary: Theme provided by HOC.
    optional: true
    syntax:
      content: 'theme?: ITheme'
      return:
        type:
          - ITheme
    package: office-ui-fabric-react
references:
  - uid: IRefObject<office-ui-fabric-react.IToggle>
    name: IToggle>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: IToggle
        fullName: IToggle
        uid: office-ui-fabric-react.IToggle
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.IKeytipProps
    name: IKeytipProps
    spec.typeScript:
      - name: IKeytipProps
        fullName: IKeytipProps
        uid: office-ui-fabric-react.IKeytipProps
  - uid: >-
      IStyleFunctionOrObject<office-ui-fabric-react.IToggleStyleProps,
      office-ui-fabric-react.IToggleStyles>
    name: IToggleStyles>
    spec.typeScript:
      - name: IStyleFunctionOrObject<
        fullName: IStyleFunctionOrObject<
      - name: IToggleStyleProps
        fullName: IToggleStyleProps
        uid: office-ui-fabric-react.IToggleStyleProps
      - name: ', '
        fullName: ', '
      - name: IToggleStyles
        fullName: IToggleStyles
        uid: office-ui-fabric-react.IToggleStyles
      - name: '>'
        fullName: '>'
