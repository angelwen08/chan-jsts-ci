### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IListProps
    name: IListProps
    fullName: IListProps<T>
    children:
      - office-ui-fabric-react.IListProps.className
      - office-ui-fabric-react.IListProps.componentRef
      - office-ui-fabric-react.IListProps.getItemCountForPage
      - office-ui-fabric-react.IListProps.getKey
      - office-ui-fabric-react.IListProps.getPageHeight
      - office-ui-fabric-react.IListProps.getPageSpecification
      - office-ui-fabric-react.IListProps.getPageStyle
      - office-ui-fabric-react.IListProps.items
      - office-ui-fabric-react.IListProps.onPageAdded
      - office-ui-fabric-react.IListProps.onPageRemoved
      - office-ui-fabric-react.IListProps.onPagesUpdated
      - office-ui-fabric-react.IListProps.onRenderCell
      - office-ui-fabric-react.IListProps.onRenderPage
      - office-ui-fabric-react.IListProps.onShouldVirtualize
      - office-ui-fabric-react.IListProps.renderCount
      - office-ui-fabric-react.IListProps.renderedWindowsAhead
      - office-ui-fabric-react.IListProps.renderedWindowsBehind
      - office-ui-fabric-react.IListProps.role
      - office-ui-fabric-react.IListProps.startIndex
      - office-ui-fabric-react.IListProps.usePageCache
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: '{@docCategory List}'
    extends:
      name: HTMLAttributes<office-ui-fabric-react.List<T> | HTMLDivElement>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.className
    name: className
    fullName: className
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional classname to append to root list.
    optional: true
    syntax:
      content: 'className?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to access the IList interface. Use this instead of ref
      for accessing

      the public methods and properties of the component.
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<IList>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.IList>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.getItemCountForPage
    name: getItemCountForPage
    fullName: getItemCountForPage
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Method called by the list to get how many items to render per page from
      specified index.

      In general, use `getPageSpecification` instead.
    optional: true
    syntax:
      content: >-
        getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) =>
        number
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle) => number'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.getKey
    name: getKey
    fullName: getKey
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Optional callback to get the item key, to be used on render.'
    optional: true
    syntax:
      content: 'getKey?: (item: T, index?: number) => string'
      return:
        type:
          - '(item: T, index?: number) => string'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.getPageHeight
    name: getPageHeight
    fullName: getPageHeight
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Method called by the list to get the pixel height for a given page. By
      default, we measure the first

      page's height and default all other pages to that height when calculating
      the surface space. It is

      ideal to be able to adequately predict page heights in order to keep the
      surface space from jumping

      in pixels, which has been seen to cause browser performance issues.

      In general, use `getPageSpecification` instead.
    optional: true
    syntax:
      content: 'getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle) => number'
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle) => number'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.getPageSpecification
    name: getPageSpecification
    fullName: getPageSpecification
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Called by the list to get the specification for a page.
      Use this method to provide an allocation of items per page,
      as well as an estimated rendered height for the page.
      The list will use this to optimize virtualization.
    optional: true
    syntax:
      content: >-
        getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) =>
        IPageSpecification
      return:
        type:
          - '(itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.getPageStyle
    name: getPageStyle
    fullName: getPageStyle
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Method called by the list to derive the page style object. For spacer
      pages, the list will derive

      the height and passed in heights will be ignored.
    optional: true
    syntax:
      content: 'getPageStyle?: (page: IPage<T>) => any'
      return:
        type:
          - '(page: IPage<T>) => any'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.items
    name: items
    fullName: items
    children: []
    langs:
      - typeScript
    type: property
    summary: Items to render.
    optional: true
    syntax:
      content: 'items?: T[]'
      return:
        type:
          - 'T[]'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onPageAdded
    name: onPageAdded
    fullName: onPageAdded
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional callback for monitoring when a page is added.
    optional: true
    syntax:
      content: 'onPageAdded?: (page: IPage<T>) => void'
      return:
        type:
          - '(page: IPage<T>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onPageRemoved
    name: onPageRemoved
    fullName: onPageRemoved
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional callback for monitoring when a page is removed.
    optional: true
    syntax:
      content: 'onPageRemoved?: (page: IPage<T>) => void'
      return:
        type:
          - '(page: IPage<T>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onPagesUpdated
    name: onPagesUpdated
    fullName: onPagesUpdated
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback invoked when List rendering completed.

      This can be on initial mount or on re-render due to scrolling.

      This method will be called as a result of changes in List pages (added or
      removed),

      and after ALL the changes complete.

      To track individual page Add / Remove use onPageAdded / onPageRemoved
      instead.
    optional: true
    syntax:
      content: 'onPagesUpdated?: (pages: IPage<T>[]) => void'
      return:
        type:
          - '(pages: IPage<T>[]) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onRenderCell
    name: onRenderCell
    fullName: onRenderCell
    children: []
    langs:
      - typeScript
    type: property
    summary: Method to call when trying to render an item.
    optional: true
    syntax:
      content: >-
        onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) =>
        React.ReactNode
      return:
        type:
          - '(item?: T, index?: number, isScrolling?: boolean) => React.ReactNode'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onRenderPage
    name: onRenderPage
    fullName: onRenderPage
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Called when the List will render a page.
      Override this to control how cells are rendered within a page.
    optional: true
    syntax:
      content: >-
        onRenderPage?: (pageProps: IPageProps<T>, defaultRender?:
        IRenderFunction<IPageProps<T>>) => React.ReactNode
      return:
        type:
          - >-
            (pageProps: IPageProps<T>, defaultRender?:
            IRenderFunction<IPageProps<T>>) => React.ReactNode
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.onShouldVirtualize
    name: onShouldVirtualize
    fullName: onShouldVirtualize
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to determine whether the list should be rendered in
      full, or virtualized.

      Virtualization will add and remove pages of items as the user scrolls them
      into the visible range.

      This benefits larger list scenarios by reducing the DOM on the screen, but
      can negatively affect performance for smaller lists.

      The default implementation will virtualize when this callback is not
      provided.
    optional: true
    syntax:
      content: 'onShouldVirtualize?: (props: IListProps<T>) => boolean'
      return:
        type:
          - '(props: IListProps<T>) => boolean'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.renderCount
    name: renderCount
    fullName: renderCount
    children: []
    langs:
      - typeScript
    type: property
    summary: Number of items to render. Defaults to items.length.
    optional: true
    syntax:
      content: 'renderCount?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.renderedWindowsAhead
    name: renderedWindowsAhead
    fullName: renderedWindowsAhead
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      In addition to the visible window, how many windowHeights should we render
      ahead.
    optional: true
    syntax:
      content: 'renderedWindowsAhead?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.renderedWindowsBehind
    name: renderedWindowsBehind
    fullName: renderedWindowsBehind
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      In addition to the visible window, how many windowHeights should we render
      behind.
    optional: true
    syntax:
      content: 'renderedWindowsBehind?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.role
    name: role
    fullName: role
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The role to assign to the list root element.

      Use this to override the default assignment of 'list' to the root and
      'listitem' to the cells.
    optional: true
    syntax:
      content: 'role?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.startIndex
    name: startIndex
    fullName: startIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: Index in items array to start rendering from. Defaults to 0.
    optional: true
    syntax:
      content: 'startIndex?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IListProps.usePageCache
    name: usePageCache
    fullName: usePageCache
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Boolean value to enable render page caching. This is an experimental
      performance optimization

      that is off by default.
    optional: true
    syntax:
      content: 'usePageCache?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
references:
  - uid: HTMLAttributes<office-ui-fabric-react.List<T> | HTMLDivElement>
    name: List<T> | HTMLDivElement>
    spec.typeScript:
      - name: HTMLAttributes<
        fullName: HTMLAttributes<
      - name: List
        fullName: List
        uid: office-ui-fabric-react.List
      - name: <T> | HTMLDivElement>
        fullName: <T> | HTMLDivElement>
  - uid: IRefObject<office-ui-fabric-react.IList>
    name: IList>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: IList
        fullName: IList
        uid: office-ui-fabric-react.IList
      - name: '>'
        fullName: '>'
