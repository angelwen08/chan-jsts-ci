### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IDragDropEvents
    name: IDragDropEvents
    fullName: IDragDropEvents
    children:
      - office-ui-fabric-react.IDragDropEvents.canDrag
      - office-ui-fabric-react.IDragDropEvents.canDrop
      - office-ui-fabric-react.IDragDropEvents.onDragEnd
      - office-ui-fabric-react.IDragDropEvents.onDragEnter
      - office-ui-fabric-react.IDragDropEvents.onDragLeave
      - office-ui-fabric-react.IDragDropEvents.onDragStart
      - office-ui-fabric-react.IDragDropEvents.onDrop
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: ''
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.canDrag
    name: canDrag
    fullName: canDrag
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'canDrag?: (item?: any) => boolean'
      return:
        type:
          - '(item?: any) => boolean'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.canDrop
    name: canDrop
    fullName: canDrop
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: >-
        canDrop?: (dropContext?: IDragDropContext, dragContext?:
        IDragDropContext) => boolean
      return:
        type:
          - >-
            (dropContext?: IDragDropContext, dragContext?: IDragDropContext) =>
            boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.onDragEnd
    name: onDragEnd
    fullName: onDragEnd
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onDragEnd?: (item?: any, event?: DragEvent) => void'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.onDragEnter
    name: onDragEnter
    fullName: onDragEnter
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onDragEnter?: (item?: any, event?: DragEvent) => string'
      return:
        type:
          - '(item?: any, event?: DragEvent) => string'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.onDragLeave
    name: onDragLeave
    fullName: onDragLeave
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onDragLeave?: (item?: any, event?: DragEvent) => void'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.onDragStart
    name: onDragStart
    fullName: onDragStart
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: >-
        onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[],
        event?: MouseEvent) => void
      return:
        type:
          - >-
            (item?: any, itemIndex?: number, selectedItems?: any[], event?:
            MouseEvent) => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IDragDropEvents.onDrop
    name: onDrop
    fullName: onDrop
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'onDrop?: (item?: any, event?: DragEvent) => void'
      return:
        type:
          - '(item?: any, event?: DragEvent) => void'
    package: office-ui-fabric-react
