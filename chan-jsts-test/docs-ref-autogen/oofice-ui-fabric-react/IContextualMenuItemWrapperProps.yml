### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps
    name: IContextualMenuItemWrapperProps
    fullName: IContextualMenuItemWrapperProps
    children:
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.classNames
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.componentRef
      - >-
        office-ui-fabric-react.IContextualMenuItemWrapperProps.contextualMenuItemAs
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.dismissMenu
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.dismissSubMenu
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.executeItemClick
      - >-
        office-ui-fabric-react.IContextualMenuItemWrapperProps.expandedMenuItemKey
      - >-
        office-ui-fabric-react.IContextualMenuItemWrapperProps.focusableElementIndex
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.getSubMenuId
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.hasCheckmarks
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.hasIcons
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.index
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.item
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemClick
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemClickBase
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemKeyDown
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseDown
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseEnter
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseLeave
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseMove
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.onTap
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.openSubMenu
      - office-ui-fabric-react.IContextualMenuItemWrapperProps.totalItemCount
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: ClassAttributes<office-ui-fabric-react.IContextualMenuItem>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.classNames
    name: classNames
    fullName: classNames
    children: []
    langs:
      - typeScript
    type: property
    summary: CSS class to apply to the context menu.
    syntax:
      content: 'classNames: IMenuItemClassNames'
      return:
        type:
          - office-ui-fabric-react.IMenuItemClassNames
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to access the ContextualMenuSplitButton interface. Use
      this instead of ref for accessing

      the public methods and properties of the component.
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<ContextualMenuItemWrapper>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.ContextualMenuItemWrapper>
    package: office-ui-fabric-react
  - uid: >-
      office-ui-fabric-react.IContextualMenuItemWrapperProps.contextualMenuItemAs
    name: contextualMenuItemAs
    fullName: contextualMenuItemAs
    children: []
    langs:
      - typeScript
    type: property
    summary: Method to override the render of the individual menu items.
    optional: true
    syntax:
      content: >-
        contextualMenuItemAs?: ComponentClass<IContextualMenuItemProps> |
        StatelessComponent<IContextualMenuItemProps>
      return:
        type:
          - >-
            ComponentClass<office-ui-fabric-react.IContextualMenuItemProps> |
            StatelessComponent<office-ui-fabric-react.IContextualMenuItemProps>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.dismissMenu
    name: dismissMenu
    fullName: dismissMenu
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This prop will get set by ContextualMenu and can be called to close the
      menu this item belongs to.

      If dismissAll is true, all menus will be closed.
    optional: true
    syntax:
      content: 'dismissMenu?: (ev?: any, dismissAll?: boolean) => void'
      return:
        type:
          - '(ev?: any, dismissAll?: boolean) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.dismissSubMenu
    name: dismissSubMenu
    fullName: dismissSubMenu
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This prop will get set by ContextualMenu and can be called to close this
      item's subMenu, if present.
    optional: true
    syntax:
      content: 'dismissSubMenu?: () => void'
      return:
        type:
          - () => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.executeItemClick
    name: executeItemClick
    fullName: executeItemClick
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for when the click event on the primary button.
    optional: true
    syntax:
      content: >-
        executeItemClick?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void
      return:
        type:
          - >-
            (item: IContextualMenuItem, ev: MouseEvent<HTMLElement> |
            KeyboardEvent<HTMLElement>) => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.expandedMenuItemKey
    name: expandedMenuItemKey
    fullName: expandedMenuItemKey
    children: []
    langs:
      - typeScript
    type: property
    summary: Key of the currently expanded subMenu.
    optional: true
    syntax:
      content: 'expandedMenuItemKey?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: >-
      office-ui-fabric-react.IContextualMenuItemWrapperProps.focusableElementIndex
    name: focusableElementIndex
    fullName: focusableElementIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The index number of the wrapper among all items in the contextual menu
      excluding dividers and headers.
    syntax:
      content: 'focusableElementIndex: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.getSubMenuId
    name: getSubMenuId
    fullName: getSubMenuId
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback to get the subMenu ID for an IContextualMenuItem.
    optional: true
    syntax:
      content: 'getSubMenuId?: (item: IContextualMenuItem) => string | undefined'
      return:
        type:
          - '(item: IContextualMenuItem) => string | undefined'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.hasCheckmarks
    name: hasCheckmarks
    fullName: hasCheckmarks
    children: []
    langs:
      - typeScript
    type: property
    summary: Whether or not if the item for the wrapper uses checkmarks.
    optional: true
    syntax:
      content: 'hasCheckmarks?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.hasIcons
    name: hasIcons
    fullName: hasIcons
    children: []
    langs:
      - typeScript
    type: property
    summary: Whether or not the item for the wrapper uses icons.
    optional: true
    syntax:
      content: 'hasIcons?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.index
    name: index
    fullName: index
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The index number of the wrapper among all items in the contextual menu
      including things like dividers and headers.
    syntax:
      content: 'index: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.item
    name: item
    fullName: item
    children: []
    langs:
      - typeScript
    type: property
    summary: The IContextualMenuItem that is used to render the item in the menu.
    syntax:
      content: 'item: IContextualMenuItem'
      return:
        type:
          - office-ui-fabric-react.IContextualMenuItem
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemClick
    name: onItemClick
    fullName: onItemClick
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for when the click event on the icon button from the wrapper.
    optional: true
    syntax:
      content: >-
        onItemClick?: (item: IContextualMenuItem, ev: MouseEvent<HTMLElement> |
        KeyboardEvent<HTMLElement>) => void
      return:
        type:
          - >-
            (item: IContextualMenuItem, ev: MouseEvent<HTMLElement> |
            KeyboardEvent<HTMLElement>) => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemClickBase
    name: onItemClickBase
    fullName: onItemClickBase
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback for when the click event on the icon button which also takes in a
      specific HTMLElement that will be focused.
    optional: true
    syntax:
      content: >-
        onItemClickBase?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>, target:
        HTMLElement) => void
      return:
        type:
          - >-
            (item: IContextualMenuItem, ev: MouseEvent<HTMLElement> |
            KeyboardEvent<HTMLElement>, target: HTMLElement) => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemKeyDown
    name: onItemKeyDown
    fullName: onItemKeyDown
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for keyboard events on the wrapper.
    optional: true
    syntax:
      content: >-
        onItemKeyDown?: (item: IContextualMenuItem, ev:
        KeyboardEvent<HTMLElement>) => void
      return:
        type:
          - '(item: IContextualMenuItem, ev: KeyboardEvent<HTMLElement>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseDown
    name: onItemMouseDown
    fullName: onItemMouseDown
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for the mousedown event on the icon button in the wrapper.
    optional: true
    syntax:
      content: >-
        onItemMouseDown?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement>) => void
      return:
        type:
          - '(item: IContextualMenuItem, ev: MouseEvent<HTMLElement>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseEnter
    name: onItemMouseEnter
    fullName: onItemMouseEnter
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for when the user's mouse enters the wrapper.
    optional: true
    syntax:
      content: >-
        onItemMouseEnter?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement>, target: HTMLElement) => boolean | void
      return:
        type:
          - >-
            (item: IContextualMenuItem, ev: MouseEvent<HTMLElement>, target:
            HTMLElement) => boolean | void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseLeave
    name: onItemMouseLeave
    fullName: onItemMouseLeave
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for when the user's mouse leaves the wrapper.
    optional: true
    syntax:
      content: >-
        onItemMouseLeave?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement>) => void
      return:
        type:
          - '(item: IContextualMenuItem, ev: MouseEvent<HTMLElement>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onItemMouseMove
    name: onItemMouseMove
    fullName: onItemMouseMove
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for when the user's mouse moves in the wrapper.
    optional: true
    syntax:
      content: >-
        onItemMouseMove?: (item: IContextualMenuItem, ev:
        MouseEvent<HTMLElement>, target: HTMLElement) => void
      return:
        type:
          - >-
            (item: IContextualMenuItem, ev: MouseEvent<HTMLElement>, target:
            HTMLElement) => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.onTap
    name: onTap
    fullName: onTap
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback for touch/pointer events on the split button.
    optional: true
    syntax:
      content: 'onTap?: (ev: TouchEvent<HTMLElement> | PointerEvent) => void'
      return:
        type:
          - '(ev: TouchEvent<HTMLElement> | PointerEvent) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.openSubMenu
    name: openSubMenu
    fullName: openSubMenu
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This prop will get set by ContextualMenu and can be called to open this
      item's subMenu, if present.
    optional: true
    syntax:
      content: 'openSubMenu?: (item: any, target: HTMLElement) => void'
      return:
        type:
          - '(item: any, target: HTMLElement) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IContextualMenuItemWrapperProps.totalItemCount
    name: totalItemCount
    fullName: totalItemCount
    children: []
    langs:
      - typeScript
    type: property
    summary: The total number of items in the contextual menu.
    syntax:
      content: 'totalItemCount: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
references:
  - uid: ClassAttributes<office-ui-fabric-react.IContextualMenuItem>
    name: IContextualMenuItem>
    spec.typeScript:
      - name: ClassAttributes<
        fullName: ClassAttributes<
      - name: IContextualMenuItem
        fullName: IContextualMenuItem
        uid: office-ui-fabric-react.IContextualMenuItem
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.IMenuItemClassNames
    name: IMenuItemClassNames
    spec.typeScript:
      - name: IMenuItemClassNames
        fullName: IMenuItemClassNames
        uid: office-ui-fabric-react.IMenuItemClassNames
  - uid: IRefObject<office-ui-fabric-react.ContextualMenuItemWrapper>
    name: ContextualMenuItemWrapper>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: ContextualMenuItemWrapper
        fullName: ContextualMenuItemWrapper
        uid: office-ui-fabric-react.ContextualMenuItemWrapper
      - name: '>'
        fullName: '>'
  - uid: >-
      ComponentClass<office-ui-fabric-react.IContextualMenuItemProps> |
      StatelessComponent<office-ui-fabric-react.IContextualMenuItemProps>
    name: IContextualMenuItemProps>
    spec.typeScript:
      - name: ComponentClass<
        fullName: ComponentClass<
      - name: IContextualMenuItemProps
        fullName: IContextualMenuItemProps
        uid: office-ui-fabric-react.IContextualMenuItemProps
      - name: '> | StatelessComponent<'
        fullName: '> | StatelessComponent<'
      - name: IContextualMenuItemProps
        fullName: IContextualMenuItemProps
        uid: office-ui-fabric-react.IContextualMenuItemProps
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.IContextualMenuItem
    name: IContextualMenuItem
    spec.typeScript:
      - name: IContextualMenuItem
        fullName: IContextualMenuItem
        uid: office-ui-fabric-react.IContextualMenuItem
