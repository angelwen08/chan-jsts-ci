### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.List
    name: List
    fullName: List<T>
    children:
      - office-ui-fabric-react.List.componentDidMount
      - office-ui-fabric-react.List.componentWillReceiveProps
      - office-ui-fabric-react.List.defaultProps
      - office-ui-fabric-react.List.forceUpdate
      - office-ui-fabric-react.List.getStartItemIndexInView
      - office-ui-fabric-react.List.constructor
      - office-ui-fabric-react.List.refs
      - office-ui-fabric-react.List.render
      - office-ui-fabric-react.List.scrollToIndex
      - office-ui-fabric-react.List.shouldComponentUpdate
    syntax:
      content: ''
    langs:
      - typeScript
    type: class
    summary: >
      The List renders virtualized pages of items. Each page's item count is
      determined by the getItemCountForPage callback if

      provided by the caller, or 10 as default. Each page's height is determined
      by the getPageHeight callback if provided by

      the caller, or by cached measurements if available, or by a running
      average, or a default fallback.

      The algorithm for rendering pages works like this:


      1. Predict visible pages based on "current measure data" (page heights,
      surface position, visible window)

      2. If changes are necessary, apply changes (add/remove pages)

      3. For pages that are added, measure the page heights if we need to using
      getBoundingClientRect

      4. If measurements don't match predictions, update measure data and goto
      step 1 asynchronously


      Measuring too frequently can pull performance down significantly. To
      compensate, we cache measured values so that

      we can avoid re-measuring during operations that should not alter heights,
      like scrolling.


      To optimize glass rendering performance, onShouldVirtualize can be set.
      When onShouldVirtualize return false,

      List will run in fast mode (not virtualized) to render all items without
      any measurements to improve page load time. And we

      start doing measurements and rendering in virtualized mode when items
      grows larger than this threshold.


      However, certain operations can make measure data stale. For example,
      resizing the list, or passing in new props,

      or forcing an update change cause pages to shrink/grow. When these
      operations occur, we increment a measureVersion

      number, which we associate with cached measurements and use to determine
      if a remeasure should occur.
    extends:
      name: >-
        BaseComponent<office-ui-fabric-react.IListProps<T>,
        office-ui-fabric-react.IListState<T>>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.componentDidMount
    name: componentDidMount()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function componentDidMount()
      parameters: []
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.componentWillReceiveProps
    name: componentWillReceiveProps(IListProps<T>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function componentWillReceiveProps(newProps: IListProps<T>)'
      parameters:
        - id: newProps
          type:
            - office-ui-fabric-react.IListProps<T>
          description: ''
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.defaultProps
    name: defaultProps
    fullName: defaultProps
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static defaultProps: Object'
      return:
        type:
          - Object
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.forceUpdate
    name: forceUpdate()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function forceUpdate()
      parameters: []
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.getStartItemIndexInView
    name: 'getStartItemIndexInView((itemIndex: number) => number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStartItemIndexInView(measureItem?: (itemIndex: number) =>
        number)
      parameters:
        - id: measureItem
          type:
            - '(itemIndex: number) => number'
          description: ''
          optional: true
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.constructor
    name: List(IListProps<T>)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new List(props: IListProps<T>)'
      parameters:
        - id: props
          type:
            - office-ui-fabric-react.IListProps<T>
          description: ''
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.refs
    name: refs
    fullName: refs
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'refs: [key: string]: React.ReactInstance'
      return:
        type:
          - '[key: string]: React.ReactInstance'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.render
    name: render()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function render()
      parameters: []
      return:
        type:
          - Element
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.scrollToIndex
    name: 'scrollToIndex(number, (itemIndex: number) => number, ScrollToMode)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Scroll to the given index. By default will bring the page the specified
      item is on into the view. If a callback

      to measure the height of an individual item is specified, will only scroll
      to bring the specific item into view.

      Note: with items of variable height and no passed in `getPageHeight`
      method, the list might jump after scrolling

      when windows before/ahead are being rendered, and the estimated height is
      replaced using actual elements.
    syntax:
      content: >-
        function scrollToIndex(index: number, measureItem?: (itemIndex: number)
        => number, scrollToMode?: ScrollToMode)
      parameters:
        - id: index
          type:
            - number
          description: Index of item to scroll to
        - id: measureItem
          type:
            - '(itemIndex: number) => number'
          description: Optional callback to measure the height of an individual item
          optional: true
        - id: scrollToMode
          type:
            - ScrollToMode
          description: >
            Optional defines where in the window the item should be positioned
            to when scrolling
          optional: true
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.List.shouldComponentUpdate
    name: 'shouldComponentUpdate(IListProps<T>, IListState<T>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function shouldComponentUpdate(newProps: IListProps<T>, newState:
        IListState<T>)
      parameters:
        - id: newProps
          type:
            - office-ui-fabric-react.IListProps<T>
          description: ''
        - id: newState
          type:
            - office-ui-fabric-react.IListState<T>
          description: ''
      return:
        type:
          - boolean
    package: office-ui-fabric-react
references:
  - uid: >-
      BaseComponent<office-ui-fabric-react.IListProps<T>,
      office-ui-fabric-react.IListState<T>>
    name: IListState<T>>
    spec.typeScript:
      - name: BaseComponent<
        fullName: BaseComponent<
      - name: IListProps
        fullName: IListProps
        uid: office-ui-fabric-react.IListProps
      - name: '<T>, '
        fullName: '<T>, '
      - name: IListState
        fullName: IListState
        uid: office-ui-fabric-react.IListState
      - name: <T>>
        fullName: <T>>
  - uid: office-ui-fabric-react.IListProps<T>
    name: IListProps<T>
    spec.typeScript:
      - name: IListProps
        fullName: IListProps
        uid: office-ui-fabric-react.IListProps
      - name: <T>
        fullName: <T>
  - uid: office-ui-fabric-react.IListState<T>
    name: IListState<T>
    spec.typeScript:
      - name: IListState
        fullName: IListState
        uid: office-ui-fabric-react.IListState
      - name: <T>
        fullName: <T>
