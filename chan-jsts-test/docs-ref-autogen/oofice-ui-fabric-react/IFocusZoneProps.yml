### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IFocusZoneProps
    name: IFocusZoneProps
    fullName: IFocusZoneProps
    children:
      - office-ui-fabric-react.IFocusZoneProps.allowFocusRoot
      - office-ui-fabric-react.IFocusZoneProps.allowTabKey
      - office-ui-fabric-react.IFocusZoneProps.ariaDescribedBy
      - office-ui-fabric-react.IFocusZoneProps.ariaLabelledBy
      - office-ui-fabric-react.IFocusZoneProps.as
      - office-ui-fabric-react.IFocusZoneProps.checkForNoWrap
      - office-ui-fabric-react.IFocusZoneProps.className
      - office-ui-fabric-react.IFocusZoneProps.componentRef
      - office-ui-fabric-react.IFocusZoneProps.defaultActiveElement
      - office-ui-fabric-react.IFocusZoneProps.direction
      - office-ui-fabric-react.IFocusZoneProps.disabled
      - office-ui-fabric-react.IFocusZoneProps.doNotAllowFocusEventToPropagate
      - office-ui-fabric-react.IFocusZoneProps.elementType
      - office-ui-fabric-react.IFocusZoneProps.handleTabKey
      - office-ui-fabric-react.IFocusZoneProps.isCircularNavigation
      - office-ui-fabric-react.IFocusZoneProps.isInnerZoneKeystroke
      - office-ui-fabric-react.IFocusZoneProps.onActiveElementChanged
      - office-ui-fabric-react.IFocusZoneProps.onBeforeFocus
      - office-ui-fabric-react.IFocusZoneProps.onFocusNotification
      - office-ui-fabric-react.IFocusZoneProps.rootProps
      - office-ui-fabric-react.IFocusZoneProps.shouldInputLoseFocusOnArrowKey
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: |-
      FocusZone component props.
      {@docCategory FocusZone}
    extends:
      name: HTMLAttributes<HTMLElement | office-ui-fabric-react.FocusZone>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.allowFocusRoot
    name: allowFocusRoot
    fullName: allowFocusRoot
    children: []
    langs:
      - typeScript
    type: property
    summary: Allow focus to move to root
    optional: true
    syntax:
      content: 'allowFocusRoot?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.allowTabKey
    name: allowTabKey
    fullName: allowTabKey
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Allows tab key to be handled to tab through a list of items in the focus
      zone,

      an unfortunate side effect is that users will not be able to tab out of
      the focus zone

      and have to hit escape or some other key.
    optional: true
    syntax:
      content: 'allowTabKey?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
    deprecated:
      content: Use `handleTabKey` instead.
  - uid: office-ui-fabric-react.IFocusZoneProps.ariaDescribedBy
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the aria-describedby attribute.
    optional: true
    syntax:
      content: 'ariaDescribedBy?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.ariaLabelledBy
    name: ariaLabelledBy
    fullName: ariaLabelledBy
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the aria-labelledby attribute.
    optional: true
    syntax:
      content: 'ariaLabelledBy?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.as
    name: as
    fullName: as
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A component that should be used as the root element of the FocusZone
      component.
    optional: true
    syntax:
      content: 'as?: React.ReactType'
      return:
        type:
          - React.ReactType
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.checkForNoWrap
    name: checkForNoWrap
    fullName: checkForNoWrap
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the to check for data-no-horizontal-wrap or data-no-vertical-wrap
      attributes

      when determining how to move focus
    optional: true
    syntax:
      content: 'checkForNoWrap?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.className
    name: className
    fullName: className
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Additional class name to provide on the root element, in addition to the
      ms-FocusZone class.
    optional: true
    syntax:
      content: 'className?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to access the IFocusZone interface. Use this instead of
      ref for accessing

      the public methods and properties of the component.
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<IFocusZone>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.IFocusZone>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.defaultActiveElement
    name: defaultActiveElement
    fullName: defaultActiveElement
    children: []
    langs:
      - typeScript
    type: property
    summary: Optionally provide a selector for identifying the intial active element.
    optional: true
    syntax:
      content: 'defaultActiveElement?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.direction
    name: direction
    fullName: direction
    children: []
    langs:
      - typeScript
    type: property
    summary: Defines which arrows to react to.
    optional: true
    syntax:
      content: 'direction?: FocusZoneDirection'
      return:
        type:
          - office-ui-fabric-react.FocusZoneDirection
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.disabled
    name: disabled
    fullName: disabled
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If set, the FocusZone will not be tabbable and keyboard navigation will be
      disabled.

      This does not affect disabled attribute of any child.
    optional: true
    syntax:
      content: 'disabled?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.doNotAllowFocusEventToPropagate
    name: doNotAllowFocusEventToPropagate
    fullName: doNotAllowFocusEventToPropagate
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the FocusZone should allow focus events to propagate past the
      FocusZone
    optional: true
    syntax:
      content: 'doNotAllowFocusEventToPropagate?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.elementType
    name: elementType
    fullName: elementType
    children: []
    langs:
      - typeScript
    type: property
    summary: Element type the root element will use. Default is "div".
    optional: true
    syntax:
      content: 'elementType?: Object'
      return:
        type:
          - Object
    package: office-ui-fabric-react
    deprecated:
      content: Use 'as' instead.
  - uid: office-ui-fabric-react.IFocusZoneProps.handleTabKey
    name: handleTabKey
    fullName: handleTabKey
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Allows tab key to be handled to tab through a list of items in the focus
      zone,

      an unfortunate side effect is that users will not be able to tab out of
      the focus zone

      and have to hit escape or some other key.
    optional: true
    syntax:
      content: 'handleTabKey?: FocusZoneTabbableElements'
      return:
        type:
          - FocusZoneTabbableElements
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.isCircularNavigation
    name: isCircularNavigation
    fullName: isCircularNavigation
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If set, will cycle to the beginning of the targets once the user navigates
      to the

      next target while at the end, and to the end when navigate to the previous
      at the beginning.
    optional: true
    syntax:
      content: 'isCircularNavigation?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.isInnerZoneKeystroke
    name: isInnerZoneKeystroke
    fullName: isInnerZoneKeystroke
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If provided, this callback will be executed on keypresses to determine if
      the user

      intends to navigate into the inner zone. Returning true will ask the first
      inner zone to

      set focus.
    optional: true
    syntax:
      content: 'isInnerZoneKeystroke?: (ev: KeyboardEvent<HTMLElement>) => boolean'
      return:
        type:
          - '(ev: KeyboardEvent<HTMLElement>) => boolean'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.onActiveElementChanged
    name: onActiveElementChanged
    fullName: onActiveElementChanged
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback for when one of immediate children elements gets active by
      getting focused

      or by having one of its respective children elements focused.
    optional: true
    syntax:
      content: >-
        onActiveElementChanged?: (element?: HTMLElement, ev?:
        FocusEvent<HTMLElement>) => void
      return:
        type:
          - '(element?: HTMLElement, ev?: FocusEvent<HTMLElement>) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.onBeforeFocus
    name: onBeforeFocus
    fullName: onBeforeFocus
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback method for determining if focus should indeed be set on the given
      element.
    optional: true
    syntax:
      content: 'onBeforeFocus?: (childElement?: HTMLElement) => boolean'
      return:
        type:
          - '(childElement?: HTMLElement) => boolean'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.onFocusNotification
    name: onFocusNotification
    fullName: onFocusNotification
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback to notify creators that focus has been set on the FocusZone
    optional: true
    syntax:
      content: 'onFocusNotification?: () => void'
      return:
        type:
          - () => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IFocusZoneProps.rootProps
    name: rootProps
    fullName: rootProps
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed
      into the root element.
    optional: true
    syntax:
      content: 'rootProps?: HTMLAttributes<HTMLDivElement>'
      return:
        type:
          - HTMLAttributes<HTMLDivElement>
    package: office-ui-fabric-react
    deprecated:
      content: DIV props provided to the FocusZone will be mixed into the root element.
  - uid: office-ui-fabric-react.IFocusZoneProps.shouldInputLoseFocusOnArrowKey
    name: shouldInputLoseFocusOnArrowKey
    fullName: shouldInputLoseFocusOnArrowKey
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A callback method to determine if the input element should lose focus on
      arrow keys
       @param inputElement - The input element which is to loose focus.
       @returns True if input element should loose focus or false otherwise.
    optional: true
    syntax:
      content: >-
        shouldInputLoseFocusOnArrowKey?: (inputElement: HTMLInputElement) =>
        boolean
      return:
        type:
          - '(inputElement: HTMLInputElement) => boolean'
    package: office-ui-fabric-react
references:
  - uid: HTMLAttributes<HTMLElement | office-ui-fabric-react.FocusZone>
    name: FocusZone>
    spec.typeScript:
      - name: 'HTMLAttributes<HTMLElement | '
        fullName: 'HTMLAttributes<HTMLElement | '
      - name: FocusZone
        fullName: FocusZone
        uid: office-ui-fabric-react.FocusZone
      - name: '>'
        fullName: '>'
  - uid: IRefObject<office-ui-fabric-react.IFocusZone>
    name: IFocusZone>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: IFocusZone
        fullName: IFocusZone
        uid: office-ui-fabric-react.IFocusZone
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.FocusZoneDirection
    name: FocusZoneDirection
    spec.typeScript:
      - name: FocusZoneDirection
        fullName: FocusZoneDirection
        uid: office-ui-fabric-react.FocusZoneDirection
