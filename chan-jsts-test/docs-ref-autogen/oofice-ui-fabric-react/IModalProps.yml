### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IModalProps
    name: IModalProps
    fullName: IModalProps
    children:
      - office-ui-fabric-react.IModalProps.className
      - office-ui-fabric-react.IModalProps.componentRef
      - office-ui-fabric-react.IModalProps.containerClassName
      - office-ui-fabric-react.IModalProps.dragOptions
      - office-ui-fabric-react.IModalProps.isBlocking
      - office-ui-fabric-react.IModalProps.isDarkOverlay
      - office-ui-fabric-react.IModalProps.isModeless
      - office-ui-fabric-react.IModalProps.isOpen
      - office-ui-fabric-react.IModalProps.layerProps
      - office-ui-fabric-react.IModalProps.onDismiss
      - office-ui-fabric-react.IModalProps.onDismissed
      - office-ui-fabric-react.IModalProps.onLayerDidMount
      - office-ui-fabric-react.IModalProps.scrollableContentClassName
      - office-ui-fabric-react.IModalProps.styles
      - office-ui-fabric-react.IModalProps.subtitleAriaId
      - office-ui-fabric-react.IModalProps.theme
      - office-ui-fabric-react.IModalProps.titleAriaId
      - office-ui-fabric-react.IModalProps.topOffsetFixed
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: '{@docCategory Modal}'
    extends:
      name: ClassAttributes<office-ui-fabric-react.ModalBase>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.className
    name: className
    fullName: className
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional class name to be added to the root class
    optional: true
    syntax:
      content: 'className?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback to access the IDialog interface. Use this instead of ref
      for accessing

      the public methods and properties of the component.
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<IModal>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.IModal>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.containerClassName
    name: containerClassName
    fullName: containerClassName
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional override for container class
    optional: true
    syntax:
      content: 'containerClassName?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.dragOptions
    name: dragOptions
    fullName: dragOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: The options to make the modal draggable
    optional: true
    syntax:
      content: 'dragOptions?: IDragOptions'
      return:
        type:
          - office-ui-fabric-react.IDragOptions
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.isBlocking
    name: isBlocking
    fullName: isBlocking
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the dialog can be light dismissed by clicking outside the dialog
      (on the overlay).
    optional: true
    syntax:
      content: 'isBlocking?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.isDarkOverlay
    name: isDarkOverlay
    fullName: isDarkOverlay
    children: []
    langs:
      - typeScript
    type: property
    summary: Whether the overlay is dark themed.
    optional: true
    syntax:
      content: 'isDarkOverlay?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.isModeless
    name: isModeless
    fullName: isModeless
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the dialog should be modeless (e.g. not dismiss when
      focusing/clicking outside of the dialog).

      if true: isBlocking is ignored, there will be no overlay (isDarkOverlay is
      ignored),

      isClickableOutsideFocusTrap is true, and forceFocusInsideTrap is false
    optional: true
    syntax:
      content: 'isModeless?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.isOpen
    name: isOpen
    fullName: isOpen
    children: []
    langs:
      - typeScript
    type: property
    summary: Whether the dialog is displayed.
    optional: true
    syntax:
      content: 'isOpen?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.layerProps
    name: layerProps
    fullName: layerProps
    children: []
    langs:
      - typeScript
    type: property
    summary: Props to be passed through to Layer
    optional: true
    syntax:
      content: 'layerProps?: ILayerProps'
      return:
        type:
          - office-ui-fabric-react.ILayerProps
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.onDismiss
    name: onDismiss
    fullName: onDismiss
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A callback function for when the Modal is dismissed light dismiss, before
      the animation completes.
    optional: true
    syntax:
      content: 'onDismiss?: (ev?: MouseEvent<HTMLButtonElement>) => any'
      return:
        type:
          - '(ev?: MouseEvent<HTMLButtonElement>) => any'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.onDismissed
    name: onDismissed
    fullName: onDismissed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A callback function which is called after the Modal is dismissed and the
      animation is complete.
    optional: true
    syntax:
      content: 'onDismissed?: () => any'
      return:
        type:
          - () => any
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.onLayerDidMount
    name: onLayerDidMount
    fullName: onLayerDidMount
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A callback function for when the Modal content is mounted on the overlay
      layer
    optional: true
    syntax:
      content: 'onLayerDidMount?: () => void'
      return:
        type:
          - () => void
    package: office-ui-fabric-react
    deprecated:
      content: Use layerProps.onLayerDidMount instead
  - uid: office-ui-fabric-react.IModalProps.scrollableContentClassName
    name: scrollableContentClassName
    fullName: scrollableContentClassName
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional override for scrollable content class
    optional: true
    syntax:
      content: 'scrollableContentClassName?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.styles
    name: styles
    fullName: styles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Call to provide customized styling that will layer on top of the variant
      rules.
    optional: true
    syntax:
      content: 'styles?: IStyleFunctionOrObject<IModalStyleProps, IModalStyles>'
      return:
        type:
          - >-
            IStyleFunctionOrObject<office-ui-fabric-react.IModalStyleProps,
            office-ui-fabric-react.IModalStyles>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.subtitleAriaId
    name: subtitleAriaId
    fullName: subtitleAriaId
    children: []
    langs:
      - typeScript
    type: property
    summary: 'ARIA id for the subtitle of the Modal, if any'
    optional: true
    syntax:
      content: 'subtitleAriaId?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.theme
    name: theme
    fullName: theme
    children: []
    langs:
      - typeScript
    type: property
    summary: Theme provided by High-Order Component.
    optional: true
    syntax:
      content: 'theme?: ITheme'
      return:
        type:
          - ITheme
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.titleAriaId
    name: titleAriaId
    fullName: titleAriaId
    children: []
    langs:
      - typeScript
    type: property
    summary: 'ARIA id for the title of the Modal, if any'
    optional: true
    syntax:
      content: 'titleAriaId?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IModalProps.topOffsetFixed
    name: topOffsetFixed
    fullName: topOffsetFixed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the modal should have top offset fixed once opened and expand from
      the bottom only

      when the content changes dynamically.
    optional: true
    syntax:
      content: 'topOffsetFixed?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
references:
  - uid: ClassAttributes<office-ui-fabric-react.ModalBase>
    name: ModalBase>
    spec.typeScript:
      - name: ClassAttributes<
        fullName: ClassAttributes<
      - name: ModalBase
        fullName: ModalBase
        uid: office-ui-fabric-react.ModalBase
      - name: '>'
        fullName: '>'
  - uid: IRefObject<office-ui-fabric-react.IModal>
    name: IModal>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: IModal
        fullName: IModal
        uid: office-ui-fabric-react.IModal
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.IDragOptions
    name: IDragOptions
    spec.typeScript:
      - name: IDragOptions
        fullName: IDragOptions
        uid: office-ui-fabric-react.IDragOptions
  - uid: office-ui-fabric-react.ILayerProps
    name: ILayerProps
    spec.typeScript:
      - name: ILayerProps
        fullName: ILayerProps
        uid: office-ui-fabric-react.ILayerProps
  - uid: >-
      IStyleFunctionOrObject<office-ui-fabric-react.IModalStyleProps,
      office-ui-fabric-react.IModalStyles>
    name: IModalStyles>
    spec.typeScript:
      - name: IStyleFunctionOrObject<
        fullName: IStyleFunctionOrObject<
      - name: IModalStyleProps
        fullName: IModalStyleProps
        uid: office-ui-fabric-react.IModalStyleProps
      - name: ', '
        fullName: ', '
      - name: IModalStyles
        fullName: IModalStyles
        uid: office-ui-fabric-react.IModalStyles
      - name: '>'
        fullName: '>'
