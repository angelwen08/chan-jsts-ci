### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.ICalloutProps
    name: ICalloutProps
    fullName: ICalloutProps
    children:
      - office-ui-fabric-react.ICalloutProps.alignTargetEdge
      - office-ui-fabric-react.ICalloutProps.ariaDescribedBy
      - office-ui-fabric-react.ICalloutProps.ariaLabel
      - office-ui-fabric-react.ICalloutProps.ariaLabelledBy
      - office-ui-fabric-react.ICalloutProps.backgroundColor
      - office-ui-fabric-react.ICalloutProps.beakWidth
      - office-ui-fabric-react.ICalloutProps.bounds
      - office-ui-fabric-react.ICalloutProps.calloutMaxHeight
      - office-ui-fabric-react.ICalloutProps.calloutMaxWidth
      - office-ui-fabric-react.ICalloutProps.calloutWidth
      - office-ui-fabric-react.ICalloutProps.className
      - office-ui-fabric-react.ICalloutProps.coverTarget
      - office-ui-fabric-react.ICalloutProps.directionalHint
      - office-ui-fabric-react.ICalloutProps.directionalHintFixed
      - office-ui-fabric-react.ICalloutProps.directionalHintForRTL
      - office-ui-fabric-react.ICalloutProps.doNotLayer
      - office-ui-fabric-react.ICalloutProps.finalHeight
      - office-ui-fabric-react.ICalloutProps.gapSpace
      - office-ui-fabric-react.ICalloutProps.hidden
      - office-ui-fabric-react.ICalloutProps.hideOverflow
      - office-ui-fabric-react.ICalloutProps.isBeakVisible
      - office-ui-fabric-react.ICalloutProps.layerProps
      - office-ui-fabric-react.ICalloutProps.minPagePadding
      - office-ui-fabric-react.ICalloutProps.onDismiss
      - office-ui-fabric-react.ICalloutProps.onLayerMounted
      - office-ui-fabric-react.ICalloutProps.onPositioned
      - office-ui-fabric-react.ICalloutProps.onScroll
      - office-ui-fabric-react.ICalloutProps.preventDismissOnLostFocus
      - office-ui-fabric-react.ICalloutProps.preventDismissOnResize
      - office-ui-fabric-react.ICalloutProps.preventDismissOnScroll
      - office-ui-fabric-react.ICalloutProps.role
      - office-ui-fabric-react.ICalloutProps.setInitialFocus
      - office-ui-fabric-react.ICalloutProps.style
      - office-ui-fabric-react.ICalloutProps.styles
      - office-ui-fabric-react.ICalloutProps.target
      - office-ui-fabric-react.ICalloutProps.theme
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: '{@docCategory Callout}'
    extends:
      name: HTMLAttributes<HTMLDivElement>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.alignTargetEdge
    name: alignTargetEdge
    fullName: alignTargetEdge
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true the positioning logic will prefer to flip edges rather than to
      nudge the rectangle to fit within bounds,

      thus making sure the element aligns perfectly with target's alignment edge
    optional: true
    syntax:
      content: 'alignTargetEdge?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.ariaDescribedBy
    name: ariaDescribedBy
    fullName: ariaDescribedBy
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Defines the element id referencing the element containing the description
      for the callout.
    optional: true
    syntax:
      content: 'ariaDescribedBy?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.ariaLabel
    name: ariaLabel
    fullName: ariaLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: Accessible label text for callout.
    optional: true
    syntax:
      content: 'ariaLabel?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.ariaLabelledBy
    name: ariaLabelledBy
    fullName: ariaLabelledBy
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Defines the element id referencing the element containing label text for
      callout.
    optional: true
    syntax:
      content: 'ariaLabelledBy?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.backgroundColor
    name: backgroundColor
    fullName: backgroundColor
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The background color of the Callout in hex format ie. #ffffff.'
    optional: true
    syntax:
      content: 'backgroundColor?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.beakWidth
    name: beakWidth
    fullName: beakWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: The width of the beak.
    optional: true
    syntax:
      content: 'beakWidth?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.bounds
    name: bounds
    fullName: bounds
    children: []
    langs:
      - typeScript
    type: property
    summary: The bounding rectangle for which  the contextual menu can appear in.
    optional: true
    syntax:
      content: 'bounds?: IRectangle'
      return:
        type:
          - IRectangle
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.calloutMaxHeight
    name: calloutMaxHeight
    fullName: calloutMaxHeight
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Set max height of callout

      When not set the callout will expand with contents up to the bottom of the
      screen
    optional: true
    syntax:
      content: 'calloutMaxHeight?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.calloutMaxWidth
    name: calloutMaxWidth
    fullName: calloutMaxWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Custom width for callout including borders. If value is 0, no width is
      applied.
    optional: true
    syntax:
      content: 'calloutMaxWidth?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.calloutWidth
    name: calloutWidth
    fullName: calloutWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Custom width for callout including borders. If value is 0, no width is
      applied.
    optional: true
    syntax:
      content: 'calloutWidth?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.className
    name: className
    fullName: className
    children: []
    langs:
      - typeScript
    type: property
    summary: CSS class to apply to the callout.
    optional: true
    syntax:
      content: 'className?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.coverTarget
    name: coverTarget
    fullName: coverTarget
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If true the position returned will have the menu element cover the target.
      If false then it will position next to the target;
    optional: true
    syntax:
      content: 'coverTarget?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.directionalHint
    name: directionalHint
    fullName: directionalHint
    children: []
    langs:
      - typeScript
    type: property
    summary: How the element should be positioned
    optional: true
    syntax:
      content: 'directionalHint?: DirectionalHint'
      return:
        type:
          - DirectionalHint
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.directionalHintFixed
    name: directionalHintFixed
    fullName: directionalHintFixed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true the position will not change sides in an attempt to fit the
      callout within bounds.

      It will still attempt to align it to whatever bounds are given.
    optional: true
    syntax:
      content: 'directionalHintFixed?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.directionalHintForRTL
    name: directionalHintForRTL
    fullName: directionalHintForRTL
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      How the element should be positioned in RTL layouts.
      If not specified, a mirror of `directionalHint` will be used instead
    optional: true
    syntax:
      content: 'directionalHintForRTL?: DirectionalHint'
      return:
        type:
          - DirectionalHint
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.doNotLayer
    name: doNotLayer
    fullName: doNotLayer
    children: []
    langs:
      - typeScript
    type: property
    summary: If true do not render on a new layer. If false render on a new layer.
    optional: true
    syntax:
      content: 'doNotLayer?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.finalHeight
    name: finalHeight
    fullName: finalHeight
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specify the final height of the content.

      To be used when expanding the content dynamically so that callout can
      adjust its position.
    optional: true
    syntax:
      content: 'finalHeight?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.gapSpace
    name: gapSpace
    fullName: gapSpace
    children: []
    langs:
      - typeScript
    type: property
    summary: The gap between the Callout and the target
    optional: true
    syntax:
      content: 'gapSpace?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.hidden
    name: hidden
    fullName: hidden
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If specified, renders the Callout in a hidden state.

      Use this flag, rather than rendering a callout conditionally based on
      visibility,

      to improve rendering performance when it becomes visible.

      Note: When callout is hidden its content will not be rendered. It will
      only render

      once the callout is visible.
    optional: true
    syntax:
      content: 'hidden?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.hideOverflow
    name: hideOverflow
    fullName: hideOverflow
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Manually set OverflowYHidden style prop to true on calloutMain element

      A variety of callout load animations will need this to hide the scollbar
      that can appear
    optional: true
    syntax:
      content: 'hideOverflow?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.isBeakVisible
    name: isBeakVisible
    fullName: isBeakVisible
    children: []
    langs:
      - typeScript
    type: property
    summary: If true then the beak is visible. If false it will not be shown.
    optional: true
    syntax:
      content: 'isBeakVisible?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.layerProps
    name: layerProps
    fullName: layerProps
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional props to pass to the Layer component hosting the panel.
    optional: true
    syntax:
      content: 'layerProps?: ILayerProps'
      return:
        type:
          - office-ui-fabric-react.ILayerProps
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.minPagePadding
    name: minPagePadding
    fullName: minPagePadding
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The minimum distance the callout will be away from the edge of the screen.
       @defaultvalue 8
    optional: true
    syntax:
      content: 'minPagePadding?: number'
      return:
        type:
          - number
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.onDismiss
    name: onDismiss
    fullName: onDismiss
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback when the Callout tries to close.
    optional: true
    syntax:
      content: 'onDismiss?: (ev?: any) => void'
      return:
        type:
          - '(ev?: any) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.onLayerMounted
    name: onLayerMounted
    fullName: onLayerMounted
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional callback when the layer content has mounted.
    optional: true
    syntax:
      content: 'onLayerMounted?: () => void'
      return:
        type:
          - () => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.onPositioned
    name: onPositioned
    fullName: onPositioned
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional callback that is called once the callout has been correctly
      positioned.
    optional: true
    syntax:
      content: 'onPositioned?: (positions?: ICalloutPositionedInfo) => void'
      return:
        type:
          - '(positions?: ICalloutPositionedInfo) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.onScroll
    name: onScroll
    fullName: onScroll
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback when the Callout body is scrolled.
    optional: true
    syntax:
      content: 'onScroll?: () => void'
      return:
        type:
          - () => void
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnLostFocus
    name: preventDismissOnLostFocus
    fullName: preventDismissOnLostFocus
    children: []
    langs:
      - typeScript
    type: property
    summary: If true then the callout will not dismiss when it loses focus
    optional: true
    syntax:
      content: 'preventDismissOnLostFocus?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnResize
    name: preventDismissOnResize
    fullName: preventDismissOnResize
    children: []
    langs:
      - typeScript
    type: property
    summary: If true then the callout will not dismiss on resize
    optional: true
    syntax:
      content: 'preventDismissOnResize?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.preventDismissOnScroll
    name: preventDismissOnScroll
    fullName: preventDismissOnScroll
    children: []
    langs:
      - typeScript
    type: property
    summary: If true then the callout will not dismiss on scroll
    optional: true
    syntax:
      content: 'preventDismissOnScroll?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.role
    name: role
    fullName: role
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Aria role assigned to the callout (Eg. dialog, alertdialog).'
    optional: true
    syntax:
      content: 'role?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.setInitialFocus
    name: setInitialFocus
    fullName: setInitialFocus
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true then the callout will attempt to focus the first focusable element
      that it contains.

      If it doesn't find an element, no focus will be set and the method will
      return false.

      This means that it's the contents responsibility to either set focus or
      have

      focusable items.
    optional: true
    syntax:
      content: 'setInitialFocus?: boolean'
      return:
        type:
          - boolean
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.style
    name: style
    fullName: style
    children: []
    langs:
      - typeScript
    type: property
    summary: CSS style to apply to the callout.
    optional: true
    syntax:
      content: 'style?: CSSProperties'
      return:
        type:
          - CSSProperties
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.styles
    name: styles
    fullName: styles
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional styles for the component.
    optional: true
    syntax:
      content: >-
        styles?: IStyleFunctionOrObject<ICalloutContentStyleProps,
        ICalloutContentStyles>
      return:
        type:
          - >-
            IStyleFunctionOrObject<office-ui-fabric-react.ICalloutContentStyleProps,
            office-ui-fabric-react.ICalloutContentStyles>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.target
    name: target
    fullName: target
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The target that the Callout should try to position itself based on.

      It can be either an Element a querySelector string of a valid Element

      or a MouseEvent. If MouseEvent is given then the origin point of the event
      will be used.
    optional: true
    syntax:
      content: 'target?: Target'
      return:
        type:
          - office-ui-fabric-react.Target
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.ICalloutProps.theme
    name: theme
    fullName: theme
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional theme for component
    optional: true
    syntax:
      content: 'theme?: ITheme'
      return:
        type:
          - ITheme
    package: office-ui-fabric-react
references:
  - uid: office-ui-fabric-react.ILayerProps
    name: ILayerProps
    spec.typeScript:
      - name: ILayerProps
        fullName: ILayerProps
        uid: office-ui-fabric-react.ILayerProps
  - uid: >-
      IStyleFunctionOrObject<office-ui-fabric-react.ICalloutContentStyleProps,
      office-ui-fabric-react.ICalloutContentStyles>
    name: ICalloutContentStyles>
    spec.typeScript:
      - name: IStyleFunctionOrObject<
        fullName: IStyleFunctionOrObject<
      - name: ICalloutContentStyleProps
        fullName: ICalloutContentStyleProps
        uid: office-ui-fabric-react.ICalloutContentStyleProps
      - name: ', '
        fullName: ', '
      - name: ICalloutContentStyles
        fullName: ICalloutContentStyles
        uid: office-ui-fabric-react.ICalloutContentStyles
      - name: '>'
        fullName: '>'
  - uid: office-ui-fabric-react.Target
    name: Target
    spec.typeScript:
      - name: Target
        fullName: Target
        uid: office-ui-fabric-react.Target
