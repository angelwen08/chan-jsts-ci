### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IPanelHeaderRenderer_1
    name: >-
      office-ui-fabric-react(IPanelProps, (props?: IPanelProps) => Element |
      null)
    fullName: IPanelHeaderRenderer
    children: []
    syntax:
      content: >-
        new office-ui-fabric-react(props?: IPanelProps, defaultRender?: (props?:
        IPanelProps) => Element | null)
      parameters:
        - id: props
          type:
            - office-ui-fabric-react.IPanelProps
          description: ''
          optional: true
        - id: defaultRender
          type:
            - '(props?: IPanelProps) => Element | null'
          description: ''
          optional: true
      return:
        type:
          - Element | null
    langs:
      - typeScript
    type: constructor
    summary: >-
      Renderer function which takes an additional parameter, the ID to use for
      the element containing

      the panel's title. This allows the `aria-labelledby` for the panel popup
      to work correctly.

      Note that if `headerTextId` is provided, it **must** be used on an
      element, or screen readers

      will be confused by the reference to a nonexistent ID.

      {@docCategory Panel}
    extends:
      name: IRenderFunction<office-ui-fabric-react.IPanelProps>
    package: office-ui-fabric-react
references:
  - uid: office-ui-fabric-react.IPanelProps
    name: IPanelProps
    spec.typeScript:
      - name: IPanelProps
        fullName: IPanelProps
        uid: office-ui-fabric-react.IPanelProps
  - uid: IRenderFunction<office-ui-fabric-react.IPanelProps>
    name: IPanelProps>
    spec.typeScript:
      - name: IRenderFunction<
        fullName: IRenderFunction<
      - name: IPanelProps
        fullName: IPanelProps
        uid: office-ui-fabric-react.IPanelProps
      - name: '>'
        fullName: '>'
