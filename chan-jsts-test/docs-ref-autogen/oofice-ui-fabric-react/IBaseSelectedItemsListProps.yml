### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps
    name: IBaseSelectedItemsListProps
    fullName: IBaseSelectedItemsListProps<T>
    children:
      - office-ui-fabric-react.IBaseSelectedItemsListProps.canRemoveItem
      - office-ui-fabric-react.IBaseSelectedItemsListProps.componentRef
      - office-ui-fabric-react.IBaseSelectedItemsListProps.createGenericItem
      - office-ui-fabric-react.IBaseSelectedItemsListProps.defaultSelectedItems
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onChange
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onCopyItems
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onItemDeleted
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onItemsDeleted
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onItemSelected
      - office-ui-fabric-react.IBaseSelectedItemsListProps.onRenderItem
      - office-ui-fabric-react.IBaseSelectedItemsListProps.removeButtonAriaLabel
      - office-ui-fabric-react.IBaseSelectedItemsListProps.selectedItems
      - office-ui-fabric-react.IBaseSelectedItemsListProps.selection
    syntax:
      content: ''
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: ClassAttributes<any>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.canRemoveItem
    name: canRemoveItem
    fullName: canRemoveItem
    children: []
    langs:
      - typeScript
    type: property
    summary: A callback on whether this item can be deleted
    optional: true
    syntax:
      content: 'canRemoveItem?: (item: T) => boolean'
      return:
        type:
          - '(item: T) => boolean'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.componentRef
    name: componentRef
    fullName: componentRef
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'componentRef?: IRefObject<IBaseSelectedItemsList<T>>'
      return:
        type:
          - IRefObject<office-ui-fabric-react.IBaseSelectedItemsList<T>>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.createGenericItem
    name: createGenericItem
    fullName: createGenericItem
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Function that specifies how arbitrary text entered into the well is
      handled.
    optional: true
    syntax:
      content: >-
        createGenericItem?: (input: string, ValidationState: ValidationState) =>
        ISuggestionModel<T>
      return:
        type:
          - >-
            (input: string, ValidationState: ValidationState) =>
            ISuggestionModel<T>
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.defaultSelectedItems
    name: defaultSelectedItems
    fullName: defaultSelectedItems
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Initial items that have already been selected and should appear in the
      people picker.
    optional: true
    syntax:
      content: 'defaultSelectedItems?: T[]'
      return:
        type:
          - 'T[]'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onChange
    name: onChange
    fullName: onChange
    children: []
    langs:
      - typeScript
    type: property
    summary: A callback for when the selected list of items changes.
    optional: true
    syntax:
      content: 'onChange?: (items?: T[]) => void'
      return:
        type:
          - '(items?: T[]) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onCopyItems
    name: onCopyItems
    fullName: onCopyItems
    children: []
    langs:
      - typeScript
    type: property
    summary: A callback for when items are copied
    optional: true
    syntax:
      content: 'onCopyItems?: (items: T[]) => string'
      return:
        type:
          - '(items: T[]) => string'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onItemDeleted
    name: onItemDeleted
    fullName: onItemDeleted
    children: []
    langs:
      - typeScript
    type: property
    summary: A callback when an item is deleted
    optional: true
    syntax:
      content: 'onItemDeleted?: (deletedItem: T) => void'
      return:
        type:
          - '(deletedItem: T) => void'
    package: office-ui-fabric-react
    deprecated:
      content: Use `onItemsDeleted` instead.
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onItemsDeleted
    name: onItemsDeleted
    fullName: onItemsDeleted
    children: []
    langs:
      - typeScript
    type: property
    summary: A callback when and item or items are deleted
    optional: true
    syntax:
      content: 'onItemsDeleted?: (deletedItems: T[]) => void'
      return:
        type:
          - '(deletedItems: T[]) => void'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onItemSelected
    name: onItemSelected
    fullName: onItemSelected
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A callback to process a selection after the user selects something from
      the picker.
    optional: true
    syntax:
      content: 'onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>'
      return:
        type:
          - '(selectedItem?: T) => T | PromiseLike<T>'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.onRenderItem
    name: onRenderItem
    fullName: onRenderItem
    children: []
    langs:
      - typeScript
    type: property
    summary: Function that specifies how the selected item will appear.
    optional: true
    syntax:
      content: 'onRenderItem?: (props: ISelectedItemProps<T>) => Element'
      return:
        type:
          - '(props: ISelectedItemProps<T>) => Element'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.removeButtonAriaLabel
    name: removeButtonAriaLabel
    fullName: removeButtonAriaLabel
    children: []
    langs:
      - typeScript
    type: property
    summary: Aria label for the 'X' button in the selected item component.
    optional: true
    syntax:
      content: 'removeButtonAriaLabel?: string'
      return:
        type:
          - string
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.selectedItems
    name: selectedItems
    fullName: selectedItems
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The items that the base picker should currently display as selected. If
      this is provided then the picker will act as a

      controlled component.
    optional: true
    syntax:
      content: 'selectedItems?: T[]'
      return:
        type:
          - 'T[]'
    package: office-ui-fabric-react
  - uid: office-ui-fabric-react.IBaseSelectedItemsListProps.selection
    name: selection
    fullName: selection
    children: []
    langs:
      - typeScript
    type: property
    summary: The selection
    optional: true
    syntax:
      content: 'selection?: Selection'
      return:
        type:
          - office-ui-fabric-react.Selection
    package: office-ui-fabric-react
references:
  - uid: IRefObject<office-ui-fabric-react.IBaseSelectedItemsList<T>>
    name: IBaseSelectedItemsList<T>>
    spec.typeScript:
      - name: IRefObject<
        fullName: IRefObject<
      - name: IBaseSelectedItemsList
        fullName: IBaseSelectedItemsList
        uid: office-ui-fabric-react.IBaseSelectedItemsList
      - name: <T>>
        fullName: <T>>
  - uid: office-ui-fabric-react.Selection
    name: Selection
    spec.typeScript:
      - name: Selection
        fullName: Selection
        uid: office-ui-fabric-react.Selection
