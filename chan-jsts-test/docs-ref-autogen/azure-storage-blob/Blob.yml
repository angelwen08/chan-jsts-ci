### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-blob.Blob'
    name: Blob
    fullName: Blob
    children:
      - '@azure/storage-blob.Blob.abortCopyFromURL'
      - '@azure/storage-blob.Blob.abortCopyFromURL_2'
      - '@azure/storage-blob.Blob.abortCopyFromURL_1'
      - '@azure/storage-blob.Blob.acquireLease'
      - '@azure/storage-blob.Blob.acquireLease_2'
      - '@azure/storage-blob.Blob.acquireLease_1'
      - '@azure/storage-blob.Blob.constructor'
      - '@azure/storage-blob.Blob.breakLease'
      - '@azure/storage-blob.Blob.breakLease_2'
      - '@azure/storage-blob.Blob.breakLease_1'
      - '@azure/storage-blob.Blob.changeLease'
      - '@azure/storage-blob.Blob.changeLease_2'
      - '@azure/storage-blob.Blob.changeLease_1'
      - '@azure/storage-blob.Blob.createSnapshot'
      - '@azure/storage-blob.Blob.createSnapshot_2'
      - '@azure/storage-blob.Blob.createSnapshot_1'
      - '@azure/storage-blob.Blob.deleteMethod'
      - '@azure/storage-blob.Blob.deleteMethod_2'
      - '@azure/storage-blob.Blob.deleteMethod_1'
      - '@azure/storage-blob.Blob.download'
      - '@azure/storage-blob.Blob.download_2'
      - '@azure/storage-blob.Blob.download_1'
      - '@azure/storage-blob.Blob.getAccountInfo'
      - '@azure/storage-blob.Blob.getAccountInfo_2'
      - '@azure/storage-blob.Blob.getAccountInfo_1'
      - '@azure/storage-blob.Blob.getProperties'
      - '@azure/storage-blob.Blob.getProperties_2'
      - '@azure/storage-blob.Blob.getProperties_1'
      - '@azure/storage-blob.Blob.releaseLease'
      - '@azure/storage-blob.Blob.releaseLease_2'
      - '@azure/storage-blob.Blob.releaseLease_1'
      - '@azure/storage-blob.Blob.renewLease'
      - '@azure/storage-blob.Blob.renewLease_2'
      - '@azure/storage-blob.Blob.renewLease_1'
      - '@azure/storage-blob.Blob.setHTTPHeaders'
      - '@azure/storage-blob.Blob.setHTTPHeaders_2'
      - '@azure/storage-blob.Blob.setHTTPHeaders_1'
      - '@azure/storage-blob.Blob.setMetadata'
      - '@azure/storage-blob.Blob.setMetadata_2'
      - '@azure/storage-blob.Blob.setMetadata_1'
      - '@azure/storage-blob.Blob.setTier'
      - '@azure/storage-blob.Blob.setTier_2'
      - '@azure/storage-blob.Blob.setTier_1'
      - '@azure/storage-blob.Blob.startCopyFromURL'
      - '@azure/storage-blob.Blob.startCopyFromURL_2'
      - '@azure/storage-blob.Blob.startCopyFromURL_1'
      - '@azure/storage-blob.Blob.undelete'
      - '@azure/storage-blob.Blob.undelete_2'
      - '@azure/storage-blob.Blob.undelete_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Blob.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.abortCopyFromURL'
    name: 'abortCopyFromURL(string, BlobAbortCopyFromURLOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        BlobAbortCopyFromURLOptionalParams)
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy Blob

            operation.
        - id: options
          type:
            - '@azure/storage-blob.BlobAbortCopyFromURLOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobAbortCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.abortCopyFromURL_2'
    name: >-
      abortCopyFromURL(string, BlobAbortCopyFromURLOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options:
        BlobAbortCopyFromURLOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy Blob

            operation.
        - id: options
          type:
            - '@azure/storage-blob.BlobAbortCopyFromURLOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobAbortCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.abortCopyFromURL_1'
    name: 'abortCopyFromURL(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy Blob

            operation.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobAbortCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.acquireLease'
    name: acquireLease(BlobAcquireLeaseOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function acquireLease(options?: BlobAcquireLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobAcquireLeaseOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobAcquireLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.acquireLease_2'
    name: 'acquireLease(BlobAcquireLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireLease(options: BlobAcquireLeaseOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobAcquireLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobAcquireLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.acquireLease_1'
    name: acquireLease(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function acquireLease(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobAcquireLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.constructor'
    name: Blob(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Blob.
    syntax:
      content: 'new Blob(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-blob.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.breakLease'
    name: breakLease(BlobBreakLeaseOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function breakLease(options?: BlobBreakLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobBreakLeaseOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobBreakLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.breakLease_2'
    name: 'breakLease(BlobBreakLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function breakLease(options: BlobBreakLeaseOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobBreakLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobBreakLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.breakLease_1'
    name: breakLease(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function breakLease(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobBreakLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.changeLease'
    name: 'changeLease(string, string, BlobChangeLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options?:
        BlobChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type:
            - string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: options
          type:
            - '@azure/storage-blob.BlobChangeLeaseOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobChangeLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.changeLease_2'
    name: >-
      changeLease(string, string, BlobChangeLeaseOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        BlobChangeLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type:
            - string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: options
          type:
            - '@azure/storage-blob.BlobChangeLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobChangeLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.changeLease_1'
    name: 'changeLease(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type:
            - string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobChangeLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.createSnapshot'
    name: createSnapshot(BlobCreateSnapshotOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: 'function createSnapshot(options?: BlobCreateSnapshotOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobCreateSnapshotOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobCreateSnapshotResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.createSnapshot_2'
    name: 'createSnapshot(BlobCreateSnapshotOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createSnapshot(options: BlobCreateSnapshotOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobCreateSnapshotOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobCreateSnapshotResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.createSnapshot_1'
    name: createSnapshot(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createSnapshot(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobCreateSnapshotResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.deleteMethod'
    name: deleteMethod(BlobDeleteMethodOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: 'function deleteMethod(options?: BlobDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteMethodOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobDeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.deleteMethod_2'
    name: 'deleteMethod(BlobDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(options: BlobDeleteMethodOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobDeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.deleteMethod_1'
    name: deleteMethod(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobDeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.download'
    name: download(BlobDownloadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Download operation reads or downloads a blob from the system,
      including its metadata and

      properties. You can also call Download to read a snapshot.
    syntax:
      content: 'function download(options?: BlobDownloadOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobDownloadResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.download_2'
    name: 'download(BlobDownloadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function download(options: BlobDownloadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobDownloadResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.download_1'
    name: download(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function download(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobDownloadResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getAccountInfo'
    name: getAccountInfo(RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the sku name and account kind
    syntax:
      content: 'function getAccountInfo(options?: RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobGetAccountInfoResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getAccountInfo_2'
    name: 'getAccountInfo(RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAccountInfo(options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobGetAccountInfoResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getAccountInfo_1'
    name: getAccountInfo(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAccountInfo(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobGetAccountInfoResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getProperties'
    name: getProperties(BlobGetPropertiesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: 'function getProperties(options?: BlobGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobGetPropertiesOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobGetPropertiesResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getProperties_2'
    name: 'getProperties(BlobGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProperties(options: BlobGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobGetPropertiesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobGetPropertiesResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.getProperties_1'
    name: getProperties(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobGetPropertiesResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.releaseLease'
    name: 'releaseLease(string, BlobReleaseLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function releaseLease(leaseId: string, options?:
        BlobReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: options
          type:
            - '@azure/storage-blob.BlobReleaseLeaseOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobReleaseLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.releaseLease_2'
    name: >-
      releaseLease(string, BlobReleaseLeaseOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        BlobReleaseLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: options
          type:
            - '@azure/storage-blob.BlobReleaseLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobReleaseLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.releaseLease_1'
    name: 'releaseLease(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function releaseLease(leaseId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobReleaseLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.renewLease'
    name: 'renewLease(string, BlobRenewLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function renewLease(leaseId: string, options?:
        BlobRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: options
          type:
            - '@azure/storage-blob.BlobRenewLeaseOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobRenewLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.renewLease_2'
    name: 'renewLease(string, BlobRenewLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        BlobRenewLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: options
          type:
            - '@azure/storage-blob.BlobRenewLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobRenewLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.renewLease_1'
    name: 'renewLease(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function renewLease(leaseId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: leaseId
          type:
            - string
          description: Specifies the current lease ID on the resource.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobRenewLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setHTTPHeaders'
    name: setHTTPHeaders(BlobSetHTTPHeadersOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: 'function setHTTPHeaders(options?: BlobSetHTTPHeadersOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobSetHTTPHeadersOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetHTTPHeadersResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setHTTPHeaders_2'
    name: 'setHTTPHeaders(BlobSetHTTPHeadersOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setHTTPHeaders(options: BlobSetHTTPHeadersOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobSetHTTPHeadersOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetHTTPHeadersResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setHTTPHeaders_1'
    name: setHTTPHeaders(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setHTTPHeaders(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetHTTPHeadersResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setMetadata'
    name: setMetadata(BlobSetMetadataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: 'function setMetadata(options?: BlobSetMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobSetMetadataOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetMetadataResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setMetadata_2'
    name: 'setMetadata(BlobSetMetadataOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setMetadata(options: BlobSetMetadataOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobSetMetadataOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetMetadataResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setMetadata_1'
    name: setMetadata(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMetadata(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetMetadataResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setTier'
    name: 'setTier(Models.AccessTier, BlobSetTierOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: >-
        function setTier(tier: Models.AccessTier, options?:
        BlobSetTierOptionalParams)
      parameters:
        - id: tier
          type:
            - Models.AccessTier
          description: >-
            Indicates the tier to be set on the blob. Possible values include:
            'P4', 'P6',

            'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTierOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetTierResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setTier_2'
    name: >-
      setTier(Models.AccessTier, BlobSetTierOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setTier(tier: Models.AccessTier, options:
        BlobSetTierOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: tier
          type:
            - Models.AccessTier
          description: >-
            Indicates the tier to be set on the blob. Possible values include:
            'P4', 'P6',

            'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTierOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetTierResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.setTier_1'
    name: 'setTier(Models.AccessTier, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setTier(tier: Models.AccessTier, callback:
        ServiceCallback<void>)
      parameters:
        - id: tier
          type:
            - Models.AccessTier
          description: >-
            Indicates the tier to be set on the blob. Possible values include:
            'P4', 'P6',

            'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobSetTierResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.startCopyFromURL'
    name: 'startCopyFromURL(string, BlobStartCopyFromURLOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options?:
        BlobStartCopyFromURLOptionalParams)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the name of the source page blob snapshot. This value is a
            URL of up

            to 2 KB in length that specifies a page blob snapshot. The value
            should be URL-encoded as it

            would appear in a request URI. The source blob must either be public
            or must be authenticated

            via a shared access signature.
        - id: options
          type:
            - '@azure/storage-blob.BlobStartCopyFromURLOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobStartCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.startCopyFromURL_2'
    name: >-
      startCopyFromURL(string, BlobStartCopyFromURLOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options:
        BlobStartCopyFromURLOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the name of the source page blob snapshot. This value is a
            URL of up

            to 2 KB in length that specifies a page blob snapshot. The value
            should be URL-encoded as it

            would appear in a request URI. The source blob must either be public
            or must be authenticated

            via a shared access signature.
        - id: options
          type:
            - '@azure/storage-blob.BlobStartCopyFromURLOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobStartCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.startCopyFromURL_1'
    name: 'startCopyFromURL(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the name of the source page blob snapshot. This value is a
            URL of up

            to 2 KB in length that specifies a page blob snapshot. The value
            should be URL-encoded as it

            would appear in a request URI. The source blob must either be public
            or must be authenticated

            via a shared access signature.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobStartCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.undelete'
    name: undelete(BlobUndeleteOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: 'function undelete(options?: BlobUndeleteOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobUndeleteOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobUndeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.undelete_2'
    name: 'undelete(BlobUndeleteOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function undelete(options: BlobUndeleteOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobUndeleteOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobUndeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.Blob.undelete_1'
    name: undelete(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function undelete(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BlobUndeleteResponse>
    package: '@azure/storage-blob'
references:
  - uid: '@azure/storage-blob.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/storage-blob.StorageClientContext'
  - uid: '@azure/storage-blob.BlobAbortCopyFromURLOptionalParams'
    name: BlobAbortCopyFromURLOptionalParams
    spec.typeScript:
      - name: BlobAbortCopyFromURLOptionalParams
        fullName: BlobAbortCopyFromURLOptionalParams
        uid: '@azure/storage-blob.BlobAbortCopyFromURLOptionalParams'
  - uid: '@azure/storage-blob.BlobAcquireLeaseOptionalParams'
    name: BlobAcquireLeaseOptionalParams
    spec.typeScript:
      - name: BlobAcquireLeaseOptionalParams
        fullName: BlobAcquireLeaseOptionalParams
        uid: '@azure/storage-blob.BlobAcquireLeaseOptionalParams'
  - uid: '@azure/storage-blob.BlobBreakLeaseOptionalParams'
    name: BlobBreakLeaseOptionalParams
    spec.typeScript:
      - name: BlobBreakLeaseOptionalParams
        fullName: BlobBreakLeaseOptionalParams
        uid: '@azure/storage-blob.BlobBreakLeaseOptionalParams'
  - uid: '@azure/storage-blob.BlobChangeLeaseOptionalParams'
    name: BlobChangeLeaseOptionalParams
    spec.typeScript:
      - name: BlobChangeLeaseOptionalParams
        fullName: BlobChangeLeaseOptionalParams
        uid: '@azure/storage-blob.BlobChangeLeaseOptionalParams'
  - uid: '@azure/storage-blob.BlobCreateSnapshotOptionalParams'
    name: BlobCreateSnapshotOptionalParams
    spec.typeScript:
      - name: BlobCreateSnapshotOptionalParams
        fullName: BlobCreateSnapshotOptionalParams
        uid: '@azure/storage-blob.BlobCreateSnapshotOptionalParams'
  - uid: '@azure/storage-blob.BlobDeleteMethodOptionalParams'
    name: BlobDeleteMethodOptionalParams
    spec.typeScript:
      - name: BlobDeleteMethodOptionalParams
        fullName: BlobDeleteMethodOptionalParams
        uid: '@azure/storage-blob.BlobDeleteMethodOptionalParams'
  - uid: '@azure/storage-blob.BlobDownloadOptionalParams'
    name: BlobDownloadOptionalParams
    spec.typeScript:
      - name: BlobDownloadOptionalParams
        fullName: BlobDownloadOptionalParams
        uid: '@azure/storage-blob.BlobDownloadOptionalParams'
  - uid: '@azure/storage-blob.BlobGetPropertiesOptionalParams'
    name: BlobGetPropertiesOptionalParams
    spec.typeScript:
      - name: BlobGetPropertiesOptionalParams
        fullName: BlobGetPropertiesOptionalParams
        uid: '@azure/storage-blob.BlobGetPropertiesOptionalParams'
  - uid: '@azure/storage-blob.BlobReleaseLeaseOptionalParams'
    name: BlobReleaseLeaseOptionalParams
    spec.typeScript:
      - name: BlobReleaseLeaseOptionalParams
        fullName: BlobReleaseLeaseOptionalParams
        uid: '@azure/storage-blob.BlobReleaseLeaseOptionalParams'
  - uid: '@azure/storage-blob.BlobRenewLeaseOptionalParams'
    name: BlobRenewLeaseOptionalParams
    spec.typeScript:
      - name: BlobRenewLeaseOptionalParams
        fullName: BlobRenewLeaseOptionalParams
        uid: '@azure/storage-blob.BlobRenewLeaseOptionalParams'
  - uid: '@azure/storage-blob.BlobSetHTTPHeadersOptionalParams'
    name: BlobSetHTTPHeadersOptionalParams
    spec.typeScript:
      - name: BlobSetHTTPHeadersOptionalParams
        fullName: BlobSetHTTPHeadersOptionalParams
        uid: '@azure/storage-blob.BlobSetHTTPHeadersOptionalParams'
  - uid: '@azure/storage-blob.BlobSetMetadataOptionalParams'
    name: BlobSetMetadataOptionalParams
    spec.typeScript:
      - name: BlobSetMetadataOptionalParams
        fullName: BlobSetMetadataOptionalParams
        uid: '@azure/storage-blob.BlobSetMetadataOptionalParams'
  - uid: '@azure/storage-blob.BlobSetTierOptionalParams'
    name: BlobSetTierOptionalParams
    spec.typeScript:
      - name: BlobSetTierOptionalParams
        fullName: BlobSetTierOptionalParams
        uid: '@azure/storage-blob.BlobSetTierOptionalParams'
  - uid: '@azure/storage-blob.BlobStartCopyFromURLOptionalParams'
    name: BlobStartCopyFromURLOptionalParams
    spec.typeScript:
      - name: BlobStartCopyFromURLOptionalParams
        fullName: BlobStartCopyFromURLOptionalParams
        uid: '@azure/storage-blob.BlobStartCopyFromURLOptionalParams'
  - uid: '@azure/storage-blob.BlobUndeleteOptionalParams'
    name: BlobUndeleteOptionalParams
    spec.typeScript:
      - name: BlobUndeleteOptionalParams
        fullName: BlobUndeleteOptionalParams
        uid: '@azure/storage-blob.BlobUndeleteOptionalParams'
