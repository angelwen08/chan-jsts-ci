### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-blob.BlockBlobURL'
    name: BlockBlobURL
    fullName: BlockBlobURL
    children:
      - '@azure/storage-blob.BlockBlobURL.abortCopyFromURL'
      - '@azure/storage-blob.BlockBlobURL.acquireLease'
      - '@azure/storage-blob.BlockBlobURL.constructor'
      - '@azure/storage-blob.BlockBlobURL.breakLease'
      - '@azure/storage-blob.BlockBlobURL.changeLease'
      - '@azure/storage-blob.BlockBlobURL.commitBlockList'
      - '@azure/storage-blob.BlockBlobURL.createSnapshot'
      - '@azure/storage-blob.BlockBlobURL.delete'
      - '@azure/storage-blob.BlockBlobURL.download'
      - '@azure/storage-blob.BlockBlobURL.fromBlobURL'
      - '@azure/storage-blob.BlockBlobURL.fromContainerURL'
      - '@azure/storage-blob.BlockBlobURL.getBlockList'
      - '@azure/storage-blob.BlockBlobURL.getProperties'
      - '@azure/storage-blob.BlockBlobURL.newPipeline'
      - '@azure/storage-blob.BlockBlobURL.releaseLease'
      - '@azure/storage-blob.BlockBlobURL.renewLease'
      - '@azure/storage-blob.BlockBlobURL.setHTTPHeaders'
      - '@azure/storage-blob.BlockBlobURL.setMetadata'
      - '@azure/storage-blob.BlockBlobURL.setTier'
      - '@azure/storage-blob.BlockBlobURL.stageBlock'
      - '@azure/storage-blob.BlockBlobURL.stageBlockFromURL'
      - '@azure/storage-blob.BlockBlobURL.startCopyFromURL'
      - '@azure/storage-blob.BlockBlobURL.undelete'
      - '@azure/storage-blob.BlockBlobURL.upload'
      - '@azure/storage-blob.BlockBlobURL.url'
      - '@azure/storage-blob.BlockBlobURL.withPipeline'
      - '@azure/storage-blob.BlockBlobURL.withSnapshot'
    langs:
      - typeScript
    type: class
    summary: BlockBlobURL defines a set of operations applicable to block blobs.
    extends:
      name: '@azure/storage-blob.BlobURL'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.abortCopyFromURL'
    name: 'abortCopyFromURL(Aborter, string, IBlobAbortCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending Copy Blob operation, and leaves a destination blob with
      zero

      length and full metadata. Version 2012-02-12 and newer.
    syntax:
      content: >-
        function abortCopyFromURL(aborter: Aborter, copyId: string, options?:
        IBlobAbortCopyFromURLOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copyId
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobAbortCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobAbortCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.acquireLease'
    name: 'acquireLease(Aborter, string, number, IBlobAcquireLeaseOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Establishes and manages a lock on a blob for write and delete operations.
      The lock duration can be 15 to 60 seconds, or can be infinite.
      In versions prior to 2012-02-12, the lock duration is 60 seconds.
    syntax:
      content: >-
        function acquireLease(aborter: Aborter, proposedLeaseId: string,
        duration: number, options?: IBlobAcquireLeaseOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: proposedLeaseId
          type:
            - string
          description: Can be specified in any valid GUID string format
        - id: duration
          type:
            - number
          description: 'The lock duration can be 15 to 60 seconds, or can be infinite'
        - id: options
          type:
            - '@azure/storage-blob.IBlobAcquireLeaseOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobAcquireLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.constructor'
    name: 'BlockBlobURL(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of BlockBlobURL.

      This method accepts an encoded URL or non-encoded URL pointing to a block
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    syntax:
      content: 'new BlockBlobURL(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage block blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type:
            - '@azure/storage-blob.Pipeline'
          description: |-
            Call StorageURL.newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.breakLease'
    name: 'breakLease(Aborter, number, IBlobBreakLeaseOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      To end the lease but ensure that another client cannot acquire a new lease
      until the current lease period has expired.
    syntax:
      content: >-
        function breakLease(aborter: Aborter, breakPeriod?: number, options?:
        IBlobBreakLeaseOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: breakPeriod
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.IBlobBreakLeaseOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobBreakLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.changeLease'
    name: 'changeLease(Aborter, string, string, IBlobChangeLeaseOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: To change the ID of an existing lease.
    syntax:
      content: >-
        function changeLease(aborter: Aborter, leaseId: string, proposedLeaseId:
        string, options?: IBlobChangeLeaseOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobChangeLeaseOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobChangeLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.commitBlockList'
    name: 'commitBlockList(Aborter, string[], IBlockBlobCommitBlockListOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Writes a blob by specifying the list of block IDs that make up the blob.

      In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior stageBlock operation. You can call
      commitBlockList to update a blob

      by uploading only those blocks that have changed, then committing the new
      and existing

      blocks together. Any blocks not specified in the block list and
      permanently deleted.
    syntax:
      content: >-
        function commitBlockList(aborter: Aborter, blocks: string[], options?:
        IBlockBlobCommitBlockListOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: blocks
          type:
            - 'string[]'
          description: Array of 64-byte value that is base64-encoded
        - id: options
          type:
            - '@azure/storage-blob.IBlockBlobCommitBlockListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobCommitBlockListResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.createSnapshot'
    name: 'createSnapshot(Aborter, IBlobCreateSnapshotOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a read-only snapshot of a blob.
    syntax:
      content: >-
        function createSnapshot(aborter: Aborter, options?:
        IBlobCreateSnapshotOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type:
            - '@azure/storage-blob.IBlobCreateSnapshotOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobCreateSnapshotResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.delete'
    name: 'delete(Aborter, IBlobDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    syntax:
      content: 'function delete(aborter: Aborter, options?: IBlobDeleteOptions)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type:
            - '@azure/storage-blob.IBlobDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobDeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.download'
    name: 'download(Aborter, number, number, IBlobDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Reads or downloads a blob from the system, including its metadata and
      properties.

      You can also call Get Blob to read a snapshot.

      * In Node.js, data returns in a Readable stream readableStreamBody

      * In browsers, data returns in a promise blobBody
    syntax:
      content: >-
        function download(aborter: Aborter, offset: number, count?: number,
        options?: IBlobDownloadOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type:
            - number
          description: 'From which position of the blob to download, >= 0'
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.IBlobDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobDownloadResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.fromBlobURL'
    name: fromBlobURL(BlobURL)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a BlockBlobURL object from BlobURL instance.
    syntax:
      content: 'static function fromBlobURL(blobURL: BlobURL)'
      parameters:
        - id: blobURL
          type:
            - '@azure/storage-blob.BlobURL'
          description: ''
      return:
        type:
          - '@azure/storage-blob.BlockBlobURL'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.fromContainerURL'
    name: 'fromContainerURL(ContainerURL, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a BlockBlobURL object from ContainerURL instance.
    syntax:
      content: >-
        static function fromContainerURL(containerURL: ContainerURL, blobName:
        string)
      parameters:
        - id: containerURL
          type:
            - '@azure/storage-blob.ContainerURL'
          description: A ContainerURL object
        - id: blobName
          type:
            - string
          description: A block blob name
      return:
        type:
          - '@azure/storage-blob.BlockBlobURL'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.getBlockList'
    name: 'getBlockList(Aborter, Models.BlockListType, IBlockBlobGetBlockListOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the list of blocks that have been uploaded as part of a block blob
      using the specified block list filter.
    syntax:
      content: >-
        function getBlockList(aborter: Aborter, listType: Models.BlockListType,
        options?: IBlockBlobGetBlockListOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: listType
          type:
            - Models.BlockListType
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlockBlobGetBlockListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobGetBlockListResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.getProperties'
    name: 'getProperties(Aborter, IBlobGetPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the blob. It does not return the content of the blob.
    syntax:
      content: >-
        function getProperties(aborter: Aborter, options?:
        IBlobGetPropertiesOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type:
            - '@azure/storage-blob.IBlobGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobGetPropertiesResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.newPipeline'
    name: 'newPipeline(Credential, INewPipelineOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions)
      parameters:
        - id: credential
          type:
            - '@azure/storage-blob.Credential'
          description: 'Such as AnonymousCredential, SharedKeyCredential or TokenCredential.'
        - id: pipelineOptions
          type:
            - '@azure/storage-blob.INewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-blob.Pipeline'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.releaseLease'
    name: 'releaseLease(Aborter, string, IBlobReleaseLeaseOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      To free the lease if it is no longer needed so that another client may
      immediately

      acquire a lease against the blob.
    syntax:
      content: >-
        function releaseLease(aborter: Aborter, leaseId: string, options?:
        IBlobReleaseLeaseOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobReleaseLeaseOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobReleaseLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.renewLease'
    name: 'renewLease(Aborter, string, IBlobRenewLeaseOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: To renew an existing lease.
    syntax:
      content: >-
        function renewLease(aborter: Aborter, leaseId: string, options?:
        IBlobRenewLeaseOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobRenewLeaseOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobRenewLeaseResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.setHTTPHeaders'
    name: 'setHTTPHeaders(Aborter, BlobHTTPHeaders, IBlobSetHTTPHeadersOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets system properties on the blob.

      If no value provided, or no value provided for the specificed blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHTTPHeaders(aborter: Aborter, blobHTTPHeaders?:
        BlobHTTPHeaders, options?: IBlobSetHTTPHeadersOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: blobHTTPHeaders
          type:
            - '@azure/storage-blob.BlobHTTPHeaders'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.IBlobSetHTTPHeadersOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetHTTPHeadersResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.setMetadata'
    name: 'setMetadata(Aborter, IMetadata, IBlobSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets user-defined metadata for the specified blob as one or more
      name-value pairs.

      If no option provided, or no metadata defined in the parameter, the blob

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(aborter: Aborter, metadata?: IMetadata, options?:
        IBlobSetMetadataOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: metadata
          type:
            - '@azure/storage-blob.IMetadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.IBlobSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetMetadataResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.setTier'
    name: 'setTier(Aborter, Models.AccessTier, IBlobSetTierOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the tier on a blob. The operation is allowed on a page blob in a
      premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.
    syntax:
      content: >-
        function setTier(aborter: Aborter, tier: Models.AccessTier, options?:
        IBlobSetTierOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: tier
          type:
            - Models.AccessTier
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobSetTierOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobSetTierResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.stageBlock'
    name: >-
      stageBlock(Aborter, string, HttpRequestBody, number,
      IBlockBlobStageBlockOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Uploads the specified block to the block blob's "staging area" to be later
      committed by a call to commitBlockList.
    syntax:
      content: >-
        function stageBlock(aborter: Aborter, blockId: string, body:
        HttpRequestBody, contentLength: number, options?:
        IBlockBlobStageBlockOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: blockId
          type:
            - string
          description: A 64-byte value that is base64-encoded
        - id: body
          type:
            - HttpRequestBody
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlockBlobStageBlockOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobStageBlockResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.stageBlockFromURL'
    name: >-
      stageBlockFromURL(Aborter, string, string, number, number,
      IBlockBlobStageBlockFromURLOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block From URL operation creates a new block to be committed as
      part

      of a blob where the contents are read from a URL.

      This API is available starting in version 2018-03-28.
    syntax:
      content: >-
        function stageBlockFromURL(aborter: Aborter, blockId: string, sourceURL:
        string, offset: number, count?: number, options?:
        IBlockBlobStageBlockFromURLOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: blockId
          type:
            - string
          description: A 64-byte value that is base64-encoded
        - id: sourceURL
          type:
            - string
          description: |-
            Specifies the URL of the blob. The value
                                      may be a URL of up to 2 KB in length that specifies a blob.
                                      The value should be URL-encoded as it would appear
                                      in a request URI. The source blob must either be public
                                      or must be authenticated via a shared access signature.
                                      If the source blob is public, no authentication is required
                                      to perform the operation. Here are some examples of source object URLs:
                                      - https://myaccount.blob.core.windows.net/mycontainer/myblob
                                      - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
        - id: offset
          type:
            - number
          description: 'From which position of the blob to download, >= 0'
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.IBlockBlobStageBlockFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobStageBlockFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.startCopyFromURL'
    name: 'startCopyFromURL(Aborter, string, IBlobStartCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Copies a blob to a destination within the storage account.

      In version 2012-02-12 and later, the source for a Copy Blob operation can
      be

      a committed blob in any Azure storage account.

      Beginning with version 2015-02-21, the source for a Copy Blob operation
      can be

      an Azure file in any Azure storage account.

      Only storage accounts created on or after June 7th, 2012 allow the Copy
      Blob

      operation to copy from another storage account.
    syntax:
      content: >-
        function startCopyFromURL(aborter: Aborter, copySource: string,
        options?: IBlobStartCopyFromURLOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copySource
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlobStartCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlobStartCopyFromURLResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.undelete'
    name: undelete(Aborter)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores the contents and metadata of soft deleted blob and any associated

      soft deleted snapshots. Undelete Blob is supported only on version
      2017-07-29

      or later.
    syntax:
      content: 'function undelete(aborter: Aborter)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        type:
          - Promise<Models.BlobUndeleteResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.upload'
    name: 'upload(Aborter, HttpRequestBody, number, IBlockBlobUploadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a new block blob, or updates the content of an existing block
      blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported; the content of the existing blob is

      overwritten with the new content. To perform a partial update of a block
      blob's,

      use stageBlock and commitBlockList.

      This is a non-parallel uploading method, please use
      uploadFileToBlockBlob(),

      uploadStreamToBlockBlob() or uploadBrowserDataToBlockBlob() for better
      performance

      with concurrency uploading.
    syntax:
      content: >-
        function upload(aborter: Aborter, body: HttpRequestBody, contentLength:
        number, options?: IBlockBlobUploadOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-blob.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: body
          type:
            - HttpRequestBody
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.IBlockBlobUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobUploadResponse>
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.withPipeline'
    name: withPipeline(Pipeline)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new BlockBlobURL object identical to the source but with the
      specified request policy pipeline.
    syntax:
      content: 'function withPipeline(pipeline: Pipeline)'
      parameters:
        - id: pipeline
          type:
            - '@azure/storage-blob.Pipeline'
          description: ''
      return:
        type:
          - '@azure/storage-blob.BlockBlobURL'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobURL.withSnapshot'
    name: withSnapshot(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new BlockBlobURL object identical to the source but with the
      specified snapshot timestamp.
      Provide "" will remove the snapshot and return a URL to the base blob.
    syntax:
      content: 'function withSnapshot(snapshot: string)'
      parameters:
        - id: snapshot
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/storage-blob.BlockBlobURL'
    package: '@azure/storage-blob'
references:
  - uid: '@azure/storage-blob.BlobURL'
    name: BlobURL
    spec.typeScript:
      - name: BlobURL
        fullName: BlobURL
        uid: '@azure/storage-blob.BlobURL'
  - uid: '@azure/storage-blob.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-blob.Pipeline'
  - uid: '@azure/storage-blob.Aborter'
    name: Aborter
    spec.typeScript:
      - name: Aborter
        fullName: Aborter
        uid: '@azure/storage-blob.Aborter'
  - uid: '@azure/storage-blob.IBlobAbortCopyFromURLOptions'
    name: IBlobAbortCopyFromURLOptions
    spec.typeScript:
      - name: IBlobAbortCopyFromURLOptions
        fullName: IBlobAbortCopyFromURLOptions
        uid: '@azure/storage-blob.IBlobAbortCopyFromURLOptions'
  - uid: '@azure/storage-blob.IBlobAcquireLeaseOptions'
    name: IBlobAcquireLeaseOptions
    spec.typeScript:
      - name: IBlobAcquireLeaseOptions
        fullName: IBlobAcquireLeaseOptions
        uid: '@azure/storage-blob.IBlobAcquireLeaseOptions'
  - uid: '@azure/storage-blob.IBlobBreakLeaseOptions'
    name: IBlobBreakLeaseOptions
    spec.typeScript:
      - name: IBlobBreakLeaseOptions
        fullName: IBlobBreakLeaseOptions
        uid: '@azure/storage-blob.IBlobBreakLeaseOptions'
  - uid: '@azure/storage-blob.IBlobChangeLeaseOptions'
    name: IBlobChangeLeaseOptions
    spec.typeScript:
      - name: IBlobChangeLeaseOptions
        fullName: IBlobChangeLeaseOptions
        uid: '@azure/storage-blob.IBlobChangeLeaseOptions'
  - uid: '@azure/storage-blob.IBlockBlobCommitBlockListOptions'
    name: IBlockBlobCommitBlockListOptions
    spec.typeScript:
      - name: IBlockBlobCommitBlockListOptions
        fullName: IBlockBlobCommitBlockListOptions
        uid: '@azure/storage-blob.IBlockBlobCommitBlockListOptions'
  - uid: '@azure/storage-blob.IBlobCreateSnapshotOptions'
    name: IBlobCreateSnapshotOptions
    spec.typeScript:
      - name: IBlobCreateSnapshotOptions
        fullName: IBlobCreateSnapshotOptions
        uid: '@azure/storage-blob.IBlobCreateSnapshotOptions'
  - uid: '@azure/storage-blob.IBlobDeleteOptions'
    name: IBlobDeleteOptions
    spec.typeScript:
      - name: IBlobDeleteOptions
        fullName: IBlobDeleteOptions
        uid: '@azure/storage-blob.IBlobDeleteOptions'
  - uid: '@azure/storage-blob.IBlobDownloadOptions'
    name: IBlobDownloadOptions
    spec.typeScript:
      - name: IBlobDownloadOptions
        fullName: IBlobDownloadOptions
        uid: '@azure/storage-blob.IBlobDownloadOptions'
  - uid: '@azure/storage-blob.IBlockBlobGetBlockListOptions'
    name: IBlockBlobGetBlockListOptions
    spec.typeScript:
      - name: IBlockBlobGetBlockListOptions
        fullName: IBlockBlobGetBlockListOptions
        uid: '@azure/storage-blob.IBlockBlobGetBlockListOptions'
  - uid: '@azure/storage-blob.IBlobGetPropertiesOptions'
    name: IBlobGetPropertiesOptions
    spec.typeScript:
      - name: IBlobGetPropertiesOptions
        fullName: IBlobGetPropertiesOptions
        uid: '@azure/storage-blob.IBlobGetPropertiesOptions'
  - uid: '@azure/storage-blob.IBlobReleaseLeaseOptions'
    name: IBlobReleaseLeaseOptions
    spec.typeScript:
      - name: IBlobReleaseLeaseOptions
        fullName: IBlobReleaseLeaseOptions
        uid: '@azure/storage-blob.IBlobReleaseLeaseOptions'
  - uid: '@azure/storage-blob.IBlobRenewLeaseOptions'
    name: IBlobRenewLeaseOptions
    spec.typeScript:
      - name: IBlobRenewLeaseOptions
        fullName: IBlobRenewLeaseOptions
        uid: '@azure/storage-blob.IBlobRenewLeaseOptions'
  - uid: '@azure/storage-blob.BlobHTTPHeaders'
    name: BlobHTTPHeaders
    spec.typeScript:
      - name: BlobHTTPHeaders
        fullName: BlobHTTPHeaders
        uid: '@azure/storage-blob.BlobHTTPHeaders'
  - uid: '@azure/storage-blob.IBlobSetHTTPHeadersOptions'
    name: IBlobSetHTTPHeadersOptions
    spec.typeScript:
      - name: IBlobSetHTTPHeadersOptions
        fullName: IBlobSetHTTPHeadersOptions
        uid: '@azure/storage-blob.IBlobSetHTTPHeadersOptions'
  - uid: '@azure/storage-blob.IMetadata'
    name: IMetadata
    spec.typeScript:
      - name: IMetadata
        fullName: IMetadata
        uid: '@azure/storage-blob.IMetadata'
  - uid: '@azure/storage-blob.IBlobSetMetadataOptions'
    name: IBlobSetMetadataOptions
    spec.typeScript:
      - name: IBlobSetMetadataOptions
        fullName: IBlobSetMetadataOptions
        uid: '@azure/storage-blob.IBlobSetMetadataOptions'
  - uid: '@azure/storage-blob.IBlobSetTierOptions'
    name: IBlobSetTierOptions
    spec.typeScript:
      - name: IBlobSetTierOptions
        fullName: IBlobSetTierOptions
        uid: '@azure/storage-blob.IBlobSetTierOptions'
  - uid: '@azure/storage-blob.IBlockBlobStageBlockOptions'
    name: IBlockBlobStageBlockOptions
    spec.typeScript:
      - name: IBlockBlobStageBlockOptions
        fullName: IBlockBlobStageBlockOptions
        uid: '@azure/storage-blob.IBlockBlobStageBlockOptions'
  - uid: '@azure/storage-blob.IBlockBlobStageBlockFromURLOptions'
    name: IBlockBlobStageBlockFromURLOptions
    spec.typeScript:
      - name: IBlockBlobStageBlockFromURLOptions
        fullName: IBlockBlobStageBlockFromURLOptions
        uid: '@azure/storage-blob.IBlockBlobStageBlockFromURLOptions'
  - uid: '@azure/storage-blob.IBlobStartCopyFromURLOptions'
    name: IBlobStartCopyFromURLOptions
    spec.typeScript:
      - name: IBlobStartCopyFromURLOptions
        fullName: IBlobStartCopyFromURLOptions
        uid: '@azure/storage-blob.IBlobStartCopyFromURLOptions'
  - uid: '@azure/storage-blob.IBlockBlobUploadOptions'
    name: IBlockBlobUploadOptions
    spec.typeScript:
      - name: IBlockBlobUploadOptions
        fullName: IBlockBlobUploadOptions
        uid: '@azure/storage-blob.IBlockBlobUploadOptions'
  - uid: '@azure/storage-blob.BlockBlobURL'
    name: BlockBlobURL
    spec.typeScript:
      - name: BlockBlobURL
        fullName: BlockBlobURL
        uid: '@azure/storage-blob.BlockBlobURL'
  - uid: '@azure/storage-blob.ContainerURL'
    name: ContainerURL
    spec.typeScript:
      - name: ContainerURL
        fullName: ContainerURL
        uid: '@azure/storage-blob.ContainerURL'
  - uid: '@azure/storage-blob.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-blob.Credential'
  - uid: '@azure/storage-blob.INewPipelineOptions'
    name: INewPipelineOptions
    spec.typeScript:
      - name: INewPipelineOptions
        fullName: INewPipelineOptions
        uid: '@azure/storage-blob.INewPipelineOptions'
