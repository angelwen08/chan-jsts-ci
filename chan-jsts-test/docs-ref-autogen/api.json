{
	"id": 0,
	"name": "@azure/event-processor-host",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 103,
			"name": "\"azureBlob.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/azureBlob.d.ts",
			"sources": [
				{
					"fileName": "azureBlob.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 198,
			"name": "\"azureBlobLease.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/azureBlobLease.d.ts",
			"children": [
				{
					"id": 214,
					"name": "AzureBlobLease",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the lease used with an Azure Blob for storing the checkpoint information."
					},
					"children": [
						{
							"id": 219,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 220,
									"name": "new AzureBlobLease",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 221,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AzureBlobLeaseInfo",
												"id": 206
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AzureBlobLease",
										"id": 214
									},
									"overwrites": {
										"type": "reference",
										"name": "CompleteLease.__constructor",
										"id": 185
									}
								}
							],
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 52,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "CompleteLease.__constructor",
								"id": 185
							}
						},
						{
							"id": 218,
							"name": "blob",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{AzureBlob} blob Reference to the azure blob.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 52,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "AzureBlob"
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.blob",
								"id": 207
							}
						},
						{
							"id": 230,
							"name": "epoch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} epoch The epoch(time) of the lease, which is a value you can use to\ndetermine the most recent owner of a partition between competing nodes.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 22,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CompleteLease.epoch",
								"id": 184
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.epoch",
								"id": 211
							}
						},
						{
							"id": 235,
							"name": "isOwned",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{boolean} isOwned Indicates wether the lease is owned. `true` if it is owned by\nsomeone; `false` otherwise.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.isOwned",
								"id": 169
							}
						},
						{
							"id": 215,
							"name": "offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} offset The offset of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 39,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.offset",
								"id": 210
							}
						},
						{
							"id": 234,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 26,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.owner",
								"id": 168
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.owner",
								"id": 213
							}
						},
						{
							"id": 233,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 22,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.partitionId",
								"id": 167
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.partitionId",
								"id": 212
							}
						},
						{
							"id": 216,
							"name": "sequenceNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} sequenceNumber The sequence number of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 43,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.sequenceNumber",
								"id": 209
							}
						},
						{
							"id": 217,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} token The lease token that manages concurrency between hosts. You can use\nthis token to guarantee single access to any resource needed by the EPH.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 48,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "AzureBlobLeaseInfo.token",
								"id": 208
							}
						},
						{
							"id": 222,
							"name": "getInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 223,
									"name": "getInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the lease information.",
										"returns": "LeaseInfo.\n"
									},
									"type": {
										"type": "reference",
										"name": "LeaseInfo",
										"id": 199
									},
									"overwrites": {
										"type": "reference",
										"name": "CompleteLease.getInfo",
										"id": 190
									}
								}
							],
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 58,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "CompleteLease.getInfo",
								"id": 190
							}
						},
						{
							"id": 231,
							"name": "incrementEpoch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 232,
									"name": "incrementEpoch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Increments the value of epoch by 1.",
										"returns": "The incremented value of the epoch.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "CompleteLease.incrementEpoch",
										"id": 188
									}
								}
							],
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 33,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "CompleteLease.incrementEpoch",
								"id": 188
							}
						},
						{
							"id": 236,
							"name": "isOwnedBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 237,
									"name": "isOwnedBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compares possibleOwner against this.owner",
										"returns": "boolean - true if possibleOwner is the same as this.owner, false otherwise.\n"
									},
									"parameters": [
										{
											"id": 238,
											"name": "possibleOwner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The owner name to check."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseLease.isOwnedBy",
										"id": 173
									}
								}
							],
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 42,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.isOwnedBy",
								"id": 173
							}
						},
						{
							"id": 224,
							"name": "serialize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 225,
									"name": "serialize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serializes the lease information.",
										"returns": "string The serialized lease info.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 63,
									"character": 13
								}
							]
						},
						{
							"id": 226,
							"name": "createFromPartitionId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 227,
									"name": "createFromPartitionId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Lease for the given partitionId.",
										"returns": "Lease.\n"
									},
									"parameters": [
										{
											"id": 228,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partitionId for which the lease needs to be created."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 229,
											"name": "blob",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The azure blob reference"
											},
											"type": {
												"type": "reference",
												"name": "AzureBlob"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AzureBlobLease",
										"id": 214
									}
								}
							],
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 70,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								219
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								218,
								230,
								235,
								215,
								234,
								233,
								216,
								217
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								222,
								231,
								236,
								224,
								226
							]
						}
					],
					"sources": [
						{
							"fileName": "azureBlobLease.d.ts",
							"line": 35,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "CompleteLease",
							"id": 183
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "BaseLeaseInfo",
							"id": 163
						},
						{
							"type": "reference",
							"name": "AzureBlobLeaseInfo",
							"id": 206
						}
					]
				},
				{
					"id": 206,
					"name": "AzureBlobLeaseInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the properties of a lease representing an Azure Blob.",
						"tags": [
							{
								"tag": "interface",
								"text": "AzureBlobLeaseInfo\n"
							}
						]
					},
					"children": [
						{
							"id": 207,
							"name": "blob",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{AzureBlob} blob Reference to the azure blob.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 30,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "AzureBlob"
							}
						},
						{
							"id": 211,
							"name": "epoch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} epoch The epoch(time) of the lease, which is a value you can use to\ndetermine the most recent owner of a partition between competing nodes.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CompleteLeaseInfo.epoch",
								"id": 180
							}
						},
						{
							"id": 210,
							"name": "offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} offset The offset of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "LeaseInfo.offset",
								"id": 202
							}
						},
						{
							"id": 213,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.owner",
								"id": 165
							}
						},
						{
							"id": 212,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.partitionId",
								"id": 164
							}
						},
						{
							"id": 209,
							"name": "sequenceNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} sequenceNumber The sequence number of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 16,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "LeaseInfo.sequenceNumber",
								"id": 201
							}
						},
						{
							"id": 208,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} token The lease token that manages concurrency between hosts. You can use\nthis token to guarantee single access to any resource needed by the EPH.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "LeaseInfo.token",
								"id": 200
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								207,
								211,
								210,
								213,
								212,
								209,
								208
							]
						}
					],
					"sources": [
						{
							"fileName": "azureBlobLease.d.ts",
							"line": 26,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "LeaseInfo",
							"id": 199
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "AzureBlobLease",
							"id": 214
						}
					]
				},
				{
					"id": 199,
					"name": "LeaseInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the properties of a lease.",
						"tags": [
							{
								"tag": "interface",
								"text": "LeaseInfo\n"
							}
						]
					},
					"children": [
						{
							"id": 203,
							"name": "epoch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} epoch The epoch(time) of the lease, which is a value you can use to\ndetermine the most recent owner of a partition between competing nodes.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CompleteLeaseInfo.epoch",
								"id": 180
							}
						},
						{
							"id": 202,
							"name": "offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} offset The offset of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 205,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.owner",
								"id": 165
							}
						},
						{
							"id": 204,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.partitionId",
								"id": 164
							}
						},
						{
							"id": 201,
							"name": "sequenceNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} sequenceNumber The sequence number of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 16,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 200,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} token The lease token that manages concurrency between hosts. You can use\nthis token to guarantee single access to any resource needed by the EPH.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "azureBlobLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								203,
								202,
								205,
								204,
								201,
								200
							]
						}
					],
					"sources": [
						{
							"fileName": "azureBlobLease.d.ts",
							"line": 7,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "CompleteLeaseInfo",
							"id": 179
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AzureBlobLeaseInfo",
							"id": 206
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						214
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						206,
						199
					]
				}
			],
			"sources": [
				{
					"fileName": "azureBlobLease.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 680,
			"name": "\"azureStorageCheckpointLeaseManager.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/azureStorageCheckpointLeaseManager.d.ts",
			"sources": [
				{
					"fileName": "azureStorageCheckpointLeaseManager.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 162,
			"name": "\"baseLease.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/baseLease.d.ts",
			"children": [
				{
					"id": 166,
					"name": "BaseLease",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the base lease."
					},
					"children": [
						{
							"id": 170,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "constructor",
										"text": ""
									}
								]
							},
							"signatures": [
								{
									"id": 171,
									"name": "new BaseLease",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "constructor",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 172,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The information required to create a base lease.\n"
											},
											"type": {
												"type": "reference",
												"name": "BaseLeaseInfo",
												"id": 163
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BaseLease",
										"id": 166
									}
								}
							],
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 31,
									"character": 21
								}
							]
						},
						{
							"id": 169,
							"name": "isOwned",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{boolean} isOwned Indicates wether the lease is owned. `true` if it is owned by\nsomeone; `false` otherwise.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 168,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 26,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BaseLeaseInfo.owner",
								"id": 165
							}
						},
						{
							"id": 167,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 22,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BaseLeaseInfo.partitionId",
								"id": 164
							}
						},
						{
							"id": 176,
							"name": "getInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 177,
									"name": "getInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the lease information.",
										"returns": "CompleteLeaseInfo.\n"
									},
									"type": {
										"type": "reference",
										"name": "BaseLeaseInfo",
										"id": 163
									}
								}
							],
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 47,
									"character": 11
								}
							]
						},
						{
							"id": 173,
							"name": "isOwnedBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 174,
									"name": "isOwnedBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compares possibleOwner against this.owner",
										"returns": "boolean - true if possibleOwner is the same as this.owner, false otherwise.\n"
									},
									"parameters": [
										{
											"id": 175,
											"name": "possibleOwner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The owner name to check."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 42,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								170
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								169,
								168,
								167
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								176,
								173
							]
						}
					],
					"sources": [
						{
							"fileName": "baseLease.d.ts",
							"line": 17,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "CompleteLease",
							"id": 183
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "BaseLeaseInfo",
							"id": 163
						}
					]
				},
				{
					"id": 163,
					"name": "BaseLeaseInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the basic information required in a lease."
					},
					"children": [
						{
							"id": 165,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 164,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								165,
								164
							]
						}
					],
					"sources": [
						{
							"fileName": "baseLease.d.ts",
							"line": 4,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "CompleteLeaseInfo",
							"id": 179
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "AzureBlobLease",
							"id": 214
						},
						{
							"type": "reference",
							"name": "BaseLease",
							"id": 166
						},
						{
							"type": "reference",
							"name": "CompleteLease",
							"id": 183
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						166
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						163
					]
				}
			],
			"sources": [
				{
					"fileName": "baseLease.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"blobService.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/blobService.d.ts",
			"sources": [
				{
					"fileName": "blobService.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 239,
			"name": "\"checkpointInfo.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/checkpointInfo.d.ts",
			"children": [
				{
					"id": 240,
					"name": "CheckpointInfo",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the checkoint information.",
						"tags": [
							{
								"tag": "namespace",
								"text": "CheckpointInfo\n"
							}
						]
					},
					"children": [
						{
							"id": 242,
							"name": "offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} offset The offset of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 15,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 241,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The EventHub partition id.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 243,
							"name": "sequenceNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} sequenceNumber The sequence number of the event to be checked in.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 19,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 244,
							"name": "create",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 245,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the checkpoint info",
										"returns": "CheckpointInfo\n"
									},
									"parameters": [
										{
											"id": 246,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partition id for the checkpoint"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 247,
											"name": "offset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 248,
											"name": "sequenceNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CheckpointInfo",
										"id": 240
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 33,
									"character": 19
								}
							]
						},
						{
							"id": 252,
							"name": "createFromEventData",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 253,
									"name": "createFromEventData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the checkpoint info.",
										"returns": "CheckpointInfo\n"
									},
									"parameters": [
										{
											"id": 254,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partition id for the checkpoint"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 255,
											"name": "eventData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event data from which the checkpoint info needs to created."
											},
											"type": {
												"type": "reference",
												"name": "EventData"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CheckpointInfo",
										"id": 240
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 46,
									"character": 32
								}
							]
						},
						{
							"id": 249,
							"name": "createFromLease",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 250,
									"name": "createFromLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the checkpoint info",
										"returns": "CheckpointInfo\n"
									},
									"parameters": [
										{
											"id": 251,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The lease info from which the checkpoint info needs to created."
											},
											"type": {
												"type": "reference",
												"name": "LeaseInfo",
												"id": 199
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CheckpointInfo",
										"id": 240
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointInfo.d.ts",
									"line": 39,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								242,
								241,
								243
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								244,
								252,
								249
							]
						}
					],
					"sources": [
						{
							"fileName": "checkpointInfo.d.ts",
							"line": 7,
							"character": 31
						},
						{
							"fileName": "checkpointInfo.d.ts",
							"line": 25,
							"character": 39
						}
					]
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						240
					]
				}
			],
			"sources": [
				{
					"fileName": "checkpointInfo.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 256,
			"name": "\"checkpointManager.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/checkpointManager.d.ts",
			"children": [
				{
					"id": 257,
					"name": "CheckpointManager",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "interface",
								"text": "CheckpointManager\nIf you wish to have EventProcessorHost store checkpoints somewhere other than Azure Storage,\nyou can write your own checkpoint manager using this interface.\n\nThe Azure Storage managers use the same storage for both lease and checkpoints, so both the\ninterfaces are implemented by the same class. You are free to do the same thing if you have\na unified store for both types of data.\n\nThis interface does not specify initialization methods because we have no way of knowing what\ninformation your implementation will require.\n"
							}
						]
					},
					"children": [
						{
							"id": 258,
							"name": "checkpointStoreExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 259,
									"name": "checkpointStoreExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Does the checkpoint store exist?",
										"returns": "Promise<boolean> `true` if it exists, `false` if it does not exist.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 20,
									"character": 25
								}
							]
						},
						{
							"id": 264,
							"name": "createAllCheckpointsIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 265,
									"name": "createAllCheckpointsIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the checkpoint HOLDERs for the given partitions. Does nothing for any checkpoint\nHOLDERs that already exist.",
										"text": "The semantics of this are complicated because it is possible to use the same store for both\nleases and checkpoints (the Azure Storage implementation does so) and it is required to\nhave a lease for every partition but it is not required to have a checkpoint for a partition.\nIt is a valid scenario to never use checkpoints at all, so it is important for the store to\ndistinguish between creating the structure(s) that will hold a checkpoint and actually creating\na checkpoint (storing an offset/sequence number pair in the structure).\n",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"parameters": [
										{
											"id": 266,
											"name": "partitionIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of partitions to create checkpoint HOLDERs for."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 45,
									"character": 35
								}
							]
						},
						{
							"id": 260,
							"name": "createCheckpointStoreIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "createCheckpointStoreIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create the checkpoint store if it doesn't exist. Does nothing if it exists.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 25,
									"character": 36
								}
							]
						},
						{
							"id": 274,
							"name": "deleteCheckpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 275,
									"name": "deleteCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the stored checkpoint for the given partition. If there is no stored checkpoint for the\ngiven partition, that is treated as success. Deleting the checkpoint HOLDER is allowed\nbut not required; your implementation is free to do whichever is more convenient.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"parameters": [
										{
											"id": 276,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partitionId to delete the checkpoint from the store."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 68,
									"character": 20
								}
							]
						},
						{
							"id": 262,
							"name": "deleteCheckpointStore",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 263,
									"name": "deleteCheckpointStore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the checkpoint store.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 30,
									"character": 25
								}
							]
						},
						{
							"id": 267,
							"name": "getCheckpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 268,
									"name": "getCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the checkpoint info associated with the given partition. Could return undefined if no\ncheckpoint has been created for that partition.",
										"returns": "Promise<CheckpointInfo | undefined> Checkpoint\ninfo for the given partition, or undefined if none has been previously stored.\n"
									},
									"parameters": [
										{
											"id": 269,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partitionId to get the checkpoint info for."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CheckpointInfo",
														"id": 240
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 53,
									"character": 17
								}
							]
						},
						{
							"id": 270,
							"name": "updateCheckpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 271,
									"name": "updateCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update the checkpoint in the store with the offset/sequenceNumber in the provided checkpoint.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"parameters": [
										{
											"id": 272,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Partition information against which to perform a checkpoint."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										},
										{
											"id": 273,
											"name": "checkpoint",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "offset/sequeceNumber to update the store with"
											},
											"type": {
												"type": "reference",
												"name": "CheckpointInfo",
												"id": 240
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "checkpointManager.d.ts",
									"line": 60,
									"character": 20
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								258,
								264,
								260,
								274,
								262,
								267,
								270
							]
						}
					],
					"sources": [
						{
							"fileName": "checkpointManager.d.ts",
							"line": 15,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						257
					]
				}
			],
			"sources": [
				{
					"fileName": "checkpointManager.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 178,
			"name": "\"completeLease.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/completeLease.d.ts",
			"children": [
				{
					"id": 183,
					"name": "CompleteLease",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes a Complete Lease.",
						"tags": [
							{
								"tag": "class",
								"text": "CompleteLease.\n"
							}
						]
					},
					"children": [
						{
							"id": 185,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates an instance of the Lease.",
								"tags": [
									{
										"tag": "constructor",
										"text": ""
									}
								]
							},
							"signatures": [
								{
									"id": 186,
									"name": "new CompleteLease",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an instance of the Lease.",
										"tags": [
											{
												"tag": "constructor",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 187,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The Lease info.\n"
											},
											"type": {
												"type": "reference",
												"name": "CompleteLeaseInfo",
												"id": 179
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CompleteLease",
										"id": 183
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseLease.__constructor",
										"id": 170
									}
								}
							],
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 22,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseLease.__constructor",
								"id": 170
							}
						},
						{
							"id": 184,
							"name": "epoch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} epoch The epoch(time) of the lease, which is a value you can use to\ndetermine the most recent owner of a partition between competing nodes.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 22,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 194,
							"name": "isOwned",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{boolean} isOwned Indicates wether the lease is owned. `true` if it is owned by\nsomeone; `false` otherwise.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.isOwned",
								"id": 169
							}
						},
						{
							"id": 193,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 26,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.owner",
								"id": 168
							},
							"implementationOf": {
								"type": "reference",
								"name": "BaseLeaseInfo.owner",
								"id": 165
							}
						},
						{
							"id": 192,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 22,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.partitionId",
								"id": 167
							},
							"implementationOf": {
								"type": "reference",
								"name": "BaseLeaseInfo.partitionId",
								"id": 164
							}
						},
						{
							"id": 190,
							"name": "getInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 191,
									"name": "getInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the lease information.",
										"returns": "CompleteLeaseInfo.\n"
									},
									"type": {
										"type": "reference",
										"name": "CompleteLeaseInfo",
										"id": 179
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseLease.getInfo",
										"id": 176
									}
								}
							],
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 38,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseLease.getInfo",
								"id": 176
							}
						},
						{
							"id": 188,
							"name": "incrementEpoch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 189,
									"name": "incrementEpoch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Increments the value of epoch by 1.",
										"returns": "The incremented value of the epoch.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 33,
									"character": 18
								}
							]
						},
						{
							"id": 195,
							"name": "isOwnedBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 196,
									"name": "isOwnedBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compares possibleOwner against this.owner",
										"returns": "boolean - true if possibleOwner is the same as this.owner, false otherwise.\n"
									},
									"parameters": [
										{
											"id": 197,
											"name": "possibleOwner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The owner name to check."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseLease.isOwnedBy",
										"id": 173
									}
								}
							],
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 42,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLease.isOwnedBy",
								"id": 173
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								185
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								184,
								194,
								193,
								192
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								190,
								188,
								195
							]
						}
					],
					"sources": [
						{
							"fileName": "completeLease.d.ts",
							"line": 17,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseLease",
							"id": 166
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AzureBlobLease",
							"id": 214
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "BaseLeaseInfo",
							"id": 163
						}
					]
				},
				{
					"id": 179,
					"name": "CompleteLeaseInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the properties of a Complete Lease.",
						"tags": [
							{
								"tag": "interface",
								"text": "CompleteLeaseInfo\n"
							}
						]
					},
					"children": [
						{
							"id": 180,
							"name": "epoch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} epoch The epoch(time) of the lease, which is a value you can use to\ndetermine the most recent owner of a partition between competing nodes.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "completeLease.d.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 182,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host owner for the partition.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.owner",
								"id": 165
							}
						},
						{
							"id": 181,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The associated partitionId for which the lease is held.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "baseLease.d.ts",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseLeaseInfo.partitionId",
								"id": 164
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								180,
								182,
								181
							]
						}
					],
					"sources": [
						{
							"fileName": "completeLease.d.ts",
							"line": 6,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseLeaseInfo",
							"id": 163
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "LeaseInfo",
							"id": 199
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						183
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						179
					]
				}
			],
			"sources": [
				{
					"fileName": "completeLease.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 750,
			"name": "\"eventProcessorHost.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/eventProcessorHost.d.ts",
			"children": [
				{
					"id": 751,
					"name": "EventProcessorHost",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the Event Processor Host to process events from an EventHub.",
						"tags": [
							{
								"tag": "class",
								"text": "EventProcessorHost\n"
							}
						]
					},
					"children": [
						{
							"id": 753,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new host to process events from an Event Hub."
							},
							"signatures": [
								{
									"id": 754,
									"name": "new EventProcessorHost",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new host to process events from an Event Hub."
									},
									"parameters": [
										{
											"id": 755,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 756,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "EventProcessorHostOptions",
												"id": 370
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 15,
									"character": 21
								}
							]
						},
						{
							"id": 752,
							"name": "_context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{ProcessorContextWithLeaseManager} _context The processor context."
									}
								]
							},
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 758,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Provides the consumer group name for the Event processor host."
							},
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 36,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 757,
							"name": "hostName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Provides the host name for the Event processor host."
							},
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 32,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 766,
							"name": "receivingFromPartitions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Provides a list of partitions the EPH is currently receiving messages from.",
								"text": "The EPH will try to grab leases for more partitions during each scan that happens once every\n(configured) lease renew seconds. The number of EPH instances that are being run\nsimultaneously to receive messages from the same consumer group within an event hub also\ninfluences the number of partitions that this instance of EPH is actively receiving messages\nfrom.\n",
								"tags": [
									{
										"tag": "returns",
										"text": "Array<string> List of partitions that this EPH instance is currently\nreceiving messages from.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 66,
									"character": 36
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 759,
							"name": "getHubRuntimeInformation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 760,
									"name": "getHubRuntimeInformation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provides the eventhub runtime information.",
										"returns": "\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventHubRuntimeInformation"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 41,
									"character": 28
								}
							]
						},
						{
							"id": 764,
							"name": "getPartitionIds",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 765,
									"name": "getPartitionIds",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provides an array of partitionIds.",
										"returns": "\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 53,
									"character": 19
								}
							]
						},
						{
							"id": 761,
							"name": "getPartitionInformation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 762,
									"name": "getPartitionInformation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provides information about the specified partition.",
										"returns": "EventHubPartitionRuntimeInformation\n"
									},
									"parameters": [
										{
											"id": 763,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Partition ID for which partition information is required.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventHubPartitionRuntimeInformation"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 48,
									"character": 27
								}
							]
						},
						{
							"id": 767,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 768,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the event processor host, fetching the list of partitions, and attempting to grab leases\nFor each successful lease, it will get the details from the blob and start a receiver at the\npoint where it left off previously.",
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 769,
											"name": "onMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "OnReceivedMessage",
												"id": 393
											}
										},
										{
											"id": 770,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "OnReceivedError",
												"id": 398
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 74,
									"character": 9
								}
							]
						},
						{
							"id": 771,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 772,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the EventProcessorHost from processing messages.",
										"returns": "\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 79,
									"character": 8
								}
							]
						},
						{
							"id": 808,
							"name": "createFromAadTokenCredentials",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 809,
									"name": "createFromAadTokenCredentials",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from AAD token credentials.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 810,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 811,
											"name": "storageConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string to Azure Storage account used for\nleases and checkpointing. Example DefaultEndpointsProtocol=https;AccountName=<account-name>;\nAccountKey=<account-key>;EndpointSuffix=core.windows.net"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 812,
											"name": "storageContainerName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Azure Storage container name for use by built-in lease\nand checkpoint manager."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 813,
											"name": "namespace",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Fully qualified domain name for Event Hubs.\nExample: \"{your-sb-namespace}.servicebus.windows.net\""
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 814,
											"name": "eventHubPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the EventHub."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 815,
											"name": "credentials",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The AAD Token credentials. It can be one of the\nfollowing: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials\n| MSITokenCredentials."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ApplicationTokenCredentials"
													},
													{
														"type": "reference",
														"name": "UserTokenCredentials"
													},
													{
														"type": "reference",
														"name": "DeviceTokenCredentials"
													},
													{
														"type": "reference",
														"name": "MSITokenCredentials"
													}
												]
											}
										},
										{
											"id": 816,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromTokenProviderOptions",
												"id": 345
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 187,
									"character": 40
								}
							]
						},
						{
							"id": 817,
							"name": "createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 818,
									"name": "createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from AAD token credentials with the given checkpoint manager\nand lease manager.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 819,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 820,
											"name": "namespace",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Fully qualified domain name for Event Hubs.\nExample: \"{your-sb-namespace}.servicebus.windows.net\""
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 821,
											"name": "eventHubPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the EventHub."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 822,
											"name": "credentials",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The AAD Token credentials. It can be one of the\nfollowing: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials\n| MSITokenCredentials."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ApplicationTokenCredentials"
													},
													{
														"type": "reference",
														"name": "UserTokenCredentials"
													},
													{
														"type": "reference",
														"name": "DeviceTokenCredentials"
													},
													{
														"type": "reference",
														"name": "MSITokenCredentials"
													}
												]
											}
										},
										{
											"id": 823,
											"name": "checkpointManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage checkpoints."
											},
											"type": {
												"type": "reference",
												"name": "CheckpointManager",
												"id": 257
											}
										},
										{
											"id": 824,
											"name": "leaseManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage leases."
											},
											"type": {
												"type": "reference",
												"name": "LeaseManager",
												"id": 278
											}
										},
										{
											"id": 825,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromTokenProviderOptions",
												"id": 345
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 208,
									"character": 75
								}
							]
						},
						{
							"id": 776,
							"name": "createFromConnectionString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 777,
									"name": "createFromConnectionString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from the EventHub connection string.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 778,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 779,
											"name": "storageConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string to Azure Storage account used for\nleases and checkpointing. Example DefaultEndpointsProtocol=https;AccountName=<account-name>;\nAccountKey=<account-key>;EndpointSuffix=core.windows.net"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 780,
											"name": "storageContainerName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Azure Storage container name for use by built-in lease\nand checkpoint manager."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 781,
											"name": "eventHubConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string for the Event Hub to receive from.\nExample: 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;\nSharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 782,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromConnectionStringOptions",
												"id": 357
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 106,
									"character": 37
								}
							]
						},
						{
							"id": 783,
							"name": "createFromConnectionStringWithCustomCheckpointAndLeaseManager",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 784,
									"name": "createFromConnectionStringWithCustomCheckpointAndLeaseManager",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from the EventHub connection string with the provided\ncheckpoint manager and lease manager.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 785,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 786,
											"name": "eventHubConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string for the Event Hub to receive from.\nExample: 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;\nSharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 787,
											"name": "checkpointManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage checkpoints."
											},
											"type": {
												"type": "reference",
												"name": "CheckpointManager",
												"id": 257
											}
										},
										{
											"id": 788,
											"name": "leaseManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage leases."
											},
											"type": {
												"type": "reference",
												"name": "LeaseManager",
												"id": 278
											}
										},
										{
											"id": 789,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromConnectionStringOptions",
												"id": 357
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 124,
									"character": 72
								}
							]
						},
						{
							"id": 826,
							"name": "createFromIotHubConnectionString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 827,
									"name": "createFromIotHubConnectionString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from the IotHub connection string.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 828,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 829,
											"name": "storageConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string to Azure Storage account used for\nleases and checkpointing. Example DefaultEndpointsProtocol=https;AccountName=<account-name>;\nAccountKey=<account-key>;EndpointSuffix=core.windows.net"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 830,
											"name": "storageContainerName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Azure Storage container name for use by built-in lease\nand checkpoint manager."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 831,
											"name": "iotHubConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string for the IotHub.\nExample: 'Endpoint=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 832,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromIotHubConnectionStringOptions",
												"id": 402
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventProcessorHost",
												"id": 751
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 227,
									"character": 43
								}
							]
						},
						{
							"id": 833,
							"name": "createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 834,
									"name": "createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from the IotHub connection string with the given\ncheckpoint manager and lease manager.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 835,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 836,
											"name": "iotHubConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string for the IotHub.\nExample: 'Endpoint=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 837,
											"name": "checkpointManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage checkpoints."
											},
											"type": {
												"type": "reference",
												"name": "CheckpointManager",
												"id": 257
											}
										},
										{
											"id": 838,
											"name": "leaseManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage leases."
											},
											"type": {
												"type": "reference",
												"name": "LeaseManager",
												"id": 278
											}
										},
										{
											"id": 839,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromIotHubConnectionStringOptions",
												"id": 402
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventProcessorHost",
												"id": 751
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 244,
									"character": 78
								}
							]
						},
						{
							"id": 790,
							"name": "createFromTokenProvider",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 791,
									"name": "createFromTokenProvider",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from a TokenProvider.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 792,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 793,
											"name": "storageConnectionString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Connection string to Azure Storage account used for\nleases and checkpointing. Example DefaultEndpointsProtocol=https;AccountName=<account-name>;\nAccountKey=<account-key>;EndpointSuffix=core.windows.net"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 794,
											"name": "storageContainerName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Azure Storage container name for use by built-in lease\nand checkpoint manager."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 795,
											"name": "namespace",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Fully qualified domain name for Event Hubs.\nExample: \"{your-sb-namespace}.servicebus.windows.net\""
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 796,
											"name": "eventHubPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the EventHub."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 797,
											"name": "tokenProvider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Your token provider that implements the TokenProvider interface."
											},
											"type": {
												"type": "reference",
												"name": "TokenProvider"
											}
										},
										{
											"id": 798,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromTokenProviderOptions",
												"id": 345
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 145,
									"character": 34
								}
							]
						},
						{
							"id": 799,
							"name": "createFromTokenProviderWithCustomCheckpointAndLeaseManager",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 800,
									"name": "createFromTokenProviderWithCustomCheckpointAndLeaseManager",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an EventProcessorHost instance from a TokenProvider with the provided checkpoint manager\nand lease manager.",
										"returns": "EventProcessorHost\n"
									},
									"parameters": [
										{
											"id": 801,
											"name": "hostName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the processor host. MUST BE UNIQUE.\nStrongly recommend including a Guid or a prefix with a guid to ensure uniqueness. You can use\n`EventProcessorHost.createHostName(\"your-prefix\")`; Default: `js-host-${uuid()}`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 802,
											"name": "namespace",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Fully qualified domain name for Event Hubs.\nExample: \"{your-sb-namespace}.servicebus.windows.net\""
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 803,
											"name": "eventHubPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the EventHub."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 804,
											"name": "tokenProvider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Your token provider that implements the TokenProvider interface."
											},
											"type": {
												"type": "reference",
												"name": "TokenProvider"
											}
										},
										{
											"id": 805,
											"name": "checkpointManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage checkpoints."
											},
											"type": {
												"type": "reference",
												"name": "CheckpointManager",
												"id": 257
											}
										},
										{
											"id": 806,
											"name": "leaseManager",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A manager to manage leases."
											},
											"type": {
												"type": "reference",
												"name": "LeaseManager",
												"id": 278
											}
										},
										{
											"id": 807,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FromTokenProviderOptions",
												"id": 345
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventProcessorHost",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 164,
									"character": 69
								}
							]
						},
						{
							"id": 773,
							"name": "createHostName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 774,
									"name": "createHostName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convenience method for generating unique host name.",
										"returns": "A unique host name\n"
									},
									"parameters": [
										{
											"id": 775,
											"name": "prefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "eventProcessorHost.d.ts",
									"line": 86,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								753
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								752,
								758,
								757,
								766
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								759,
								764,
								761,
								767,
								771,
								808,
								817,
								776,
								783,
								826,
								833,
								790,
								799,
								773
							]
						}
					],
					"sources": [
						{
							"fileName": "eventProcessorHost.d.ts",
							"line": 10,
							"character": 39
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						751
					]
				}
			],
			"sources": [
				{
					"fileName": "eventProcessorHost.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 491,
			"name": "\"hostContext.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/hostContext.d.ts",
			"children": [
				{
					"id": 575,
					"name": "HostContextWithPumpManager",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 600,
							"name": "blobReferenceByPartition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 28,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Dictionary",
								"typeArguments": [
									{
										"type": "reference",
										"name": "AzureBlob"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.blobReferenceByPartition"
							}
						},
						{
							"id": 605,
							"name": "blobService",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 33,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "BlobService"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.blobService"
							}
						},
						{
							"id": 589,
							"name": "checkpointLock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 17,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "AsyncLock"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.checkpointLock"
							}
						},
						{
							"id": 590,
							"name": "checkpointLockId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 18,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.checkpointLockId"
							}
						},
						{
							"id": 578,
							"name": "checkpointManager",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 52,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "CheckpointManager",
								"id": 257
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.checkpointManager"
							}
						},
						{
							"id": 606,
							"name": "composedBlobPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 34,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.composedBlobPrefix"
							}
						},
						{
							"id": 595,
							"name": "connectionConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 23,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "EventHubConnectionConfig"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.connectionConfig"
							}
						},
						{
							"id": 591,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 19,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.consumerGroup"
							}
						},
						{
							"id": 594,
							"name": "eventHubConnectionString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 22,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.eventHubConnectionString"
							}
						},
						{
							"id": 592,
							"name": "eventHubPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 20,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.eventHubPath"
							}
						},
						{
							"id": 610,
							"name": "fastScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 38,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.fastScanInterval"
							}
						},
						{
							"id": 588,
							"name": "hostName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 16,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.hostName"
							}
						},
						{
							"id": 603,
							"name": "initialOffset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 31,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "EventPosition"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.initialOffset"
							}
						},
						{
							"id": 598,
							"name": "leaseDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 26,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.leaseDuration"
							}
						},
						{
							"id": 577,
							"name": "leaseManager",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 51,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "LeaseManager",
								"id": 278
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.leaseManager"
							}
						},
						{
							"id": 597,
							"name": "leaseRenewInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 25,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.leaseRenewInterval"
							}
						},
						{
							"id": 596,
							"name": "onEphError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 24,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "OnEphError",
								"id": 389
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.onEphError"
							}
						},
						{
							"id": 608,
							"name": "onError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "OnReceivedError",
								"id": 398
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.onError"
							}
						},
						{
							"id": 607,
							"name": "onMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 35,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "OnReceivedMessage",
								"id": 393
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.onMessage"
							}
						},
						{
							"id": 599,
							"name": "partitionIds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 27,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.partitionIds"
							}
						},
						{
							"id": 576,
							"name": "pumpManager",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 59,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "PumpManager"
							}
						},
						{
							"id": 612,
							"name": "pumps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "PartitionPump"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.pumps"
							}
						},
						{
							"id": 611,
							"name": "slowScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 39,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.slowScanInterval"
							}
						},
						{
							"id": 609,
							"name": "startupScanDelay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 37,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.startupScanDelay"
							}
						},
						{
							"id": 604,
							"name": "storageBlobPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 32,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.storageBlobPrefix"
							}
						},
						{
							"id": 601,
							"name": "storageConnectionString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 29,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.storageConnectionString"
							}
						},
						{
							"id": 593,
							"name": "storageContainerName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 21,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.storageContainerName"
							}
						},
						{
							"id": 602,
							"name": "tokenProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 30,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TokenProvider"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.tokenProvider"
							}
						},
						{
							"id": 613,
							"name": "userAgent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 41,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.userAgent"
							}
						},
						{
							"id": 579,
							"name": "getEventHubClient",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 580,
									"name": "getEventHubClient",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventHubClient"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HostContextWithCheckpointLeaseManager.getEventHubClient"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 53,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.getEventHubClient"
							}
						},
						{
							"id": 581,
							"name": "getHubRuntimeInformation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 582,
									"name": "getHubRuntimeInformation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventHubRuntimeInformation"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HostContextWithCheckpointLeaseManager.getHubRuntimeInformation"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 54,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.getHubRuntimeInformation"
							}
						},
						{
							"id": 586,
							"name": "getPartitionIds",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 587,
									"name": "getPartitionIds",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HostContextWithCheckpointLeaseManager.getPartitionIds"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 56,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.getPartitionIds"
							}
						},
						{
							"id": 583,
							"name": "getPartitionInformation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 584,
									"name": "getPartitionInformation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 585,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "EventHubPartitionRuntimeInformation"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HostContextWithCheckpointLeaseManager.getPartitionInformation"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 55,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HostContextWithCheckpointLeaseManager.getPartitionInformation"
							}
						},
						{
							"id": 614,
							"name": "withHost",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 615,
									"name": "withHost",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 616,
											"name": "msg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseHostContext.withHost"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 42,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.withHost"
							}
						},
						{
							"id": 617,
							"name": "withHostAndPartition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 618,
									"name": "withHostAndPartition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 619,
											"name": "partition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 620,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 621,
																	"name": "partitionId",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "hostContext.d.ts",
																			"line": 44,
																			"character": 19
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		621
																	]
																}
															],
															"sources": [
																{
																	"fileName": "hostContext.d.ts",
																	"line": 43,
																	"character": 44
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 622,
											"name": "msg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseHostContext.withHostAndPartition"
									}
								}
							],
							"sources": [
								{
									"fileName": "hostContext.d.ts",
									"line": 43,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseHostContext.withHostAndPartition"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								600,
								605,
								589,
								590,
								578,
								606,
								595,
								591,
								594,
								592,
								610,
								588,
								603,
								598,
								577,
								597,
								596,
								608,
								607,
								599,
								576,
								612,
								611,
								609,
								604,
								601,
								593,
								602,
								613
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								579,
								581,
								586,
								583,
								614,
								617
							]
						}
					],
					"sources": [
						{
							"fileName": "hostContext.d.ts",
							"line": 58,
							"character": 43
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "HostContextWithCheckpointLeaseManager"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						575
					]
				}
			],
			"sources": [
				{
					"fileName": "hostContext.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 840,
			"name": "\"index.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/index.d.ts",
			"sources": [
				{
					"fileName": "index.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 277,
			"name": "\"leaseManager.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/leaseManager.d.ts",
			"children": [
				{
					"id": 278,
					"name": "LeaseManager",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "interface",
								"text": "LeaseManager\nIf you wish to have EventProcessorHost store leases somewhere other than Azure Storage,\nyou can write your own lease manager using this interface.\n\nThe Azure Storage managers use the same storage for both lease and checkpoints, so both\ninterfaces are implemented by the same class. You are free to do the same thing if you have\na unified store for both types of data.\n\nThis interface does not specify initialization methods because we have no way of knowing what\ninformation your implementation will require.\n"
							}
						]
					},
					"children": [
						{
							"id": 280,
							"name": "leaseDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} leaseDuration Duration of a lease **in seconds** before it expires\nunless renewed.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 29,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 279,
							"name": "leaseRenewInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} leaseRenewInterval The sleep interval **in seconds** between scans.\n\nAllows a lease manager implementation to specify to PartitionManager how often it should\nscan leases and renew them. In order to redistribute leases in a timely fashion after a host\nceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it\nshould be less than half of the lease length, to prevent accidental expiration.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 24,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 298,
							"name": "acquireLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 299,
									"name": "acquireLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Acquire the lease on the desired partition for this EventProcessorHost.",
										"text": "Note that it is legal to acquire a lease that is already owned by another host.\nLease-stealing is how partitions are redistributed when additional hosts are started.\n\nThe existing Azure Storage implementation can experience races between two host instances\nattempting to acquire or steal the lease at the same time. To avoid situations where two host\ninstances both believe that they own the lease, acquisition can fail without errors by\nreturning false and should do so when there is any doubt -- the worst that can happen is that\nno host instance owns the lease for a short time. This is qualitatively different from,\nfor example, the underlying store throwing an access exception, which is an error.\n",
										"returns": "Promise<boolean> `true` if acquired successfully; `false` otherwise.\n"
									},
									"parameters": [
										{
											"id": 300,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Lease info for the desired partition as previously obtained from\n`getLease()`."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 94,
									"character": 16
								}
							]
						},
						{
							"id": 292,
							"name": "createAllLeasesIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 293,
									"name": "createAllLeasesIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create in the store the lease info for the given partition, if it does not exist. Do nothing\nif it does exist in the store already.",
										"returns": "Promise<void> undefined on success, rejects on error.\n"
									},
									"parameters": [
										{
											"id": 294,
											"name": "partitionIds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "ids of partitions to create lease info for"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 67,
									"character": 30
								}
							]
						},
						{
							"id": 283,
							"name": "createLeaseStoreIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 284,
									"name": "createLeaseStoreIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create the lease store if it doesn't exist. Do nothing if it does exist.",
										"returns": "Promise<void>  resolves with `undefined`; rejects with an `Error`.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 39,
									"character": 31
								}
							]
						},
						{
							"id": 295,
							"name": "deleteLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 296,
									"name": "deleteLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the lease info for the given partition from the store. If there is no stored lease for\nthe given partition, that is treated as success.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"parameters": [
										{
											"id": 297,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Lease info for the desired partition as previously obtained from\n`getLease()`."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 76,
									"character": 15
								}
							]
						},
						{
							"id": 285,
							"name": "deleteLeaseStore",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 286,
									"name": "deleteLeaseStore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete lease store.",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 44,
									"character": 20
								}
							]
						},
						{
							"id": 290,
							"name": "getAllLeases",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 291,
									"name": "getAllLeases",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns lightweight BaseLease for all leases, which includes name of owning host and whether\nlease is expired. An implementation is free to return CompleteLease or its own class derived\nfrom CompleteLease, but it is important that getAllLeases run as fast as possible. If it is\nfaster to obtain only the information required for a BaseLease, we heavily recommend doing that.",
										"returns": "Promise<BaseLease[]>\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "BaseLease",
													"id": 166
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 59,
									"character": 16
								}
							]
						},
						{
							"id": 287,
							"name": "getLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 288,
									"name": "getLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the lease info for the specified partition. Can return `undefined` if no lease has been\ncreated in the store for the specified partition.",
										"returns": "Promise<Lease | undefined>\n"
									},
									"parameters": [
										{
											"id": 289,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Partition id to get the lease for."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CompleteLease",
														"id": 183
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 51,
									"character": 12
								}
							]
						},
						{
							"id": 281,
							"name": "leaseStoreExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 282,
									"name": "leaseStoreExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Does the lease store exist?",
										"returns": "Promise<boolean> `true` if it exists, `false` if it does not exist.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 34,
									"character": 20
								}
							]
						},
						{
							"id": 304,
							"name": "releaseLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 305,
									"name": "releaseLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Give up a lease currently held by this host.",
										"text": "If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if\nattempted.\n",
										"returns": "Promise<void> resolves with `undefined`; rejects with an `Error`.\n"
									},
									"parameters": [
										{
											"id": 306,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Lease info for the desired partition as previously obtained from\n`getLease()`."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 118,
									"character": 16
								}
							]
						},
						{
							"id": 301,
							"name": "renewLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 302,
									"name": "renewLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Renew a lease currently held by this host.",
										"text": "If the lease has been taken by another host instance (either stolen or after expiration)\nor explicitly released, renewLease must return false. With the Azure Storage-based\nimplementation, it IS possible to renew an expired lease that has not been taken by another\nhost, so your implementation can allow that or not, whichever is convenient. If it does not,\nrenewLease should return false.\n",
										"returns": "Promise<boolean> `true` if renewed successfully; `false` otherwise.\n"
									},
									"parameters": [
										{
											"id": 303,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "lease to be renewed."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 107,
									"character": 14
								}
							]
						},
						{
							"id": 307,
							"name": "updateLease",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 308,
									"name": "updateLease",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update the store with the information in the provided lease.",
										"text": "It is necessary to currently hold a lease in order to update it. If the lease has been stolen,\nor expired, or released, it cannot be updated. Lease manager implementations should renew the\nlease before performing the update to avoid lease expiration during the process.\n",
										"returns": "Promise<boolean> `true` if updated successfully; `false` otherwise.\n"
									},
									"parameters": [
										{
											"id": 309,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New lease information to be stored."
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "leaseManager.d.ts",
									"line": 129,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								280,
								279
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								298,
								292,
								283,
								295,
								285,
								290,
								287,
								281,
								304,
								301,
								307
							]
						}
					],
					"sources": [
						{
							"fileName": "leaseManager.d.ts",
							"line": 15,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						278
					]
				}
			],
			"sources": [
				{
					"fileName": "leaseManager.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 841,
			"name": "\"log.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/log.d.ts",
			"sources": [
				{
					"fileName": "log.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 336,
			"name": "\"modelTypes.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/modelTypes.d.ts",
			"children": [
				{
					"id": 340,
					"name": "EPHDiagnosticInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Provides information about internal errors that occur while managing partitions or leases for\nthe partitions.",
						"tags": [
							{
								"tag": "interface",
								"text": "EPHDiagnosticInfo\n"
							}
						]
					},
					"children": [
						{
							"id": 343,
							"name": "action",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} action A short string that indicates what general activity threw the\nerror.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 32,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 344,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{any} error The error that was thrown.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 36,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 341,
							"name": "hostName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} hostName The name of the host that experienced the error. Allows\ndistinguishing the error source if multiple hosts in a single process.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 342,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The partitionId that experienced the error. Allows\ndistinguishing the error source if multiple hosts in a single process.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 27,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								343,
								344,
								341,
								342
							]
						}
					],
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 17,
							"character": 34
						}
					]
				},
				{
					"id": 370,
					"name": "EventProcessorHostOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the optional parameters that can be provided for creating an EventProcessorHost.",
						"tags": [
							{
								"tag": "interface",
								"text": "EventProcessorHostOptions\n"
							}
						]
					},
					"children": [
						{
							"id": 374,
							"name": "checkpointManager",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{CheckpointManager} [checkpointManager] A manager to manage checkpoints.\nDefault: **`AzureStorageCheckpointLeaseManager`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 171,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "CheckpointManager",
								"id": 257
							}
						},
						{
							"id": 379,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [consumerGroup] The name of the consumer group within the Event Hub. Default\nvalue: **`\"$default\"`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 80,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.consumerGroup",
								"id": 347
							}
						},
						{
							"id": 387,
							"name": "dataTransformer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{DataTransformer} [dataTransformer] The data transformer that will be used to encode\nand decode the sent and received messages respectively. If not provided then we will use the\nDefaultDataTransformer. The default transformer should handle majority of the cases. This\noption needs to be used only for specialized scenarios.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 57,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "DataTransformer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.dataTransformer"
							}
						},
						{
							"id": 371,
							"name": "eventHubConnectionString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [eventHubConnectionString] Connection string for the Event Hub to receive\nfrom. Example: \"Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;\nSharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key\".\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 155,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 377,
							"name": "eventHubPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [eventHubPath] The name of the EventHub. This is optional if the\nEventHub connection string contains EntityPath=hub-name else an Error will be thrown.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 143,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromConnectionStringOptions.eventHubPath",
								"id": 358
							}
						},
						{
							"id": 385,
							"name": "fastScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [fastScanInterval] There are two possible interval times between scans for\navailable partitions, fast and slow. The fast (short) interval **`in seconds`** is used after\na scan in which lease stealing has occurred, to promote quicker rebalancing.\nDefault: **`3` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 125,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.fastScanInterval",
								"id": 353
							}
						},
						{
							"id": 378,
							"name": "initialOffset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{EventPosition} initialOffset This is only used when then receiver is being created\nfor the very first time and there is no checkpoint data in the blob. For this option to be\neffective please make sure to provide a new hostName that was not used previously.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 75,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "EventPosition"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.initialOffset",
								"id": 346
							}
						},
						{
							"id": 383,
							"name": "leaseDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseDuration] Duration of a lease **`in seconds`** before it expires\nunless renewed. Default: **`30` seconds**, Min Value: **`15` seconds**,\nMax value: **`60` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 110,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.leaseDuration",
								"id": 351
							}
						},
						{
							"id": 375,
							"name": "leaseManager",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{LeaseManager} [LeaseManager] A manager to manage leases. Default:\n**`AzureStorageCheckpointLeaseManager`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 176,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "LeaseManager",
								"id": 278
							}
						},
						{
							"id": 382,
							"name": "leaseRenewInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseRenewInterval] The sleep interval **`in seconds`** between scans.\nDefault: **`10` seconds**.\n\nAllows a lease manager implementation to specify to PartitionManager how often it should\nscan leases and renew them. In order to redistribute leases in a timely fashion after a host\nceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it\nshould be less than half of the lease length, to prevent accidental expiration.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 104,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.leaseRenewInterval",
								"id": 350
							}
						},
						{
							"id": 381,
							"name": "onEphError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{OnEphError} [onEphError] Error handler that can be provided to receive notifcation\nfor general errors.\n\nErrors which occur while processing events from a particular EventHub partition are delivered\nto the `onError` handler provided in the `start()` method. This handler is called on\noccasions when an error occurs while managing partitions or leases for the partitions.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 94,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "OnEphError",
								"id": 389
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.onEphError",
								"id": 349
							}
						},
						{
							"id": 386,
							"name": "slowScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [slowScanInterval] The slow (long) interval **`in seconds`** is used\nafter a scan in which lease stealing did not occur, to reduce unnecessary scanning when\nthe system is in steady state. Default: **`5` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 131,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.slowScanInterval",
								"id": 354
							}
						},
						{
							"id": 384,
							"name": "startupScanDelay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [startupScanDelay] The delay time **`in seconds`** between the first scan\nfor available partitions and the second. This is part of a startup optimization which allows\nindividual hosts to become visible to other hosts, and thereby get a more accurate count\nof the number of hosts in the system, before they try to estimate how many partitions they\nshould own. Default: **`30` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 118,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.startupScanDelay",
								"id": 352
							}
						},
						{
							"id": 380,
							"name": "storageBlobPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [storageBlobPrefix] Prefix used when naming blobs within the storage\ncontainer.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 85,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.storageBlobPrefix",
								"id": 348
							}
						},
						{
							"id": 372,
							"name": "storageConnectionString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [storageConnectionString] Connection string to Azure Storage account used\nfor leases and checkpointing. Example \"DefaultEndpointsProtocol=https;AccountName=<account-name>;\nAccountKey=<account-key>;EndpointSuffix=core.windows.net\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 161,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 373,
							"name": "storageContainerName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [storageContainerName] Azure Storage container name for use by built-in\nlease and checkpoint manager.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 166,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 376,
							"name": "tokenProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{TokenProvider} [tokenProvider] An instance of the token provider interface that\nprovides the token for authentication. Default value: **`SasTokenProvider`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 181,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TokenProvider"
							}
						},
						{
							"id": 388,
							"name": "userAgent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [userAgent] The user agent that needs to be appended to the built in\nuser agent string.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 62,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.userAgent"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								374,
								379,
								387,
								371,
								377,
								385,
								378,
								383,
								375,
								382,
								381,
								386,
								384,
								380,
								372,
								373,
								376,
								388
							]
						}
					],
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 149,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FromConnectionStringOptions",
							"id": 357
						}
					]
				},
				{
					"id": 357,
					"name": "FromConnectionStringOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the optional parameters that can be provided for creating an EventProcessorHost while\ncreating from the eventhub connection string.",
						"tags": [
							{
								"tag": "interface",
								"text": "FromConnectionStringOptions\n"
							}
						]
					},
					"children": [
						{
							"id": 360,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [consumerGroup] The name of the consumer group within the Event Hub. Default\nvalue: **`\"$default\"`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 80,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.consumerGroup",
								"id": 347
							}
						},
						{
							"id": 368,
							"name": "dataTransformer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{DataTransformer} [dataTransformer] The data transformer that will be used to encode\nand decode the sent and received messages respectively. If not provided then we will use the\nDefaultDataTransformer. The default transformer should handle majority of the cases. This\noption needs to be used only for specialized scenarios.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 57,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "DataTransformer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.dataTransformer"
							}
						},
						{
							"id": 358,
							"name": "eventHubPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [eventHubPath] The name of the EventHub. This is optional if the\nEventHub connection string contains EntityPath=hub-name else an Error will be thrown.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 143,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 366,
							"name": "fastScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [fastScanInterval] There are two possible interval times between scans for\navailable partitions, fast and slow. The fast (short) interval **`in seconds`** is used after\na scan in which lease stealing has occurred, to promote quicker rebalancing.\nDefault: **`3` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 125,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.fastScanInterval",
								"id": 353
							}
						},
						{
							"id": 359,
							"name": "initialOffset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{EventPosition} initialOffset This is only used when then receiver is being created\nfor the very first time and there is no checkpoint data in the blob. For this option to be\neffective please make sure to provide a new hostName that was not used previously.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 75,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "EventPosition"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.initialOffset",
								"id": 346
							}
						},
						{
							"id": 364,
							"name": "leaseDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseDuration] Duration of a lease **`in seconds`** before it expires\nunless renewed. Default: **`30` seconds**, Min Value: **`15` seconds**,\nMax value: **`60` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 110,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.leaseDuration",
								"id": 351
							}
						},
						{
							"id": 363,
							"name": "leaseRenewInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseRenewInterval] The sleep interval **`in seconds`** between scans.\nDefault: **`10` seconds**.\n\nAllows a lease manager implementation to specify to PartitionManager how often it should\nscan leases and renew them. In order to redistribute leases in a timely fashion after a host\nceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it\nshould be less than half of the lease length, to prevent accidental expiration.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 104,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.leaseRenewInterval",
								"id": 350
							}
						},
						{
							"id": 362,
							"name": "onEphError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{OnEphError} [onEphError] Error handler that can be provided to receive notifcation\nfor general errors.\n\nErrors which occur while processing events from a particular EventHub partition are delivered\nto the `onError` handler provided in the `start()` method. This handler is called on\noccasions when an error occurs while managing partitions or leases for the partitions.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 94,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "OnEphError",
								"id": 389
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.onEphError",
								"id": 349
							}
						},
						{
							"id": 367,
							"name": "slowScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [slowScanInterval] The slow (long) interval **`in seconds`** is used\nafter a scan in which lease stealing did not occur, to reduce unnecessary scanning when\nthe system is in steady state. Default: **`5` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 131,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.slowScanInterval",
								"id": 354
							}
						},
						{
							"id": 365,
							"name": "startupScanDelay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [startupScanDelay] The delay time **`in seconds`** between the first scan\nfor available partitions and the second. This is part of a startup optimization which allows\nindividual hosts to become visible to other hosts, and thereby get a more accurate count\nof the number of hosts in the system, before they try to estimate how many partitions they\nshould own. Default: **`30` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 118,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.startupScanDelay",
								"id": 352
							}
						},
						{
							"id": 361,
							"name": "storageBlobPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [storageBlobPrefix] Prefix used when naming blobs within the storage\ncontainer.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 85,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FromTokenProviderOptions.storageBlobPrefix",
								"id": 348
							}
						},
						{
							"id": 369,
							"name": "userAgent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [userAgent] The user agent that needs to be appended to the built in\nuser agent string.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 62,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.userAgent"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								360,
								368,
								358,
								366,
								359,
								364,
								363,
								362,
								367,
								365,
								361,
								369
							]
						}
					],
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 138,
							"character": 44
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FromTokenProviderOptions",
							"id": 345
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "EventProcessorHostOptions",
							"id": 370
						}
					]
				},
				{
					"id": 345,
					"name": "FromTokenProviderOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the optional parameters that can be provided for creating an EventProcessorHost while\ncreating from the given token provider",
						"tags": [
							{
								"tag": "interface",
								"text": "FromTokenProviderOptions\n"
							}
						]
					},
					"children": [
						{
							"id": 347,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [consumerGroup] The name of the consumer group within the Event Hub. Default\nvalue: **`\"$default\"`**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 80,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 355,
							"name": "dataTransformer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{DataTransformer} [dataTransformer] The data transformer that will be used to encode\nand decode the sent and received messages respectively. If not provided then we will use the\nDefaultDataTransformer. The default transformer should handle majority of the cases. This\noption needs to be used only for specialized scenarios.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 57,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "DataTransformer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.dataTransformer"
							}
						},
						{
							"id": 353,
							"name": "fastScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [fastScanInterval] There are two possible interval times between scans for\navailable partitions, fast and slow. The fast (short) interval **`in seconds`** is used after\na scan in which lease stealing has occurred, to promote quicker rebalancing.\nDefault: **`3` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 125,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 346,
							"name": "initialOffset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{EventPosition} initialOffset This is only used when then receiver is being created\nfor the very first time and there is no checkpoint data in the blob. For this option to be\neffective please make sure to provide a new hostName that was not used previously.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 75,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "EventPosition"
							}
						},
						{
							"id": 351,
							"name": "leaseDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseDuration] Duration of a lease **`in seconds`** before it expires\nunless renewed. Default: **`30` seconds**, Min Value: **`15` seconds**,\nMax value: **`60` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 110,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 350,
							"name": "leaseRenewInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [leaseRenewInterval] The sleep interval **`in seconds`** between scans.\nDefault: **`10` seconds**.\n\nAllows a lease manager implementation to specify to PartitionManager how often it should\nscan leases and renew them. In order to redistribute leases in a timely fashion after a host\nceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it\nshould be less than half of the lease length, to prevent accidental expiration.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 104,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 349,
							"name": "onEphError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{OnEphError} [onEphError] Error handler that can be provided to receive notifcation\nfor general errors.\n\nErrors which occur while processing events from a particular EventHub partition are delivered\nto the `onError` handler provided in the `start()` method. This handler is called on\noccasions when an error occurs while managing partitions or leases for the partitions.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 94,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "OnEphError",
								"id": 389
							}
						},
						{
							"id": 354,
							"name": "slowScanInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [slowScanInterval] The slow (long) interval **`in seconds`** is used\nafter a scan in which lease stealing did not occur, to reduce unnecessary scanning when\nthe system is in steady state. Default: **`5` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 131,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 352,
							"name": "startupScanDelay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{number} [startupScanDelay] The delay time **`in seconds`** between the first scan\nfor available partitions and the second. This is part of a startup optimization which allows\nindividual hosts to become visible to other hosts, and thereby get a more accurate count\nof the number of hosts in the system, before they try to estimate how many partitions they\nshould own. Default: **`30` seconds**.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 118,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 348,
							"name": "storageBlobPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [storageBlobPrefix] Prefix used when naming blobs within the storage\ncontainer.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 85,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 356,
							"name": "userAgent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} [userAgent] The user agent that needs to be appended to the built in\nuser agent string.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "E:/temp/node_modules/@azure/event-processor-host/node_modules/@azure/event-hubs/typings/lib/eventHubClient.d.ts",
									"line": 62,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClientOptionsBase.userAgent"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								347,
								355,
								353,
								346,
								351,
								350,
								349,
								354,
								352,
								348,
								356
							]
						}
					],
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 69,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClientOptionsBase"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "FromConnectionStringOptions",
							"id": 357
						}
					]
				},
				{
					"id": 402,
					"name": "FromIotHubConnectionStringOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the optional parameters that can be provided for creating an EventProcessorHost while\ncreating from an iothub connectionstring.",
						"tags": [
							{
								"tag": "interface",
								"text": "FromIotHubConnectionStringOptions\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 63,
							"character": 53
						}
					],
					"type": {
						"type": "reference",
						"name": "FromTokenProviderOptions",
						"id": 345
					}
				},
				{
					"id": 389,
					"name": "OnEphError",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the error handler signature to receive notifcation for general errors.",
						"text": "Errors which occur while processing events from a particular EventHub partition are delivered\nto the `onError` handler provided in the `start()` method. This handler is called on\noccasions when an error occurs while managing partitions or leases for the partitions.",
						"tags": [
							{
								"tag": "function",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 46,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 390,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 391,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 392,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EPHDiagnosticInfo",
												"id": 340
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 46,
									"character": 32
								}
							]
						}
					}
				},
				{
					"id": 398,
					"name": "OnReceivedError",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the message handler signature for errors that occur while receiving messages from an\nEventHub.",
						"tags": [
							{
								"tag": "function",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 57,
							"character": 35
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 399,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 400,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 401,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MessagingError"
													},
													{
														"type": "reference",
														"name": "Error"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 57,
									"character": 37
								}
							]
						}
					}
				},
				{
					"id": 393,
					"name": "OnReceivedMessage",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the message handler signature for messages received from an EventHub.",
						"tags": [
							{
								"tag": "function",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "modelTypes.d.ts",
							"line": 51,
							"character": 37
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 394,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 395,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 396,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PartitionContext",
												"id": 311
											}
										},
										{
											"id": 397,
											"name": "eventData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventData"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "modelTypes.d.ts",
									"line": 51,
									"character": 39
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						340,
						370,
						357,
						345
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						402,
						389,
						398,
						393
					]
				}
			],
			"sources": [
				{
					"fileName": "modelTypes.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 310,
			"name": "\"partitionContext.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/partitionContext.d.ts",
			"children": [
				{
					"id": 311,
					"name": "PartitionContext",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Describes the Partition Context.",
						"tags": [
							{
								"tag": "class",
								"text": "PartitionContext\n"
							}
						]
					},
					"children": [
						{
							"id": 320,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new PartitionContext."
							},
							"signatures": [
								{
									"id": 321,
									"name": "new PartitionContext",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new PartitionContext."
									},
									"parameters": [
										{
											"id": 322,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "HostContextWithCheckpointLeaseManager"
											}
										},
										{
											"id": 323,
											"name": "partitionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The eventhub partition id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 324,
											"name": "lease",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The lease object.\n"
											},
											"type": {
												"type": "reference",
												"name": "CompleteLease",
												"id": 183
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PartitionContext",
										"id": 311
									}
								}
							],
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 35,
									"character": 28
								}
							]
						},
						{
							"id": 317,
							"name": "_context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 33,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 318,
							"name": "_offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 34,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 319,
							"name": "_sequenceNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 35,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 316,
							"name": "consumerGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} consumerGroup The name of the consumer group."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 32,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 315,
							"name": "eventhubPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} eventhubPath The path of the eventhub"
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 27,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 312,
							"name": "lease",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{Lease} lease The most recdent checkpointed lease with the partitionId.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "CompleteLease",
								"id": 183
							}
						},
						{
							"id": 314,
							"name": "owner",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} owner The host/owner of the partition."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 22,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 313,
							"name": "partitionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "property",
										"text": "{string} partitionId The eventhub partition id."
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 17,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 328,
							"name": "checkpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 329,
									"name": "checkpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes the current offset and sequenceNumber to the checkpoint store via the checkpoint manager.",
										"text": "The checkpoint data is structured as a JSON payload (example):\n`{ \"partitionId\":\"0\",\"owner\":\"ephtest\",\"token\":\"48e209e3-55f0-41b8-a8dd-d9c09ff6c35a\",\n\"epoch\":1,\"offset\":\"\",\"SequenceNumber\":0 }`.\n",
										"returns": "\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 57,
									"character": 14
								}
							]
						},
						{
							"id": 330,
							"name": "checkpointFromEventData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 331,
									"name": "checkpointFromEventData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes the current offset and sequenceNumber to the checkpoint store via the checkpoint manager.",
										"text": "The checkpoint data is structured as a JSON payload (example):\n`{ \"partitionId\":\"0\",\"owner\":\"ephtest\",\"token\":\"48e209e3-55f0-41b8-a8dd-d9c09ff6c35a\",\n\"epoch\":1,\"offset\":\"\",\"SequenceNumber\":0 }`.\n",
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 332,
											"name": "eventData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event data received from the EventHubReceiver."
											},
											"type": {
												"type": "reference",
												"name": "EventData"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 68,
									"character": 27
								}
							]
						},
						{
							"id": 325,
							"name": "setOffsetAndSequenceNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 326,
									"name": "setOffsetAndSequenceNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the offset and sequence number of the partition context from the provided EventData."
									},
									"parameters": [
										{
											"id": 327,
											"name": "eventData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event data `received` from the EventHubReceiver.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventData"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "partitionContext.d.ts",
									"line": 47,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								320
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								317,
								318,
								319,
								316,
								315,
								312,
								314,
								313
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								328,
								330,
								325
							]
						}
					],
					"sources": [
						{
							"fileName": "partitionContext.d.ts",
							"line": 8,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						311
					]
				}
			],
			"sources": [
				{
					"fileName": "partitionContext.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 419,
			"name": "\"partitionManager.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/partitionManager.d.ts",
			"sources": [
				{
					"fileName": "partitionManager.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 462,
			"name": "\"partitionPump.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/partitionPump.d.ts",
			"sources": [
				{
					"fileName": "partitionPump.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 442,
			"name": "\"partitionScanner.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/partitionScanner.d.ts",
			"sources": [
				{
					"fileName": "partitionScanner.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 403,
			"name": "\"pumpManager.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/pumpManager.d.ts",
			"sources": [
				{
					"fileName": "pumpManager.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 857,
			"name": "\"util/constants.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/util/constants.d.ts",
			"children": [
				{
					"id": 864,
					"name": "defaultCheckpointTimeoutInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 7,
							"character": 54
						}
					],
					"type": {
						"type": "unknown",
						"name": "120"
					},
					"defaultValue": "120"
				},
				{
					"id": 873,
					"name": "defaultConsumerGroup",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 16,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "$default"
					},
					"defaultValue": "\"$default\""
				},
				{
					"id": 866,
					"name": "defaultFastScanIntervalInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 9,
							"character": 53
						}
					],
					"type": {
						"type": "unknown",
						"name": "3"
					},
					"defaultValue": "3"
				},
				{
					"id": 860,
					"name": "defaultLeaseDurationInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 3,
							"character": 50
						}
					],
					"type": {
						"type": "unknown",
						"name": "30"
					},
					"defaultValue": "30"
				},
				{
					"id": 861,
					"name": "defaultLeaseRenewIntervalInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 4,
							"character": 55
						}
					],
					"type": {
						"type": "unknown",
						"name": "10"
					},
					"defaultValue": "10"
				},
				{
					"id": 862,
					"name": "defaultMaximumExecutionTimeInMs",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 5,
							"character": 52
						}
					],
					"type": {
						"type": "unknown",
						"name": "120000"
					},
					"defaultValue": "120000"
				},
				{
					"id": 867,
					"name": "defaultSlowScanIntervalInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 10,
							"character": 53
						}
					],
					"type": {
						"type": "unknown",
						"name": "5"
					},
					"defaultValue": "5"
				},
				{
					"id": 865,
					"name": "defaultStartupScanDelayInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 8,
							"character": 53
						}
					],
					"type": {
						"type": "unknown",
						"name": "30"
					},
					"defaultValue": "30"
				},
				{
					"id": 871,
					"name": "leaseIdMismatchWithBlobOperation",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 14,
							"character": 53
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "leaseidmismatchwithbloboperation"
					},
					"defaultValue": "\"leaseidmismatchwithbloboperation\""
				},
				{
					"id": 870,
					"name": "leaseIdMismatchWithLeaseOperation",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 13,
							"character": 54
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "leaseidmismatchwithleaseoperation"
					},
					"defaultValue": "\"leaseidmismatchwithleaseoperation\""
				},
				{
					"id": 869,
					"name": "leaseLost",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 12,
							"character": 30
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "leaselost"
					},
					"defaultValue": "\"leaselost\""
				},
				{
					"id": 859,
					"name": "maxLeaseDurationInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 2,
							"character": 46
						}
					],
					"type": {
						"type": "unknown",
						"name": "60"
					},
					"defaultValue": "60"
				},
				{
					"id": 863,
					"name": "maximumExecutionTimeInMsForLeaseRenewal",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 6,
							"character": 60
						}
					],
					"type": {
						"type": "unknown",
						"name": "60000"
					},
					"defaultValue": "60000"
				},
				{
					"id": 868,
					"name": "metadataOwnerName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 11,
							"character": 38
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "owninghost"
					},
					"defaultValue": "\"owninghost\""
				},
				{
					"id": 858,
					"name": "minLeaseDurationInSeconds",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 1,
							"character": 46
						}
					],
					"type": {
						"type": "unknown",
						"name": "15"
					},
					"defaultValue": "15"
				},
				{
					"id": 874,
					"name": "packageInfo",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 17,
							"character": 32
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 875,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 876,
									"name": "name",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/constants.d.ts",
											"line": 18,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 877,
									"name": "version",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/constants.d.ts",
											"line": 19,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										876,
										877
									]
								}
							],
							"sources": [
								{
									"fileName": "util/constants.d.ts",
									"line": 17,
									"character": 33
								}
							]
						}
					}
				},
				{
					"id": 872,
					"name": "userAgentPrefix",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/constants.d.ts",
							"line": 15,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "/js-event-processor-host"
					},
					"defaultValue": "\"/js-event-processor-host\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						864,
						873,
						866,
						860,
						861,
						862,
						867,
						865,
						871,
						870,
						869,
						859,
						863,
						868,
						858,
						874,
						872
					]
				}
			],
			"sources": [
				{
					"fileName": "util/constants.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 878,
			"name": "\"util/utils.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "E:/temp/node_modules/@azure/event-processor-host/typings/util/utils.d.ts",
			"children": [
				{
					"id": 917,
					"name": "randomNumberFromInterval",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 918,
							"name": "randomNumberFromInterval",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a random number between the given interval"
							},
							"parameters": [
								{
									"id": 919,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Min number of the range (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 920,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Max number of the range (inclusive).\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/utils.d.ts",
							"line": 7,
							"character": 48
						}
					]
				},
				{
					"id": 921,
					"name": "validateType",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 922,
							"name": "validateType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Validates the type and requiredness of a given parameter."
							},
							"parameters": [
								{
									"id": 923,
									"name": "paramName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the parameter."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 924,
									"name": "paramValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameter value"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 925,
									"name": "required",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 926,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The type of the parameter\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "string"
											},
											{
												"type": "stringLiteral",
												"value": "number"
											},
											{
												"type": "stringLiteral",
												"value": "boolean"
											},
											{
												"type": "stringLiteral",
												"value": "Array"
											},
											{
												"type": "stringLiteral",
												"value": "object"
											},
											{
												"type": "stringLiteral",
												"value": "Date"
											},
											{
												"type": "stringLiteral",
												"value": "function"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/utils.d.ts",
							"line": 14,
							"character": 36
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						917,
						921
					]
				}
			],
			"sources": [
				{
					"fileName": "util/utils.d.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				103,
				198,
				680,
				162,
				1,
				239,
				256,
				178,
				750,
				491,
				840,
				277,
				841,
				336,
				310,
				419,
				462,
				442,
				403,
				857,
				878
			]
		}
	]
}