### YamlMime:UniversalReference
items:
  - uid: botbuilder-prompts.TextPrompt
    name: TextPrompt
    fullName: TextPrompt<O>
    children:
      - botbuilder-prompts.TextPrompt.prompt
      - botbuilder-prompts.TextPrompt.recognize
    langs:
      - typeScript
    type: interface
    summary: Prompts the user to reply with some text.
    package: botbuilder-prompts
    remarks: |-
      This example shows creating a text prompt:

      ```JavaScript
      const { createTextPrompt } = require('botbuilder-prompts');

      const agePrompt = createTextPrompt();
      ```
  - uid: botbuilder-prompts.TextPrompt.prompt
    name: prompt
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a formated prompt to the user.
    syntax:
      content: >-
        function prompt(context: TurnContext, prompt: string |
        Partial<Activity>, speak?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: prompt
          type:
            - string | Partial<Activity>
          description: Text or activity to send as the prompt.
        - id: speak
          type:
            - string
          description: >
            (Optional) SSML that should be spoken for prompt. The prompts
            `inputHint` will be automatically set to `expectingInput`.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder-prompts
    remarks: |-
      This example shows prompting the user for their name:

      ```JavaScript
      await namePrompt.prompt(context, `What's your name?`);
      ```
  - uid: botbuilder-prompts.TextPrompt.recognize
    name: recognize
    children: []
    type: method
    langs:
      - typeScript
    summary: Recognizes and validates the users reply.
    syntax:
      content: 'function recognize(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation.
      return:
        type:
          - Promise<O | undefined>
    package: botbuilder-prompts
    remarks: >-
      The result of the call will either be the recognized value or `undefined`.


      The recognize() method will not automatically re-prompt the user so either
      the caller or the

      prompts custom validator will need to implement re-prompting logic.


      ```JavaScript

      const name = await namePrompt.recognize(context);

      if (name) {
         // Save name and continue
      }

      ```
