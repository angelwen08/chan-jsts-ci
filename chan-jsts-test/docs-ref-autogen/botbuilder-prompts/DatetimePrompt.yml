### YamlMime:UniversalReference
items:
  - uid: botbuilder-prompts.DatetimePrompt
    name: DatetimePrompt
    fullName: DatetimePrompt<O>
    children:
      - botbuilder-prompts.DatetimePrompt.prompt
      - botbuilder-prompts.DatetimePrompt.recognize
    langs:
      - typeScript
    type: interface
    summary: >
      :package: **botbuilder-prompts**

      Prompts the user to reply with a date and/or time using natural language
      utterances like

      "tomorrow at 9am".
    package: botbuilder-prompts
    remarks: |-
      This example shows creating a datetime prompt:

      ```JavaScript
      const { createDatetimePrompt } = require('botbuilder-prompts');

      const timePrompt = createDatetimePrompt();
      ```
  - uid: botbuilder-prompts.DatetimePrompt.prompt
    name: prompt
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a formated prompt to the user.
    syntax:
      content: >-
        function prompt(context: TurnContext, prompt: string |
        Partial<Activity>, speak?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: prompt
          type:
            - string | Partial<Activity>
          description: Text or activity to send as the prompt.
        - id: speak
          type:
            - string
          description: >
            (Optional) SSML that should be spoken for prompt. The prompts
            `inputHint` will be automatically set to `expectingInput`.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder-prompts
    remarks: >-
      This example shows prompting the user for a time.


      ```JavaScript

      await timePrompt.prompt(context, `What time should I set your alarm
      for?`);

      ```
  - uid: botbuilder-prompts.DatetimePrompt.recognize
    name: recognize
    children: []
    type: method
    langs:
      - typeScript
    summary: Recognizes and validates the users reply.
    syntax:
      content: 'function recognize(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation.
      return:
        type:
          - Promise<O | undefined>
    package: botbuilder-prompts
    remarks: >-
      The result of the call will either be the recognized value or `undefined`.


      The recognize() method will not automatically re-prompt the user so either
      the caller or the

      prompts custom validator will need to implement re-prompting logic.


      ```JavaScript

      const values = await timePrompt.recognize(context);

      if (values && values.length > 0) {
         const time = values[0];
         switch (time.type) {
            case 'date':
            case 'time':
            case 'datetime':
               const date = new Date(time.value);
               break;
         }
      }

      ```
