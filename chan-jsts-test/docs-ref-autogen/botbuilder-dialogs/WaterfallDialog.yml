### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.WaterfallDialog
    name: WaterfallDialog
    fullName: WaterfallDialog<O>
    children:
      - botbuilder-dialogs.WaterfallDialog.addStep
      - botbuilder-dialogs.WaterfallDialog.beginDialog
      - botbuilder-dialogs.WaterfallDialog.continueDialog
      - botbuilder-dialogs.WaterfallDialog.resumeDialog
      - botbuilder-dialogs.WaterfallDialog.constructor
    langs:
      - typeScript
    type: class
    summary: >-
      A waterfall is a dialog that's optimized for prompting a user with a
      series of questions.
    extends:
      name: botbuilder-dialogs.Dialog<O>
    package: botbuilder-dialogs
    remarks: >-
      Waterfalls accept a stack of functions which will be executed in sequence.
      Each waterfall step

      can ask a question of the user and the user's response will be passed to
      the next step in the

      waterfall via `step.result`. A special `step.value` object can be used to
      persist values between

      steps:


      ```JavaScript

      const { ComponentDialog, WaterfallDialog, TextPrompt, NumberPrompt } =
      require('botbuilder-dialogs);


      class FillProfileDialog extends ComponentDialog {
          constructor(dialogId) {
              super(dialogId);

              // Add control flow dialogs
              this.addDialog(new WaterfallDialog('start', [
                  async (step) => {
                      // Ask user their name
                      return await step.prompt('namePrompt', `What's your name?`);
                  },
                  async (step) => {
                      // Remember the users answer
                      step.values['name'] = step.result;

                      // Ask user their age.
                      return await step.prompt('agePrompt', `Hi ${step.values['name']}. How old are you?`);
                  },
                  async (step) => {
                      // Remember the users answer
                      step.values['age'] = step.result;

                      // End the component and return the completed profile.
                      return await step.endDialog(step.values);
                  }
              ]));

              // Add prompts
              this.addDialog(new TextPrompt('namePrompt'));
              this.addDialog(new NumberPrompt('agePrompt'))
          }
      }

      module.exports.FillProfileDialog = FillProfileDialog;

      ```
  - uid: botbuilder-dialogs.WaterfallDialog.addStep
    name: addStep
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a new step to the waterfall.
    syntax:
      content: 'function addStep(step: WaterfallStep<O>)'
      parameters:
        - id: step
          type:
            - botbuilder-dialogs.WaterfallStep<O>
          description: |
            Asynchronous step function to call.
      return:
        type:
          - this
    package: botbuilder-dialogs
    remarks: >-
      All step functions should be asynchronous and return a `DialogTurnResult`.
      The

      `WaterfallStepContext` passed into your function derives from
      `DialogContext` and contains

      numerous stack manipulation methods which return a `DialogTurnResult` so
      you can typically

      just return the result from the DialogContext method you call.


      The step function itself can be either an asynchronous closure:


      ```JavaScript

      const helloDialog = new WaterfallDialog('hello');


      helloDialog.addStep(async (step) => {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      });

      ```


      A named async function:


      ```JavaScript

      async function helloWorldStep(step) {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      }


      helloDialog.addStep(helloWorldStep);

      ```


      Or a class method that's been bound to its `this` pointer:


      ```JavaScript

      helloDialog.addStep(this.helloWorldStep.bind(this));

      ```
  - uid: botbuilder-dialogs.WaterfallDialog.beginDialog
    name: beginDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: options
          type:
            - O
          description: ''
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallDialog.continueDialog
    name: continueDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallDialog.resumeDialog
    name: resumeDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: ''
        - id: result
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallDialog.constructor
    name: WaterfallDialog
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new waterfall dialog containing the given array of steps.
    syntax:
      content: 'new WaterfallDialog(dialogId: string, steps?: WaterfallStep<O>[])'
      parameters:
        - id: dialogId
          type:
            - string
          description: >-
            Unique ID of the dialog within the component or set its being added
            to.
        - id: steps
          type:
            - 'botbuilder-dialogs.WaterfallStep<O>[]'
          description: |
            (Optional) array of asynchronous waterfall step functions.
          optional: true
    package: botbuilder-dialogs
    remarks: >-
      See the [addStep()](#addstep) function for details on creating a valid
      step function.
references:
  - uid: botbuilder-dialogs.Dialog<O>
    name: Dialog<O>
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: <O>
        fullName: <O>
  - uid: 'botbuilder-dialogs.WaterfallStep<O>[]'
    name: 'WaterfallStep<O>[]'
    spec.typeScript:
      - name: WaterfallStep
        fullName: WaterfallStep
        uid: botbuilder-dialogs.WaterfallStep
      - name: '<O>[]'
        fullName: '<O>[]'
  - uid: botbuilder-dialogs.WaterfallStep<O>
    name: WaterfallStep<O>
    spec.typeScript:
      - name: WaterfallStep
        fullName: WaterfallStep
        uid: botbuilder-dialogs.WaterfallStep
      - name: <O>
        fullName: <O>
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: botbuilder-dialogs.DialogReason
    name: DialogReason
    spec.typeScript:
      - name: DialogReason
        fullName: DialogReason
        uid: botbuilder-dialogs.DialogReason
