### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.ConsistencyLevel'
    name: ConsistencyLevel
    fullName: ConsistencyLevel
    children:
      - '@azure/cosmos.ConsistencyLevel.BoundedStaleness'
      - '@azure/cosmos.ConsistencyLevel.ConsistentPrefix'
      - '@azure/cosmos.ConsistencyLevel.Eventual'
      - '@azure/cosmos.ConsistencyLevel.Session'
      - '@azure/cosmos.ConsistencyLevel.Strong'
    langs:
      - typeScript
    type: enum
    summary: >
      Represents the consistency levels supported for Azure Cosmos DB client
      operations.<br>

      The requested ConsistencyLevel must match or be weaker than that
      provisioned for the database account.

      Consistency levels.

      Consistency levels by order of strength are Strong, BoundedStaleness,
      Session, Consistent Prefix, and Eventual.


      See https://aka.ms/cosmos-consistency for more detailed documentation on
      Consistency Levels.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ConsistencyLevel.BoundedStaleness'
    name: BoundedStaleness
    children: []
    langs:
      - typeScript
    summary: >-
      Bounded Staleness guarantees that reads are not too out-of-date.

      This can be configured based on number of operations (MaxStalenessPrefix)
      or time (MaxStalenessIntervalInSeconds).
    type: field
    numericValue: null
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ConsistencyLevel.ConsistentPrefix'
    name: ConsistentPrefix
    children: []
    langs:
      - typeScript
    summary: >-
      ConsistentPrefix Consistency guarantees that reads will return some prefix
      of all writes with no gaps.

      All writes will be eventually be available for reads.`
    type: field
    numericValue: null
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ConsistencyLevel.Eventual'
    name: Eventual
    children: []
    langs:
      - typeScript
    summary: |-
      Eventual Consistency guarantees that reads will return a subset of writes.
      All writes will be eventually be available for reads.
    type: field
    numericValue: null
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ConsistencyLevel.Session'
    name: Session
    children: []
    langs:
      - typeScript
    summary: >-
      Session Consistency guarantees monotonic reads (you never read old data,
      then new, then old again),

      monotonic writes (writes are ordered) and read your writes (your writes
      are immediately visible to your reads)

      within any single session.
    type: field
    numericValue: null
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ConsistencyLevel.Strong'
    name: Strong
    children: []
    langs:
      - typeScript
    summary: >-
      Strong Consistency guarantees that read operations always return the value
      that was last written.
    type: field
    numericValue: null
    package: '@azure/cosmos'
