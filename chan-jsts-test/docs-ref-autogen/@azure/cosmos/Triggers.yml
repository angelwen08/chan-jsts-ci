### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Triggers'
    name: Triggers
    fullName: Triggers
    children:
      - '@azure/cosmos.Triggers.container'
      - '@azure/cosmos.Triggers.create'
      - '@azure/cosmos.Triggers.query'
      - '@azure/cosmos.Triggers.query_1'
      - '@azure/cosmos.Triggers.readAll'
      - '@azure/cosmos.Triggers.upsert'
    langs:
      - typeScript
    type: class
    summary: |
      Operations to create, upsert, query, and read all triggers.
      Use `container.triggers` to read, replace, or delete a <xref:Trigger>.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.create'
    name: 'create(TriggerDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a trigger.

      Azure Cosmos DB supports pre and post triggers defined in JavaScript to be
      executed

      on creates, updates and deletes.


      For additional details, refer to the server-side JavaScript API
      documentation.
    syntax:
      content: 'function create(body: TriggerDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.TriggerDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |+

          optional: true
      return:
        type:
          - Promise<@azure/cosmos.TriggerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.query'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all Triggers.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.query_1'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all Triggers.
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Read all Triggers.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.TriggerDefinition &
            @azure/cosmos.Resource>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Triggers.upsert'
    name: 'upsert(TriggerDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upsert a trigger.

      Azure Cosmos DB supports pre and post triggers defined in JavaScript to be

      executed on creates, updates and deletes.


      For additional details, refer to the server-side JavaScript API
      documentation.
    syntax:
      content: 'function upsert(body: TriggerDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.TriggerDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |+

          optional: true
      return:
        type:
          - Promise<@azure/cosmos.TriggerResponse>
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    name: Container
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.TriggerDefinition'
    name: TriggerDefinition
    spec.typeScript:
      - name: TriggerDefinition
        fullName: TriggerDefinition
        uid: '@azure/cosmos.TriggerDefinition'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.TriggerResponse>
    name: TriggerResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: TriggerResponse
        fullName: TriggerResponse
        uid: '@azure/cosmos.TriggerResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.SqlQuerySpec'
    name: SqlQuerySpec
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.TriggerDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: TriggerDefinition
        fullName: TriggerDefinition
        uid: '@azure/cosmos.TriggerDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
