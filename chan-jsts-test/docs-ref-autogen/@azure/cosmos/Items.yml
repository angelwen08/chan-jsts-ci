### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Items'
    name: Items
    fullName: Items
    children:
      - '@azure/cosmos.Items.container'
      - '@azure/cosmos.Items.create'
      - '@azure/cosmos.Items.create_1'
      - '@azure/cosmos.Items.query'
      - '@azure/cosmos.Items.query_1'
      - '@azure/cosmos.Items.readAll'
      - '@azure/cosmos.Items.readAll_1'
      - '@azure/cosmos.Items.readChangeFeed_1'
      - '@azure/cosmos.Items.readChangeFeed_3'
      - '@azure/cosmos.Items.readChangeFeed'
      - '@azure/cosmos.Items.readChangeFeed_2'
      - '@azure/cosmos.Items.upsert'
      - '@azure/cosmos.Items.upsert_1'
    langs:
      - typeScript
    type: class
    summary: 'Operations for creating new items, and reading/querying all items'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.create'
    name: 'create(any, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Create a item.

      There is no set schema for JSON items. They may contain any number of
      custom properties..
    syntax:
      content: 'function create(body: any, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - any
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.create_1'
    name: 'create(T, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Create a item.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function create<T>(body: T, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - T
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.query'
    name: 'query(string | SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all items.
    syntax:
      content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.query_1'
    name: 'query(string | SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all items.
    syntax:
      content: 'function query<T>(query: string | SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Read all items.

      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<@azure/cosmos.ItemDefinition>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readAll_1'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Read all items.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function readAll<T>(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readChangeFeed_1'
    name: readChangeFeed(ChangeFeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    syntax:
      content: 'function readChangeFeed(changeFeedOptions?: ChangeFeedOptions)'
      parameters:
        - id: changeFeedOptions
          type:
            - '@azure/cosmos.ChangeFeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.ChangeFeedIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readChangeFeed_3'
    name: readChangeFeed(ChangeFeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    syntax:
      content: 'function readChangeFeed<T>(changeFeedOptions?: ChangeFeedOptions)'
      parameters:
        - id: changeFeedOptions
          type:
            - '@azure/cosmos.ChangeFeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.ChangeFeedIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readChangeFeed'
    name: 'readChangeFeed(string | number | boolean, ChangeFeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    syntax:
      content: >-
        function readChangeFeed(partitionKey: string | number | boolean,
        changeFeedOptions: ChangeFeedOptions)
      parameters:
        - id: partitionKey
          type:
            - string | number | boolean
          description: ''
        - id: changeFeedOptions
          type:
            - '@azure/cosmos.ChangeFeedOptions'
          description: |+

      return:
        type:
          - '@azure/cosmos.ChangeFeedIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.readChangeFeed_2'
    name: 'readChangeFeed(string | number | boolean, ChangeFeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    syntax:
      content: >-
        function readChangeFeed<T>(partitionKey: string | number | boolean,
        changeFeedOptions: ChangeFeedOptions)
      parameters:
        - id: partitionKey
          type:
            - string | number | boolean
          description: ''
        - id: changeFeedOptions
          type:
            - '@azure/cosmos.ChangeFeedOptions'
          description: |+

      return:
        type:
          - '@azure/cosmos.ChangeFeedIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.upsert'
    name: 'upsert(any, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Upsert an item.

      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function upsert(body: any, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - any
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Items.upsert_1'
    name: 'upsert(T, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Upsert an item.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function upsert<T>(body: T, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - T
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Used for modifying the request (for instance, specifying the
            partition key).
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<T>>
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    name: Container
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    name: ItemDefinition>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ItemResponse
        fullName: ItemResponse
        uid: '@azure/cosmos.ItemResponse'
      - name: <
        fullName: <
      - name: ItemDefinition
        fullName: ItemDefinition
        uid: '@azure/cosmos.ItemDefinition'
      - name: '>>'
        fullName: '>>'
  - uid: Promise<@azure/cosmos.ItemResponse<T>>
    name: ItemResponse<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ItemResponse
        fullName: ItemResponse
        uid: '@azure/cosmos.ItemResponse'
      - name: <T>>
        fullName: <T>>
  - uid: string | @azure/cosmos.SqlQuerySpec
    name: SqlQuerySpec
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ItemDefinition>'
    name: ItemDefinition>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: ItemDefinition
        fullName: ItemDefinition
        uid: '@azure/cosmos.ItemDefinition'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.ChangeFeedOptions'
    name: ChangeFeedOptions
    spec.typeScript:
      - name: ChangeFeedOptions
        fullName: ChangeFeedOptions
        uid: '@azure/cosmos.ChangeFeedOptions'
  - uid: '@azure/cosmos.ChangeFeedIterator<any>'
    name: ChangeFeedIterator<any>
    spec.typeScript:
      - name: ChangeFeedIterator
        fullName: ChangeFeedIterator
        uid: '@azure/cosmos.ChangeFeedIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.ChangeFeedIterator<T>'
    name: ChangeFeedIterator<T>
    spec.typeScript:
      - name: ChangeFeedIterator
        fullName: ChangeFeedIterator
        uid: '@azure/cosmos.ChangeFeedIterator'
      - name: <T>
        fullName: <T>
