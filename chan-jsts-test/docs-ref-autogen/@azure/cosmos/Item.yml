### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Item'
    name: Item
    fullName: Item
    children:
      - '@azure/cosmos.Item.container'
      - '@azure/cosmos.Item.delete'
      - '@azure/cosmos.Item.delete_1'
      - '@azure/cosmos.Item.id'
      - '@azure/cosmos.Item.primaryKey'
      - '@azure/cosmos.Item.read'
      - '@azure/cosmos.Item.read_1'
      - '@azure/cosmos.Item.replace'
      - '@azure/cosmos.Item.replace_1'
      - '@azure/cosmos.Item.url'
    langs:
      - typeScript
    type: class
    summary: Used to perform operations on a specific item.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.delete'
    name: delete(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the item.
    syntax:
      content: 'function delete(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |
            Additional options for the request, such as the partition key.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.delete_1'
    name: delete(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Delete the item.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.
    syntax:
      content: 'function delete<T>(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |
            Additional options for the request, such as the partition key.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.primaryKey'
    name: primaryKey
    fullName: primaryKey
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'primaryKey: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.read'
    name: read(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Read the item's definition.

      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function read(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Additional options for the request, such as the partition key.

            Note, if you provide a partition key on the options object, it will
            override the primary key on `this.primaryKey`.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.read_1'
    name: read(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Read the item's definition.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.

      If the type, T, is a class, it won't pass `typeof` comparisons, because it
      won't have a match prototype.

      It's recommended to only use interfaces.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function read<T>(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Additional options for the request, such as the partition key.

            Note, if you provide a partition key on the options object, it will
            override the primary key on `this.primaryKey`.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.replace'
    name: 'replace(ItemDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Replace the item's definition.

      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function replace(body: ItemDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.ItemDefinition'
          description: 'The definition to replace the existing <xref:Item>''s defintion with.'
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |
            Additional options for the request, such as the partition key.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.replace_1'
    name: 'replace(T, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Replace the item's definition.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    syntax:
      content: 'function replace<T>(body: T, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - T
          description: 'The definition to replace the existing <xref:Item>''s defintion with.'
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |
            Additional options for the request, such as the partition key.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ItemResponse<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Item.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    name: Container
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
    name: ItemDefinition>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ItemResponse
        fullName: ItemResponse
        uid: '@azure/cosmos.ItemResponse'
      - name: <
        fullName: <
      - name: ItemDefinition
        fullName: ItemDefinition
        uid: '@azure/cosmos.ItemDefinition'
      - name: '>>'
        fullName: '>>'
  - uid: Promise<@azure/cosmos.ItemResponse<T>>
    name: ItemResponse<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ItemResponse
        fullName: ItemResponse
        uid: '@azure/cosmos.ItemResponse'
      - name: <T>>
        fullName: <T>>
  - uid: '@azure/cosmos.ItemDefinition'
    name: ItemDefinition
    spec.typeScript:
      - name: ItemDefinition
        fullName: ItemDefinition
        uid: '@azure/cosmos.ItemDefinition'
