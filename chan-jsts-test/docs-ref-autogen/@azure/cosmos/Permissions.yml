### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Permissions'
    name: Permissions
    fullName: Permissions
    children:
      - '@azure/cosmos.Permissions.create'
      - '@azure/cosmos.Permissions.query'
      - '@azure/cosmos.Permissions.query_1'
      - '@azure/cosmos.Permissions.readAll'
      - '@azure/cosmos.Permissions.upsert'
      - '@azure/cosmos.Permissions.user'
    langs:
      - typeScript
    type: class
    summary: 'Use to create, replace, query, and read all Permissions.'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.create'
    name: 'create(PermissionDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a permission.

      A permission represents a per-User Permission to access a specific
      resource

      e.g. Item or Container.
    syntax:
      content: 'function create(body: PermissionDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.PermissionDefinition'
          description: |
            Represents the body of the permission.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.PermissionResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.query'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all permissions.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.query_1'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all permissions.
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Read all permissions.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.PermissionDefinition &
            @azure/cosmos.Resource>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.upsert'
    name: 'upsert(PermissionDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Upsert a permission.
      A permission represents a per-User Permission to access a
      specific resource e.g. Item or Cotnainer.
    syntax:
      content: 'function upsert(body: PermissionDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.PermissionDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.PermissionResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Permissions.user'
    name: user
    fullName: user
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'user: User'
      return:
        type:
          - '@azure/cosmos.User'
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.User'
    name: User
    spec.typeScript:
      - name: User
        fullName: User
        uid: '@azure/cosmos.User'
  - uid: '@azure/cosmos.PermissionDefinition'
    name: PermissionDefinition
    spec.typeScript:
      - name: PermissionDefinition
        fullName: PermissionDefinition
        uid: '@azure/cosmos.PermissionDefinition'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.PermissionResponse>
    name: PermissionResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PermissionResponse
        fullName: PermissionResponse
        uid: '@azure/cosmos.PermissionResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.SqlQuerySpec'
    name: SqlQuerySpec
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.PermissionDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: PermissionDefinition
        fullName: PermissionDefinition
        uid: '@azure/cosmos.PermissionDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
