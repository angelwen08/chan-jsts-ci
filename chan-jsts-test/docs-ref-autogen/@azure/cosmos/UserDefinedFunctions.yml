### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.UserDefinedFunctions'
    name: UserDefinedFunctions
    fullName: UserDefinedFunctions
    children:
      - '@azure/cosmos.UserDefinedFunctions.container'
      - '@azure/cosmos.UserDefinedFunctions.create'
      - '@azure/cosmos.UserDefinedFunctions.query'
      - '@azure/cosmos.UserDefinedFunctions.query_1'
      - '@azure/cosmos.UserDefinedFunctions.readAll'
      - '@azure/cosmos.UserDefinedFunctions.upsert'
    langs:
      - typeScript
    type: class
    summary: 'Used to create, upsert, query, or read all User Defined Functions.'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.create'
    name: 'create(UserDefinedFunctionDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >+
      Create a UserDefinedFunction.

      Azure Cosmos DB supports JavaScript UDFs which can be used inside queries,
      stored procedures and triggers.


      For additional details, refer to the server-side JavaScript API
      documentation.

    syntax:
      content: >-
        function create(body: UserDefinedFunctionDefinition, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.UserDefinedFunctionDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.UserDefinedFunctionResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.query'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all User Defined Functions.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.query_1'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all User Defined Functions.
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: |+

          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Read all User Defined Functions.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.UserDefinedFunctionDefinition
            & @azure/cosmos.Resource>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.UserDefinedFunctions.upsert'
    name: 'upsert(UserDefinedFunctionDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >+
      Upsert a UserDefinedFunction.

      Azure Cosmos DB supports JavaScript UDFs which can be used inside queries,
      stored procedures and triggers.


      For additional details, refer to the server-side JavaScript API
      documentation.

    syntax:
      content: >-
        function upsert(body: UserDefinedFunctionDefinition, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.UserDefinedFunctionDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.UserDefinedFunctionResponse>
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    name: Container
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.UserDefinedFunctionDefinition'
    name: UserDefinedFunctionDefinition
    spec.typeScript:
      - name: UserDefinedFunctionDefinition
        fullName: UserDefinedFunctionDefinition
        uid: '@azure/cosmos.UserDefinedFunctionDefinition'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.UserDefinedFunctionResponse>
    name: UserDefinedFunctionResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: UserDefinedFunctionResponse
        fullName: UserDefinedFunctionResponse
        uid: '@azure/cosmos.UserDefinedFunctionResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.SqlQuerySpec'
    name: SqlQuerySpec
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.UserDefinedFunctionDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: UserDefinedFunctionDefinition
        fullName: UserDefinedFunctionDefinition
        uid: '@azure/cosmos.UserDefinedFunctionDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
