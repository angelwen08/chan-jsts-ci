### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Conflicts'
    name: Conflicts
    fullName: Conflicts
    children:
      - '@azure/cosmos.Conflicts.constructor'
      - '@azure/cosmos.Conflicts.container'
      - '@azure/cosmos.Conflicts.query'
      - '@azure/cosmos.Conflicts.query_1'
      - '@azure/cosmos.Conflicts.readAll'
    langs:
      - typeScript
    type: class
    summary: Use to query or read all conflicts.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.constructor'
    name: 'Conflicts(Container, ClientContext)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Conflicts(container: Container, clientContext: ClientContext)'
      parameters:
        - id: container
          type:
            - '@azure/cosmos.Container'
          description: ''
        - id: clientContext
          type:
            - ClientContext
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.query'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all conflicts.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.query_1'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all conflicts.
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads all conflicts
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition &
            @azure/cosmos.Resource>
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    name: Container
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.SqlQuerySpec'
    name: SqlQuerySpec
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: ConflictDefinition
        fullName: ConflictDefinition
        uid: '@azure/cosmos.ConflictDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
