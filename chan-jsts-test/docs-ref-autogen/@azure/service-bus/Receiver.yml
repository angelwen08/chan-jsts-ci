### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: >-
      The Receiver class can be used to receive messages in a batch or by
      registering handlers.

      Use the `createReceiver` function on the QueueClient or SubscriptionClient
      to instantiate a Receiver.

      The Receiver class is an abstraction over the underlying AMQP receiver
      link.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the underlying AMQP receiver link.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver` function on the QueueClient or SubscriptionClient
      to instantiate

      a new Receiver
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets an async iterator over messages from the receiver.

      While iterating, you will get `undefined` instead of a message, if the
      iterator is not able to

      fetch a new message in over a minute.
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Returns `true` if either the receiver or the client that created it has
      been closed
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Indicates whether the receiver is currently receiving messages or not.

      When this returns true, new `registerMessageHandler()` or
      `receiveMessages()` calls cannot be made.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to a deferred message identified by the
      given `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: The sequence number of the message that needs to be received.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: >-
            An array of sequence numbers for the messages that need to be
            received.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to an array of messages based on given
      count and timeout over

      an AMQP receiver link from a Queue/Subscription.
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?:
        undefined | number)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: >-
            The maximum wait time in seconds for which the Receiver

            should wait to receive the first message. If no message is received
            by this time,

            the returned promise gets resolved to an empty array.

            - **Default**: `60` seconds.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Denotes receiveMode of this receiver.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the Receiver or set the
      property

      `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.
    syntax:
      content: >-
        function registerMessageHandler(onMessage: OnMessage, onError: OnError,
        options?: MessageHandlerOptions)
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler for processing each incoming message.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: >
            Options to control if messages should be automatically completed,
            and/or have

            their locks automatically renewed. You can control the maximum
            number of messages that should

            be concurrently processed. You can also provide a timeout in seconds
            to denote the

            amount of time to wait for a new message before closing the
            receiver.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Renews the lock on the message for the duration as specified during the
      Queue/Subscription

      creation.

      - Check the `lockedUntilUtc` property on the message for the time when the
      lock expires.

      - If a message is not settled (using either `complete()`, `defer()` or
      `deadletter()`,

      before its lock expires, then the message lands back in the
      Queue/Subscription for the next

      receive operation.
    syntax:
      content: >-
        function renewMessageLock(lockTokenOrMessage: string |
        ServiceBusMessage)
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: The `lockToken` property of the message or the message itself.
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
