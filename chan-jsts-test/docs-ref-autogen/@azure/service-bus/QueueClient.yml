### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.QueueClient'
    name: QueueClient
    fullName: QueueClient
    children:
      - '@azure/service-bus.QueueClient.close'
      - '@azure/service-bus.QueueClient.createReceiver'
      - '@azure/service-bus.QueueClient.createReceiver_1'
      - '@azure/service-bus.QueueClient.createSender'
      - '@azure/service-bus.QueueClient.entityPath'
      - '@azure/service-bus.QueueClient.getDeadLetterQueuePath'
      - '@azure/service-bus.QueueClient.id'
      - '@azure/service-bus.QueueClient.peek'
      - '@azure/service-bus.QueueClient.peekBySequenceNumber'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the client that allows interacting with a Service Bus Queue.

      Use the `createQueueClient` function on the ServiceBusClient object to
      instantiate a QueueClient
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes all the AMQP links for sender/receivers created by this client.

      Once closed, neither the QueueClient nor its sender/receivers can be used
      for any

      further operations.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createReceiver'
    name: createReceiver(ReceiveMode)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Receiver for receiving messages from a Queue which does not have
      sessions enabled.

      - Throws error if an open receiver already exists for this QueueClient.

      - Throws error if the Queue has sessions enabled.
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: >
            An enum indicating the mode in which messages should be received.
            Possible

            values are:

            - `ReceiveMode.peekLock`: Once a message is received in this mode,
            the receiver has a lock on

            the message for a particular duration. If the message is not settled
            by this time, it lands back

            on Service Bus to be fetched by the next receive operation.

            - `ReceiveMode.receiveAndDelete`: Messages received in this mode get
            automatically removed from

            Service Bus.
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createReceiver_1'
    name: 'createReceiver(ReceiveMode, SessionReceiverOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Receiver for receiving messages from a session enabled Queue.
      When no sessionId is

      given, a random session among the available sessions is used.

      - Throws error if an open receiver already exists for given sessionId.

      - Throws error if the Queue does not have sessions enabled.
    syntax:
      content: >-
        function createReceiver(receiveMode: ReceiveMode, sessionOptions:
        SessionReceiverOptions)
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: >-
            An enum indicating the mode in which messages should be received.
            Possible

            values are:

            - `ReceiveMode.peekLock`: Once a message is received in this mode,
            the receiver has a lock on

            the message for a particular duration. If the message is not settled
            by this time, it lands back

            on Service Bus to be fetched by the next receive operation.

            - `ReceiveMode.receiveAndDelete`: Messages received in this mode get
            automatically removed from

            Service Bus.
        - id: sessionOptions
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: >
            Options to provide sessionId and duration of automatic lock renewal
            for

            the session receiver.
      return:
        type:
          - '@azure/service-bus.SessionReceiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createSender'
    name: createSender()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Sender to be used for sending messages, scheduling messages to
      be sent at a later time

      and cancelling such scheduled messages.

      - Throws error if an open sender already exists for this QueueClient.
    syntax:
      content: function createSender()
      parameters: []
      return:
        type:
          - '@azure/service-bus.Sender'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: The path for the Service Bus Queue for which this client is created.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.getDeadLetterQueuePath'
    name: getDeadLetterQueuePath(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the corresponding dead letter queue name for the queue represented
      by the given name.

      Use this in the `createQueueClient` function on the `ServiceBusClient`
      instance to receive

      messages from a dead letter queue.
    syntax:
      content: 'static function getDeadLetterQueuePath(queueName: string)'
      parameters:
        - id: queueName
          type:
            - string
          description: >
            Name of the queue whose dead letter counterpart's name is being
            fetched
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: A unique identifier for this client.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages).

      - The first call to `peek()` fetches the first active message. Each
      subsequent call fetches the

      subsequent message.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number.

      - Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long,
        maxMessageCount?: undefined | number)
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: The sequence number from where to read the message.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
  - uid: '@azure/service-bus.Sender'
    name: Sender
    spec.typeScript:
      - name: Sender
        fullName: Sender
        uid: '@azure/service-bus.Sender'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
