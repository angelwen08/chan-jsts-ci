### YamlMime:UniversalReference
items:
  - uid: '@aspnet/signalr.HubConnection'
    name: HubConnection
    fullName: HubConnection
    children:
      - '@aspnet/signalr.HubConnection.invoke'
      - '@aspnet/signalr.HubConnection.off'
      - '@aspnet/signalr.HubConnection.off_1'
      - '@aspnet/signalr.HubConnection.on'
      - '@aspnet/signalr.HubConnection.onclose'
      - '@aspnet/signalr.HubConnection.send'
      - '@aspnet/signalr.HubConnection.serverTimeoutInMilliseconds'
      - '@aspnet/signalr.HubConnection.start'
      - '@aspnet/signalr.HubConnection.stop'
      - '@aspnet/signalr.HubConnection.stream'
    langs:
      - typeScript
    type: class
    summary: Represents a connection to a SignalR Hub.
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.invoke'
    name: invoke
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Invokes a hub method on the server using the specified name and arguments.

      The Promise returned by this method resolves when the server indicates it
      has finished invoking the method. When the promise

      resolves, the server has finished invoking the method. If the server
      method returns a result, it is produced as the result of

      resolving the Promise.
    syntax:
      content: 'function invoke<T>(methodName: string, args: any[])'
      parameters:
        - id: methodName
          type:
            - string
          description: The name of the server method to invoke.
        - id: args
          type:
            - 'any[]'
          description: The arguments used to invoke the server method.
      return:
        type:
          - Promise<T>
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.off'
    name: 'off'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes all handlers for the specified hub method.
    syntax:
      content: 'function off(methodName: string)'
      parameters:
        - id: methodName
          type:
            - string
          description: |
            The name of the method to remove handlers for.
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.off_1'
    name: 'off'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the specified handler for the specified hub method.

      You must pass the exact same Function instance as was previously passed to
      <xref:on>. Passing a different instance (even if the function

      body is the same) will not remove the handler.
    syntax:
      content: 'function off(methodName: string, method: (args: any[]) => void)'
      parameters:
        - id: methodName
          type:
            - string
          description: The name of the method to remove handlers for.
        - id: method
          type:
            - '(args: any[]) => void'
          description: >
            The handler to remove. This must be the same Function instance as
            the one passed to <xref:on>.
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.on'
    name: 'on'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler that will be invoked when the hub method with the
      specified method name is invoked.
    syntax:
      content: 'function on(methodName: string, newMethod: (args: any[]) => void)'
      parameters:
        - id: methodName
          type:
            - string
          description: The name of the hub method to define.
        - id: newMethod
          type:
            - '(args: any[]) => void'
          description: |
            The handler that will be raised when the hub method is invoked.
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.onclose'
    name: onclose
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers a handler that will be invoked when the connection is closed.
    syntax:
      content: 'function onclose(callback: (error?: Error) => void)'
      parameters:
        - id: callback
          type:
            - '(error?: Error) => void'
          description: >
            The handler that will be invoked when the connection is closed.
            Optionally receives a single argument containing the error that
            caused the connection to close (if any).
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.send'
    name: send
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Invokes a hub method on the server using the specified name and arguments.
      Does not wait for a response from the receiver.

      The Promise returned by this method resolves when the client has sent the
      invocation to the server. The server may still

      be processing the invocation.
    syntax:
      content: 'function send(methodName: string, args: any[])'
      parameters:
        - id: methodName
          type:
            - string
          description: The name of the server method to invoke.
        - id: args
          type:
            - 'any[]'
          description: The arguments used to invoke the server method.
      return:
        type:
          - Promise<void>
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.serverTimeoutInMilliseconds'
    name: serverTimeoutInMilliseconds
    fullName: serverTimeoutInMilliseconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      The server timeout in milliseconds.

      If this timeout elapses without receiving any messages from the server,
      the connection will be terminated with an error.

      The default timeout value is 30,000 milliseconds (30 seconds).
    syntax:
      content: 'serverTimeoutInMilliseconds: number'
      return:
        type:
          - number
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.start'
    name: start
    children: []
    type: method
    langs:
      - typeScript
    summary: Starts the connection.
    syntax:
      content: function start()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.stop'
    name: stop
    children: []
    type: method
    langs:
      - typeScript
    summary: Stops the connection.
    syntax:
      content: function stop()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@aspnet/signalr'
  - uid: '@aspnet/signalr.HubConnection.stream'
    name: stream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Invokes a streaming hub method on the server using the specified name and
      arguments.
    syntax:
      content: 'function stream<T>(methodName: string, args: any[])'
      parameters:
        - id: methodName
          type:
            - string
          description: The name of the server method to invoke.
        - id: args
          type:
            - 'any[]'
          description: The arguments used to invoke the server method.
      return:
        type:
          - '@aspnet/signalr.IStreamResult<T>'
    package: '@aspnet/signalr'
references:
  - uid: '@aspnet/signalr.IStreamResult<T>'
    spec.typeScript:
      - name: IStreamResult
        fullName: IStreamResult
        uid: '@aspnet/signalr.IStreamResult'
      - name: <T>
        fullName: <T>
