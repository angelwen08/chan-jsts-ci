### YamlMime:UniversalReference
items:
  - uid: botbuilder-core-extensions.BotStateSet
    name: BotStateSet
    fullName: BotStateSet
    children:
      - botbuilder-core-extensions.BotStateSet.constructor
      - botbuilder-core-extensions.BotStateSet.onTurn
      - botbuilder-core-extensions.BotStateSet.readAll
      - botbuilder-core-extensions.BotStateSet.use
      - botbuilder-core-extensions.BotStateSet.writeAll
    langs:
      - typeScript
    type: class
    summary: >-
      Middleware that will call `read()` and `write()` in parallel on multiple
      `BotState`

      instances.
    package: botbuilder-core-extensions
    remarks: >-
      This example shows boilerplate code for reading and writing conversation
      and user state within

      a bot:


      ```JavaScript

      const { BotStateSet, ConversationState, UserState, MemoryStorage } =
      require('botbuilder');


      const storage = new MemoryStorage();

      const conversationState = new ConversationState(storage);

      const userState = new UserState(storage);

      adapter.use(new BotStateSet(conversationState, userState));


      server.post('/api/messages', (req, res) => {
         adapter.processActivity(req, res, async (context) => {
            // Get state
            const convo = conversationState.get(context);
            const user = userState.get(context);

            // ... route activity ...

         });
      });

      ```
  - uid: botbuilder-core-extensions.BotStateSet.constructor
    name: BotStateSet
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotStateSet instance.
    syntax:
      content: 'new BotStateSet(middleware: BotState[])'
      parameters:
        - id: middleware
          type:
            - 'botbuilder-core-extensions.BotState[]'
          description: |
            Zero or more BotState plugins to register.
    package: botbuilder-core-extensions
  - uid: botbuilder-core-extensions.BotStateSet.onTurn
    name: onTurn
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onTurn(context: TurnContext, next: () => Promise<void>)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: next
          type:
            - () => Promise<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: botbuilder-core-extensions
  - uid: botbuilder-core-extensions.BotStateSet.readAll
    name: readAll
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls `BotState.read()` on all of the BotState plugins in the set.
    syntax:
      content: 'function readAll(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) If `true` the cache will be bypassed and the state will
            always be read in directly from storage. Defaults to `false`.
          optional: true
      return:
        type:
          - 'Promise<botbuilder-core-extensions.StoreItem[]>'
    package: botbuilder-core-extensions
    remarks: |-
      This will trigger all of the plugins to read in their state in parallel.

      ```JavaScript
      await stateSet.readAll(context);
      ```
  - uid: botbuilder-core-extensions.BotStateSet.use
    name: use
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers `BotState` middleware plugins with the set.
    syntax:
      content: 'function use(middleware: BotState[])'
      parameters:
        - id: middleware
          type:
            - 'botbuilder-core-extensions.BotState[]'
          description: |
            One or more BotState plugins to register.
      return:
        type:
          - this
    package: botbuilder-core-extensions
  - uid: botbuilder-core-extensions.BotStateSet.writeAll
    name: writeAll
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls `BotState.write()` on all of the BotState plugins in the set.
    syntax:
      content: 'function writeAll(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) if `true` the state will always be written out regardless
            of its change state. Defaults to `false`.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder-core-extensions
    remarks: |-
      This will trigger all of the plugins to write out their state in parallel.

      ```JavaScript
      await stateSet.writeAll(context);
      ```
references:
  - uid: 'botbuilder-core-extensions.BotState[]'
    spec.typeScript:
      - name: BotState
        fullName: BotState
        uid: botbuilder-core-extensions.BotState
      - name: '[]'
        fullName: '[]'
  - uid: 'Promise<botbuilder-core-extensions.StoreItem[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: StoreItem
        fullName: StoreItem
        uid: botbuilder-core-extensions.StoreItem
      - name: '[]>'
        fullName: '[]>'
