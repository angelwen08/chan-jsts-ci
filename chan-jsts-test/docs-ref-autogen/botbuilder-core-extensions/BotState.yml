### YamlMime:UniversalReference
items:
  - uid: botbuilder-core-extensions.BotState
    name: BotState
    fullName: BotState<T>
    children:
      - botbuilder-core-extensions.BotState.constructor
      - botbuilder-core-extensions.BotState.clear
      - botbuilder-core-extensions.BotState.get
      - botbuilder-core-extensions.BotState.onTurn
      - botbuilder-core-extensions.BotState.read
      - botbuilder-core-extensions.BotState.write
    langs:
      - typeScript
    type: class
    summary: Reads and writes state for your bot to storage.
    package: botbuilder-core-extensions
    remarks: >-
      The state object will be automatically cached on the context object for
      the lifetime of the turn

      and will only be written to storage if it has been modified.


      When a `BotState` instance is used as middleware its state object will be
      automatically read in

      before your bots logic runs and then intelligently written back out upon
      completion of your bots

      logic. Multiple instances can be read and written in parallel using the
      `BotStateSet` middleware.


      ```JavaScript

      const { BotState, MemoryStorage } = require('botbuilder');


      const storage = new MemoryStorage();

      const botState = new BotState(storage, (context) => 'botState');

      adapter.use(botState);


      server.post('/api/messages', (req, res) => {
         adapter.processActivity(req, res, async (context) => {
            // Track up time
            const state = botState.get(context);
            if (!('startTime' in state)) { state.startTime = new Date().getTime() }
            state.upTime = new Date().getTime() - state.stateTime;

            // ... route activity ...

         });
      });

      ```
  - uid: botbuilder-core-extensions.BotState.constructor
    name: BotState
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotState instance.
    syntax:
      content: 'new BotState(storage: Storage, storageKey: StorageKeyFactory)'
      parameters:
        - id: storage
          type:
            - botbuilder-core-extensions.Storage
          description: Storage provider to persist the state object to.
        - id: storageKey
          type:
            - botbuilder-core-extensions.StorageKeyFactory
          description: >
            Function called anytime the storage key for a given turn needs to be
            calculated.
    package: botbuilder-core-extensions
  - uid: botbuilder-core-extensions.BotState.clear
    name: clear
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the current state object for a turn.
    syntax:
      content: 'function clear(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for current turn of conversation with the user.
    package: botbuilder-core-extensions
    remarks: |-
      This example shows how to clear a state object:

      ```JavaScript
      botState.clear(context);
      ```
  - uid: botbuilder-core-extensions.BotState.get
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a cached state object or undefined if not cached.
    syntax:
      content: 'function get(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for current turn of conversation with the user.
      return:
        type:
          - T | undefined
    package: botbuilder-core-extensions
    remarks: >-
      This example shows how to synchronously get an already loaded and cached
      state object:


      ```JavaScript

      const state botState.get(context);

      ```
  - uid: botbuilder-core-extensions.BotState.onTurn
    name: onTurn
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onTurn(context: TurnContext, next: () => Promise<void>)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: next
          type:
            - () => Promise<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: botbuilder-core-extensions
  - uid: botbuilder-core-extensions.BotState.read
    name: read
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads in and caches the current state object for a turn.
    syntax:
      content: 'function read(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) If `true` the cache will be bypassed and the state will
            always be read in directly from storage. Defaults to `false`.
          optional: true
      return:
        type:
          - Promise<T>
    package: botbuilder-core-extensions
    remarks: >-
      Subsequent reads will return the cached object unless the `force` flag is
      passed in which

      will force the state object to be re-read.


      ```JavaScript

      const state = await botState.read(context);

      ```
  - uid: botbuilder-core-extensions.BotState.write
    name: write
    children: []
    type: method
    langs:
      - typeScript
    summary: Saves the cached state object if it's been changed.
    syntax:
      content: 'function write(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) if `true` the state will always be written out regardless
            of its change state. Defaults to `false`.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder-core-extensions
    remarks: >-
      If the `force` flag is passed in the cached state object will be saved
      regardless of

      whether its been changed or not and if no object has been cached, an empty
      object will be

      created and then saved.


      ```JavaScript

      await botState.write(context);

      ```
references:
  - uid: botbuilder-core-extensions.Storage
    spec.typeScript:
      - name: Storage
        fullName: Storage
        uid: botbuilder-core-extensions.Storage
  - uid: botbuilder-core-extensions.StorageKeyFactory
    spec.typeScript:
      - name: StorageKeyFactory
        fullName: StorageKeyFactory
        uid: botbuilder-core-extensions.StorageKeyFactory
