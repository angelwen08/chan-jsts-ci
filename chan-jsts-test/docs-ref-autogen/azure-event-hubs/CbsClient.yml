### YamlMime:UniversalReference
items:
  - uid: azure-event-hubs.CbsClient
    name: CbsClient
    fullName: CbsClient
    children:
      - azure-event-hubs.CbsClient.constructor
      - azure-event-hubs.CbsClient.cbsLock
      - azure-event-hubs.CbsClient.close
      - azure-event-hubs.CbsClient.connection
      - azure-event-hubs.CbsClient.connectionLock
      - azure-event-hubs.CbsClient.endpoint
      - azure-event-hubs.CbsClient.init
      - azure-event-hubs.CbsClient.negotiateClaim
      - azure-event-hubs.CbsClient.replyTo
    langs:
      - typeScript
    type: class
    summary: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.constructor
    name: CbsClient
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new CbsClient(connection: Connection, connectionLock: string)'
      parameters:
        - id: connection
          type:
            - azure-event-hubs.Connection
          description: The AMQP conection.
        - id: connectionLock
          type:
            - string
          description: |
            A unique string (usually a guid) per connection.
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.cbsLock
    name: cbsLock
    fullName: cbsLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} cbsLock The unqiue lock name per $cbs session per connection that
      is used to

      acquire the lock for establishing a cbs session if one does not exist for
      an aqmp connection.
    syntax:
      content: 'cbsLock: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.close
    name: close
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP cbs session to the EventHub/ServiceBus for this client,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.connection
    name: connection
    fullName: connection
    children: []
    langs:
      - typeScript
    type: property
    summary: '{Connection} connection The AMQP connection.'
    syntax:
      content: 'connection: Connection'
      return:
        type:
          - azure-event-hubs.Connection
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.connectionLock
    name: connectionLock
    fullName: connectionLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} connectionLock The unqiue lock name per connection that is used
      to

      acquire the lock for establishing an amqp connection if one does not
      exist.
    syntax:
      content: 'connectionLock: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.endpoint
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} endpoint CBS endpoint - "$cbs"'
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.init
    name: init
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a singleton instance of the CBS session if it hasn't been
      initialized previously on

      the given connection.
    syntax:
      content: function init()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.negotiateClaim
    name: negotiateClaim
    children: []
    type: method
    langs:
      - typeScript
    summary: Negotiates the CBS claim with the EventHub/ServiceBus Service.
    syntax:
      content: 'function negotiateClaim(audience: string, tokenObject: TokenInfo)'
      parameters:
        - id: audience
          type:
            - string
          description: The audience for which the token is requested.
        - id: tokenObject
          type:
            - azure-event-hubs.TokenInfo
          description: The token object that needs to be sent in the put-token request.
      return:
        type:
          - Promise<any>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.replyTo
    name: replyTo
    fullName: replyTo
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} replyTo CBS replyTo - The reciever link name that the service
      should reply to.
    syntax:
      content: 'replyTo: string'
      return:
        type:
          - string
    package: azure-event-hubs
references:
  - uid: azure-event-hubs.Connection
    name: Connection
    spec.typeScript:
      - name: Connection
        fullName: Connection
        uid: azure-event-hubs.Connection
  - uid: azure-event-hubs.TokenInfo
    name: TokenInfo
    spec.typeScript:
      - name: TokenInfo
        fullName: TokenInfo
        uid: azure-event-hubs.TokenInfo
