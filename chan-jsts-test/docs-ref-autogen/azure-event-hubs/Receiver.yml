### YamlMime:UniversalReference
items:
  - uid: azure-event-hubs.Receiver
    name: Receiver
    fullName: Receiver
    children:
      - azure-event-hubs.Receiver.addCredit
      - azure-event-hubs.Receiver.address
      - azure-event-hubs.Receiver.close
      - azure-event-hubs.Receiver.connection
      - azure-event-hubs.Receiver.drain
      - azure-event-hubs.Receiver.error
      - azure-event-hubs.Receiver.isClosed
      - azure-event-hubs.Receiver.isItselfClosed
      - azure-event-hubs.Receiver.isOpen
      - azure-event-hubs.Receiver.isSessionClosed
      - azure-event-hubs.Receiver.isSessionItselfClosed
      - azure-event-hubs.Receiver.name
      - azure-event-hubs.Receiver.properties
      - azure-event-hubs.Receiver.constructor
      - azure-event-hubs.Receiver.receiverOptions
      - azure-event-hubs.Receiver.registerHandler
      - azure-event-hubs.Receiver.registerSessionHandler
      - azure-event-hubs.Receiver.remove
      - azure-event-hubs.Receiver.removeHandler
      - azure-event-hubs.Receiver.removeSessionHandler
      - azure-event-hubs.Receiver.session
      - azure-event-hubs.Receiver.setCreditWindow
      - azure-event-hubs.Receiver.source
      - azure-event-hubs.Receiver.target
    langs:
      - typeScript
    type: class
    summary: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.addCredit
    name: addCredit
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addCredit(credit: number)'
      parameters:
        - id: credit
          type:
            - number
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.address
    name: address
    fullName: address
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'address: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.close
    name: close
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the amqp receiver.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.connection
    name: connection
    fullName: connection
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'connection: Connection'
      return:
        type:
          - azure-event-hubs.Connection
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.drain
    name: drain
    fullName: drain
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'drain: boolean'
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.error
    name: error
    fullName: error
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'error: AmqpError | Error | undefined'
      return:
        type:
          - AmqpError | Error | undefined
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.isClosed
    name: isClosed
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether both local and remote endpoint for link or it's
      underlying session

      or it's underlying connection are closed.

      Within the "receiver_close", "session_close" event handler, if this

      method returns `false` it means that the local end is still open. It can
      be useful to

      determine whether the close was initiated locally under such
      circumstances.
    syntax:
      content: function isClosed()
      parameters: []
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.isItselfClosed
    name: isItselfClosed
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether both local and remote endpoint for just the link itself
      are closed.

      Within the "receiver_close" event handler, if this method returns `false`
      it

      means that the local end is still open. It can be useful to determine
      whether the close

      was initiated locally under such circumstances.
    syntax:
      content: function isItselfClosed()
      parameters: []
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.isOpen
    name: isOpen
    children: []
    type: method
    langs:
      - typeScript
    summary: Determines whether the receiver link is open.
    syntax:
      content: function isOpen()
      parameters: []
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.isSessionClosed
    name: isSessionClosed
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Determines whether both local and remote endpoint for session or it's
      underlying

      connection are closed.

      Within the "session_close" event handler, if this method returns `false`
      it means that

      the local end is still open. It can be useful to determine whether the
      close

      was initiated locally under such circumstances.
    syntax:
      content: function isSessionClosed()
      parameters: []
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.isSessionItselfClosed
    name: isSessionItselfClosed
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether both local and remote endpoint for just the session
      itself are closed.

      Within the "session_close" event handler, if this method returns `false`
      it means that

      the local end is still open. It can be useful to determine whether the
      close

      was initiated locally under such circumstances.
    syntax:
      content: function isSessionItselfClosed()
      parameters: []
      return:
        type:
          - boolean
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.name
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'name: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.properties
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'properties: Dictionary<any>'
      return:
        type:
          - Dictionary<any>
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.constructor
    name: Receiver
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Receiver(session: Session, receiver: Receiver, options?:
        ReceiverOptions)
      parameters:
        - id: session
          type:
            - azure-event-hubs.Session
          description: ''
        - id: receiver
          type:
            - Receiver
          description: ''
        - id: options
          type:
            - azure-event-hubs.ReceiverOptions
          description: ''
          optional: true
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.receiverOptions
    name: receiverOptions
    fullName: receiverOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'receiverOptions?: ReceiverOptions'
      return:
        type:
          - azure-event-hubs.ReceiverOptions
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.registerHandler
    name: registerHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function registerHandler(event: ReceiverEvents, handler:
        rhea.OnAmqpEvent)
      parameters:
        - id: event
          type:
            - ReceiverEvents
          description: ''
        - id: handler
          type:
            - rhea.OnAmqpEvent
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.registerSessionHandler
    name: registerSessionHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function registerSessionHandler(event: SessionEvents, handler:
        rhea.OnAmqpEvent)
      parameters:
        - id: event
          type:
            - SessionEvents
          description: ''
        - id: handler
          type:
            - rhea.OnAmqpEvent
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.remove
    name: remove
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes the receiver and it's underlying session from the internal map.
    syntax:
      content: function remove()
      parameters: []
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.removeHandler
    name: removeHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeHandler(event: ReceiverEvents, handler: rhea.OnAmqpEvent)'
      parameters:
        - id: event
          type:
            - ReceiverEvents
          description: ''
        - id: handler
          type:
            - rhea.OnAmqpEvent
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.removeSessionHandler
    name: removeSessionHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeSessionHandler(event: SessionEvents, handler:
        rhea.OnAmqpEvent)
      parameters:
        - id: event
          type:
            - SessionEvents
          description: ''
        - id: handler
          type:
            - rhea.OnAmqpEvent
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.session
    name: session
    fullName: session
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'session: Session'
      return:
        type:
          - azure-event-hubs.Session
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.setCreditWindow
    name: setCreditWindow
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setCreditWindow(creditWindow: number)'
      parameters:
        - id: creditWindow
          type:
            - number
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.source
    name: source
    fullName: source
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'source: Source'
      return:
        type:
          - Source
    package: azure-event-hubs
  - uid: azure-event-hubs.Receiver.target
    name: target
    fullName: target
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'target: TerminusOptions'
      return:
        type:
          - TerminusOptions
    package: azure-event-hubs
references:
  - uid: azure-event-hubs.Session
    name: Session
    spec.typeScript:
      - name: Session
        fullName: Session
        uid: azure-event-hubs.Session
  - uid: azure-event-hubs.ReceiverOptions
    name: ReceiverOptions
    spec.typeScript:
      - name: ReceiverOptions
        fullName: ReceiverOptions
        uid: azure-event-hubs.ReceiverOptions
  - uid: azure-event-hubs.Connection
    name: Connection
    spec.typeScript:
      - name: Connection
        fullName: Connection
        uid: azure-event-hubs.Connection
