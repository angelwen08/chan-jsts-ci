### YamlMime:UniversalReference
items:
  - uid: '@azure/event-processor-host.EventProcessorHost'
    name: EventProcessorHost
    fullName: EventProcessorHost
    children:
      - '@azure/event-processor-host.EventProcessorHost.consumerGroup'
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromConnectionString
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager
      - '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
      - >-
        @azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager
      - '@azure/event-processor-host.EventProcessorHost.createHostName'
      - '@azure/event-processor-host.EventProcessorHost.constructor'
      - '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
      - '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
      - '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
      - '@azure/event-processor-host.EventProcessorHost.hostName'
      - '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
      - '@azure/event-processor-host.EventProcessorHost.start'
      - '@azure/event-processor-host.EventProcessorHost.stop'
    langs:
      - typeScript
    type: class
    summary: Describes the Event Processor Host to process events from an EventHub.
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.consumerGroup'
    name: consumerGroup
    fullName: consumerGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: Provides the consumer group name for the Event processor host.
    syntax:
      content: 'consumerGroup: string'
      return:
        type:
          - string
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentials
    name: >-
      createFromAadTokenCredentials(string, string, string, string, string,
      ApplicationTokenCredentials | UserTokenCredentials |
      DeviceTokenCredentials | MSITokenCredentials, FromTokenProviderOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventProcessorHost instance from AAD token credentials.
    syntax:
      content: >-
        static function createFromAadTokenCredentials(hostName: string,
        storageConnectionString: string, storageContainerName: string,
        namespace: string, eventHubPath: string, credentials:
        ApplicationTokenCredentials | UserTokenCredentials |
        DeviceTokenCredentials | MSITokenCredentials, options?:
        FromTokenProviderOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: storageContainerName
          type:
            - string
          description: |-
            Azure Storage container name for use by built-in lease
            and checkpoint manager.
        - id: namespace
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs.
            Example: "{your-sb-namespace}.servicebus.windows.net"
        - id: eventHubPath
          type:
            - string
          description: The name of the EventHub.
        - id: credentials
          type:
            - >-
              ApplicationTokenCredentials | UserTokenCredentials |
              DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the

            following: ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials

            | MSITokenCredentials.
        - id: options
          type:
            - '@azure/event-processor-host.FromTokenProviderOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager
    name: >-
      createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(string,
      string, string, ApplicationTokenCredentials | UserTokenCredentials |
      DeviceTokenCredentials | MSITokenCredentials, CheckpointManager,
      LeaseManager, FromTokenProviderOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an EventProcessorHost instance from AAD token credentials with the
      given checkpoint manager

      and lease manager.
    syntax:
      content: >-
        static function
        createFromAadTokenCredentialsWithCustomCheckpointAndLeaseManager(hostName:
        string, namespace: string, eventHubPath: string, credentials:
        ApplicationTokenCredentials | UserTokenCredentials |
        DeviceTokenCredentials | MSITokenCredentials, checkpointManager:
        CheckpointManager, leaseManager: LeaseManager, options?:
        FromTokenProviderOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: namespace
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs.
            Example: "{your-sb-namespace}.servicebus.windows.net"
        - id: eventHubPath
          type:
            - string
          description: The name of the EventHub.
        - id: credentials
          type:
            - >-
              ApplicationTokenCredentials | UserTokenCredentials |
              DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the

            following: ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials

            | MSITokenCredentials.
        - id: checkpointManager
          type:
            - '@azure/event-processor-host.CheckpointManager'
          description: A manager to manage checkpoints.
        - id: leaseManager
          type:
            - '@azure/event-processor-host.LeaseManager'
          description: A manager to manage leases.
        - id: options
          type:
            - '@azure/event-processor-host.FromTokenProviderOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.createFromConnectionString'
    name: >-
      createFromConnectionString(string, string, string, string,
      FromConnectionStringOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an EventProcessorHost instance from the EventHub connection
      string.
    syntax:
      content: >-
        static function createFromConnectionString(hostName: string,
        storageConnectionString: string, storageContainerName: string,
        eventHubConnectionString: string, options?: FromConnectionStringOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: storageContainerName
          type:
            - string
          description: |-
            Azure Storage container name for use by built-in lease
            and checkpoint manager.
        - id: eventHubConnectionString
          type:
            - string
          description: >-
            Connection string for the Event Hub to receive from.

            Example:
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;

            SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - '@azure/event-processor-host.FromConnectionStringOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromConnectionStringWithCustomCheckpointAndLeaseManager
    name: >-
      createFromConnectionStringWithCustomCheckpointAndLeaseManager(string,
      string, CheckpointManager, LeaseManager, FromConnectionStringOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an EventProcessorHost instance from the EventHub connection string
      with the provided

      checkpoint manager and lease manager.
    syntax:
      content: >-
        static function
        createFromConnectionStringWithCustomCheckpointAndLeaseManager(hostName:
        string, eventHubConnectionString: string, checkpointManager:
        CheckpointManager, leaseManager: LeaseManager, options?:
        FromConnectionStringOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: eventHubConnectionString
          type:
            - string
          description: >-
            Connection string for the Event Hub to receive from.

            Example:
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;

            SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: checkpointManager
          type:
            - '@azure/event-processor-host.CheckpointManager'
          description: A manager to manage checkpoints.
        - id: leaseManager
          type:
            - '@azure/event-processor-host.LeaseManager'
          description: A manager to manage leases.
        - id: options
          type:
            - '@azure/event-processor-host.FromConnectionStringOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionString
    name: >-
      createFromIotHubConnectionString(string, string, string, string,
      FromIotHubConnectionStringOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventProcessorHost instance from the IotHub connection string.
    syntax:
      content: >-
        static function createFromIotHubConnectionString(hostName: string,
        storageConnectionString: string, storageContainerName: string,
        iotHubConnectionString: string, options?:
        FromIotHubConnectionStringOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: storageContainerName
          type:
            - string
          description: |-
            Azure Storage container name for use by built-in lease
            and checkpoint manager.
        - id: iotHubConnectionString
          type:
            - string
          description: >-
            Connection string for the IotHub.

            Example:
            'Endpoint=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-processor-host.EventProcessorHost>
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager
    name: >-
      createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(string,
      string, CheckpointManager, LeaseManager,
      FromIotHubConnectionStringOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an EventProcessorHost instance from the IotHub connection string
      with the given

      checkpoint manager and lease manager.
    syntax:
      content: >-
        static function
        createFromIotHubConnectionStringWithCustomCheckpointAndLeaseManager(hostName:
        string, iotHubConnectionString: string, checkpointManager:
        CheckpointManager, leaseManager: LeaseManager, options?:
        FromIotHubConnectionStringOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: iotHubConnectionString
          type:
            - string
          description: >-
            Connection string for the IotHub.

            Example:
            'Endpoint=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: checkpointManager
          type:
            - '@azure/event-processor-host.CheckpointManager'
          description: A manager to manage checkpoints.
        - id: leaseManager
          type:
            - '@azure/event-processor-host.LeaseManager'
          description: A manager to manage leases.
        - id: options
          type:
            - '@azure/event-processor-host.FromIotHubConnectionStringOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-processor-host.EventProcessorHost>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.createFromTokenProvider'
    name: >-
      createFromTokenProvider(string, string, string, string, string,
      TokenProvider, FromTokenProviderOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventProcessorHost instance from a TokenProvider.
    syntax:
      content: >-
        static function createFromTokenProvider(hostName: string,
        storageConnectionString: string, storageContainerName: string,
        namespace: string, eventHubPath: string, tokenProvider: TokenProvider,
        options?: FromTokenProviderOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: storageContainerName
          type:
            - string
          description: |-
            Azure Storage container name for use by built-in lease
            and checkpoint manager.
        - id: namespace
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs.
            Example: "{your-sb-namespace}.servicebus.windows.net"
        - id: eventHubPath
          type:
            - string
          description: The name of the EventHub.
        - id: tokenProvider
          type:
            - TokenProvider
          description: Your token provider that implements the TokenProvider interface.
        - id: options
          type:
            - '@azure/event-processor-host.FromTokenProviderOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.EventProcessorHost.createFromTokenProviderWithCustomCheckpointAndLeaseManager
    name: >-
      createFromTokenProviderWithCustomCheckpointAndLeaseManager(string, string,
      string, TokenProvider, CheckpointManager, LeaseManager,
      FromTokenProviderOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an EventProcessorHost instance from a TokenProvider with the
      provided checkpoint manager

      and lease manager.
    syntax:
      content: >-
        static function
        createFromTokenProviderWithCustomCheckpointAndLeaseManager(hostName:
        string, namespace: string, eventHubPath: string, tokenProvider:
        TokenProvider, checkpointManager: CheckpointManager, leaseManager:
        LeaseManager, options?: FromTokenProviderOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: namespace
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs.
            Example: "{your-sb-namespace}.servicebus.windows.net"
        - id: eventHubPath
          type:
            - string
          description: The name of the EventHub.
        - id: tokenProvider
          type:
            - TokenProvider
          description: Your token provider that implements the TokenProvider interface.
        - id: checkpointManager
          type:
            - '@azure/event-processor-host.CheckpointManager'
          description: A manager to manage checkpoints.
        - id: leaseManager
          type:
            - '@azure/event-processor-host.LeaseManager'
          description: A manager to manage leases.
        - id: options
          type:
            - '@azure/event-processor-host.FromTokenProviderOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-processor-host.EventProcessorHost'
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.createHostName'
    name: createHostName(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Convenience method for generating unique host name.
    syntax:
      content: 'static function createHostName(prefix?: undefined | string)'
      parameters:
        - id: prefix
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - string
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.constructor'
    name: 'EventProcessorHost(string, EventProcessorHostOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new host to process events from an Event Hub.
    syntax:
      content: >-
        new EventProcessorHost(hostName: string, options?:
        EventProcessorHostOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: options
          type:
            - '@azure/event-processor-host.EventProcessorHostOptions'
          description: ''
          optional: true
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.getHubRuntimeInformation'
    name: getHubRuntimeInformation()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the eventhub runtime information.
    syntax:
      content: function getHubRuntimeInformation()
      parameters: []
      return:
        type:
          - Promise<EventHubRuntimeInformation>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.getPartitionIds'
    name: getPartitionIds()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: function getPartitionIds()
      parameters: []
      return:
        type:
          - 'Promise<string[]>'
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.getPartitionInformation'
    name: getPartitionInformation(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: 'function getPartitionInformation(partitionId: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: |
            Partition ID for which partition information is required.
      return:
        type:
          - Promise<EventHubPartitionRuntimeInformation>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.hostName'
    name: hostName
    fullName: hostName
    children: []
    langs:
      - typeScript
    type: property
    summary: Provides the host name for the Event processor host.
    syntax:
      content: 'hostName: string'
      return:
        type:
          - string
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.receivingFromPartitions'
    name: receivingFromPartitions
    fullName: receivingFromPartitions
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Provides a list of partitions the EPH is currently receiving messages
      from.

      The EPH will try to grab leases for more partitions during each scan that
      happens once every

      (configured) lease renew seconds. The number of EPH instances that are
      being run

      simultaneously to receive messages from the same consumer group within an
      event hub also

      influences the number of partitions that this instance of EPH is actively
      receiving messages

      from.
    syntax:
      content: 'receivingFromPartitions: string[]'
      return:
        type:
          - 'string[]'
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.start'
    name: 'start(OnReceivedMessage, OnReceivedError)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts the event processor host, fetching the list of partitions, and
      attempting to grab leases

      For each successful lease, it will get the details from the blob and start
      a receiver at the

      point where it left off previously.
    syntax:
      content: 'function start(onMessage: OnReceivedMessage, onError: OnReceivedError)'
      parameters:
        - id: onMessage
          type:
            - '@azure/event-processor-host.OnReceivedMessage'
          description: ''
        - id: onError
          type:
            - '@azure/event-processor-host.OnReceivedError'
          description: ''
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.EventProcessorHost.stop'
    name: stop()
    children: []
    type: method
    langs:
      - typeScript
    summary: Stops the EventProcessorHost from processing messages.
    syntax:
      content: function stop()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
references:
  - uid: '@azure/event-processor-host.EventProcessorHostOptions'
    name: EventProcessorHostOptions
    spec.typeScript:
      - name: EventProcessorHostOptions
        fullName: EventProcessorHostOptions
        uid: '@azure/event-processor-host.EventProcessorHostOptions'
  - uid: '@azure/event-processor-host.OnReceivedMessage'
    name: OnReceivedMessage
    spec.typeScript:
      - name: OnReceivedMessage
        fullName: OnReceivedMessage
        uid: '@azure/event-processor-host.OnReceivedMessage'
  - uid: '@azure/event-processor-host.OnReceivedError'
    name: OnReceivedError
    spec.typeScript:
      - name: OnReceivedError
        fullName: OnReceivedError
        uid: '@azure/event-processor-host.OnReceivedError'
  - uid: '@azure/event-processor-host.FromTokenProviderOptions'
    name: FromTokenProviderOptions
    spec.typeScript:
      - name: FromTokenProviderOptions
        fullName: FromTokenProviderOptions
        uid: '@azure/event-processor-host.FromTokenProviderOptions'
  - uid: '@azure/event-processor-host.EventProcessorHost'
    name: EventProcessorHost
    spec.typeScript:
      - name: EventProcessorHost
        fullName: EventProcessorHost
        uid: '@azure/event-processor-host.EventProcessorHost'
  - uid: '@azure/event-processor-host.CheckpointManager'
    name: CheckpointManager
    spec.typeScript:
      - name: CheckpointManager
        fullName: CheckpointManager
        uid: '@azure/event-processor-host.CheckpointManager'
  - uid: '@azure/event-processor-host.LeaseManager'
    name: LeaseManager
    spec.typeScript:
      - name: LeaseManager
        fullName: LeaseManager
        uid: '@azure/event-processor-host.LeaseManager'
  - uid: '@azure/event-processor-host.FromConnectionStringOptions'
    name: FromConnectionStringOptions
    spec.typeScript:
      - name: FromConnectionStringOptions
        fullName: FromConnectionStringOptions
        uid: '@azure/event-processor-host.FromConnectionStringOptions'
  - uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
    name: FromIotHubConnectionStringOptions
    spec.typeScript:
      - name: FromIotHubConnectionStringOptions
        fullName: FromIotHubConnectionStringOptions
        uid: '@azure/event-processor-host.FromIotHubConnectionStringOptions'
  - uid: Promise<@azure/event-processor-host.EventProcessorHost>
    name: EventProcessorHost>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventProcessorHost
        fullName: EventProcessorHost
        uid: '@azure/event-processor-host.EventProcessorHost'
      - name: '>'
        fullName: '>'
