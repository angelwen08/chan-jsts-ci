### YamlMime:UniversalReference
items:
  - uid: '@azure/event-processor-host.CheckpointManager'
    name: CheckpointManager
    fullName: CheckpointManager
    children:
      - '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
      - >-
        @azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
      - >-
        @azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
      - '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
      - '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
      - '@azure/event-processor-host.CheckpointManager.getCheckpoint'
      - '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
    langs:
      - typeScript
    type: interface
    summary: ''
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
    name: checkpointStoreExists()
    children: []
    type: method
    langs:
      - typeScript
    summary: Does the checkpoint store exist?
    syntax:
      content: function checkpointStoreExists()
      parameters: []
      return:
        type:
          - Promise<boolean>
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
    name: 'createAllCheckpointsIfNotExists(string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates the checkpoint HOLDERs for the given partitions. Does nothing for
      any checkpoint

      HOLDERs that already exist.

      The semantics of this are complicated because it is possible to use the
      same store for both

      leases and checkpoints (the Azure Storage implementation does so) and it
      is required to

      have a lease for every partition but it is not required to have a
      checkpoint for a partition.

      It is a valid scenario to never use checkpoints at all, so it is important
      for the store to

      distinguish between creating the structure(s) that will hold a checkpoint
      and actually creating

      a checkpoint (storing an offset/sequence number pair in the structure).
    syntax:
      content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
      parameters:
        - id: partitionIds
          type:
            - 'string[]'
          description: List of partitions to create checkpoint HOLDERs for.
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
  - uid: >-
      @azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
    name: createCheckpointStoreIfNotExists()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create the checkpoint store if it doesn't exist. Does nothing if it
      exists.
    syntax:
      content: function createCheckpointStoreIfNotExists()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
    name: deleteCheckpoint(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete the stored checkpoint for the given partition. If there is no
      stored checkpoint for the

      given partition, that is treated as success. Deleting the checkpoint
      HOLDER is allowed

      but not required; your implementation is free to do whichever is more
      convenient.
    syntax:
      content: 'function deleteCheckpoint(partitionId: string)'
      parameters:
        - id: partitionId
          type:
            - string
          description: The partitionId to delete the checkpoint from the store.
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
    name: deleteCheckpointStore()
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the checkpoint store.
    syntax:
      content: function deleteCheckpointStore()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.CheckpointManager.getCheckpoint'
    name: getCheckpoint(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the checkpoint info associated with the given partition. Could return
      undefined if no

      checkpoint has been created for that partition.
    syntax:
      content: 'function getCheckpoint(partitionId: string)'
      parameters:
        - id: partitionId
          type:
            - string
          description: The partitionId to get the checkpoint info for.
      return:
        type:
          - Promise<@azure/event-processor-host.CheckpointInfo | undefined>
    package: '@azure/event-processor-host'
  - uid: '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
    name: 'updateCheckpoint(CompleteLease, CheckpointInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update the checkpoint in the store with the offset/sequenceNumber in the
      provided checkpoint.
    syntax:
      content: >-
        function updateCheckpoint(lease: CompleteLease, checkpoint:
        CheckpointInfo)
      parameters:
        - id: lease
          type:
            - '@azure/event-processor-host.CompleteLease'
          description: Partition information against which to perform a checkpoint.
        - id: checkpoint
          type:
            - '@azure/event-processor-host.CheckpointInfo'
          description: offset/sequeceNumber to update the store with
      return:
        type:
          - Promise<void>
    package: '@azure/event-processor-host'
references:
  - uid: Promise<@azure/event-processor-host.CheckpointInfo | undefined>
    name: CheckpointInfo | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CheckpointInfo
        fullName: CheckpointInfo
        uid: '@azure/event-processor-host.CheckpointInfo'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: '@azure/event-processor-host.CompleteLease'
    name: CompleteLease
    spec.typeScript:
      - name: CompleteLease
        fullName: CompleteLease
        uid: '@azure/event-processor-host.CompleteLease'
  - uid: '@azure/event-processor-host.CheckpointInfo'
    name: CheckpointInfo
    spec.typeScript:
      - name: CheckpointInfo
        fullName: CheckpointInfo
        uid: '@azure/event-processor-host.CheckpointInfo'
