### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.BotContext
    name: BotContext
    fullName: BotContext
    children:
      - botbuilder-core.BotContext.adapter
      - botbuilder-core.BotContext.applyConversationReference
      - botbuilder-core.BotContext.constructor
      - botbuilder-core.BotContext.constructor_1
      - botbuilder-core.BotContext.deleteActivity
      - botbuilder-core.BotContext.get
      - botbuilder-core.BotContext.getConversationReference
      - botbuilder-core.BotContext.has
      - botbuilder-core.BotContext.onDeleteActivity
      - botbuilder-core.BotContext.onSendActivity
      - botbuilder-core.BotContext.onUpdateActivity
      - botbuilder-core.BotContext.request
      - botbuilder-core.BotContext.responded
      - botbuilder-core.BotContext.sendActivity
      - botbuilder-core.BotContext.set
      - botbuilder-core.BotContext.updateActivity
    langs:
      - typeScript
    type: class
    summary: >
      :package: **botbuilder-core**

      Context object containing information cached for a single turn of
      conversation with a user. This

      will typically be created by the adapter you're using and then passed to
      middleware and your

      bots logic.


      For TypeScript developers the `BotContext` is also exposed as an interface
      which you can derive

      from to better describe the actual shape of the context object being
      passed around.  Middleware

      can potentially extend the context object with additional members so in
      order to get intellisense

      for those added members you'll need to define them on an interface that
      extends BotContext:


      ```JavaScript

      interface MyContext extends BotContext {
           // Added by UserState middleware.
           readonly userState: MyUserState;

           // Added by ConversationState middleware.
           readonly conversationState: MyConversationState;
      }


      adapter.processRequest(req, res, (context: MyContext) => {
           const state = context.conversationState;
      });

      ```
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.adapter
    name: adapter
    fullName: adapter
    children: []
    langs:
      - typeScript
    type: property
    summary: The adapter for this context.
    syntax:
      content: 'adapter: BotAdapter'
      return:
        type:
          - botbuilder-core.BotAdapter
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.applyConversationReference
    name: applyConversationReference
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates an activity with the delivery information from a conversation
      reference. Calling

      this after [getConversationReference()](#getconversationreference) on an
      incoming activity

      will properly address the reply to a received activity.

      **Usage Example**


      ```JavaScript

      // Send a typing indicator without calling any handlers

      const reference = TurnContext.getConversationReference(context.request);

      const activity = TurnContext.applyConversationReference({ type: 'typing'
      }, reference);

      return context.adapter.sendActivity(activity);

      ```
    syntax:
      content: >-
        static function applyConversationReference(activity: Partial<Activity>,
        reference: Partial<ConversationReference>, isIncoming?: boolean)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: Activity to copy delivery information to.
        - id: reference
          type:
            - Partial<ConversationReference>
          description: Conversation reference containing delivery information.
        - id: isIncoming
          type:
            - boolean
          description: >
            (Optional) flag indicating whether the activity is an incoming or
            outgoing activity. Defaults to `false` indicating the activity is
            outgoing.
          optional: true
      return:
        type:
          - Partial<Activity>
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.constructor
    name: BotContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotContext instance for a turn of conversation.
    syntax:
      content: 'new BotContext(adapterOrContext: BotAdapter, request: Partial<Activity>)'
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.BotAdapter
          description: Adapter that constructed the context or a context object to clone.
        - id: request
          type:
            - Partial<Activity>
          description: |
            Request being processed.
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.constructor_1
    name: BotContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotContext instance for a turn of conversation.
    syntax:
      content: 'new BotContext(adapterOrContext: BotContext)'
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.BotContext
          description: Adapter that constructed the context or a context object to clone.
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.deleteActivity
    name: deleteActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing activity.
    syntax:
      content: >-
        function deleteActivity(idOrReference: string |
        Partial<ConversationReference>)
      parameters:
        - id: idOrReference
          type:
            - string | Partial<ConversationReference>
          description: >
            ID or conversation of the activity being deleted. If an ID is
            specified the conversation reference information from the current
            request will be used to delete the activity.
      return:
        type:
          - Promise<void>
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.get
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a value previously cached on the context.
    syntax:
      content: 'function get<T>(key: any)'
      parameters:
        - id: key
          type:
            - any
          description: |
            The key to lookup in the cache.
      return:
        type:
          - T
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.getConversationReference
    name: getConversationReference
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the conversation reference for an activity. This can be saved as a
      plain old JSON

      object and then later used to message the user proactively.

      **Usage Example**


      ```JavaScript

      const reference = TurnContext.getConversationReference(context.request);

      ```
    syntax:
      content: 'static function getConversationReference(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity to copy the conversation reference from
      return:
        type:
          - Partial<ConversationReference>
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.has
    name: has
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns `true` if [set()](#set) has been called for a key. The cached
      value may be `undefined`.
    syntax:
      content: 'function has(key: any)'
      parameters:
        - id: key
          type:
            - any
          description: |
            The key to lookup in the cache.
      return:
        type:
          - boolean
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.onDeleteActivity
    name: onDeleteActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of and potentially intercept an
      activity being deleted.
    syntax:
      content: 'function onDeleteActivity(handler: DeleteActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.DeleteActivityHandler
          description: >
            A function that will be called anytime
            [deleteActivity()](#deleteactivity) is called. The handler should
            call `next()` to continue deletion of the activity.
      return:
        type:
          - this
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.onSendActivity
    name: onSendActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of and potentially intercept the
      sending of activities.
    syntax:
      content: 'function onSendActivity(handler: SendActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.SendActivityHandler
          description: >
            A function that will be called anytime
            [sendActivity()](#sendactivity) is called. The handler should call
            `next()` to continue sending of the activities.
      return:
        type:
          - this
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.onUpdateActivity
    name: onUpdateActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of and potentially intercept an
      activity being updated.
    syntax:
      content: 'function onUpdateActivity(handler: UpdateActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.UpdateActivityHandler
          description: >
            A function that will be called anytime
            [updateActivity()](#updateactivity) is called. The handler should
            call `next()` to continue sending of the replacement activity.
      return:
        type:
          - this
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.request
    name: request
    fullName: request
    children: []
    langs:
      - typeScript
    type: property
    summary: The received activity.
    syntax:
      content: 'request: Activity'
      return:
        type:
          - Activity
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.responded
    name: responded
    fullName: responded
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true` at least one response has been sent for the current turn of
      conversation.
    syntax:
      content: 'responded: boolean'
      return:
        type:
          - boolean
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.sendActivity
    name: sendActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends a set of activities to the user. An array of responses form the
      server will be

      returned.
    syntax:
      content: 'function sendActivity(activityOrText: string | function[])'
      parameters:
        - id: activityOrText
          type:
            - 'string | function[]'
          description: >
            One or more activities or messages to send to the user. If a
            `string` is provided it will be sent to the user as a `message`
            activity.
      return:
        type:
          - 'Promise<ResourceResponse[]>'
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.set
    name: set
    children: []
    type: method
    langs:
      - typeScript
    summary: Caches a value for the lifetime of the current turn.
    syntax:
      content: 'function set(key: any, value: any)'
      parameters:
        - id: key
          type:
            - any
          description: The key of the value being cached.
        - id: value
          type:
            - any
          description: |
            The value to cache.
      return:
        type:
          - this
    package: botbuilder-core
  - uid: botbuilder-core.BotContext.updateActivity
    name: updateActivity
    children: []
    type: method
    langs:
      - typeScript
    summary: Replaces an existing activity.
    syntax:
      content: 'function updateActivity(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: >
            New replacement activity. The activity should already have it's ID
            information populated.
      return:
        type:
          - Promise<void>
    package: botbuilder-core
references:
  - uid: botbuilder-core.BotAdapter
    spec.typeScript:
      - name: BotAdapter
        fullName: BotAdapter
        uid: botbuilder-core.BotAdapter
  - uid: botbuilder-core.BotContext
    spec.typeScript:
      - name: BotContext
        fullName: BotContext
        uid: botbuilder-core.BotContext
  - uid: botbuilder-core.DeleteActivityHandler
    spec.typeScript:
      - name: DeleteActivityHandler
        fullName: DeleteActivityHandler
        uid: botbuilder-core.DeleteActivityHandler
  - uid: botbuilder-core.SendActivityHandler
    spec.typeScript:
      - name: SendActivityHandler
        fullName: SendActivityHandler
        uid: botbuilder-core.SendActivityHandler
  - uid: botbuilder-core.UpdateActivityHandler
    spec.typeScript:
      - name: UpdateActivityHandler
        fullName: UpdateActivityHandler
        uid: botbuilder-core.UpdateActivityHandler
