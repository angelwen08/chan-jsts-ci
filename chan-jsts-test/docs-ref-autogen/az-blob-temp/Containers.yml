### YamlMime:UniversalReference
items:
  - uid: az-blob-temp.Containers
    name: Containers
    fullName: Containers
    children: []
    langs:
      - typeScript
    type: class
    summary: Class representing a Containers.
    package: az-blob-temp
  - uid: az-blob-temp.Containers.acquireLease
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: function acquireLease()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.acquireLease_1
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function acquireLease(options: ContainersAcquireLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersAcquireLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.acquireLease_3
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function acquireLease(options: ContainersAcquireLeaseOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersAcquireLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.acquireLease_2
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function acquireLease(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.acquireLeaseWithHttpOperationResponse
    name: acquireLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function acquireLeaseWithHttpOperationResponse(options?:
        ContainersAcquireLeaseOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersAcquireLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersAcquireLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.breakLease
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: function breakLease()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.breakLease_2
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function breakLease(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.breakLease_3
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function breakLease(options: ContainersBreakLeaseOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersBreakLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.breakLease_1
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function breakLease(options: ContainersBreakLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersBreakLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.breakLeaseWithHttpOperationResponse
    name: breakLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function breakLeaseWithHttpOperationResponse(options?:
        ContainersBreakLeaseOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersBreakLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersBreakLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.changeLease_1
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        ContainersChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersChangeLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.changeLease_2
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.changeLease_3
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        ContainersChangeLeaseOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersChangeLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.changeLease
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function changeLease(leaseId: string, proposedLeaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: proposedLeaseId
          type:
            - string
          description: >
            Proposed lease ID, in a GUID string format. The Blob service

            returns 400 (Invalid request) if the proposed lease ID is not in the
            correct format. See Guid

            Constructor (String) for a list of valid GUID string formats.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.changeLeaseWithHttpOperationResponse
    name: changeLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function changeLeaseWithHttpOperationResponse(leaseId: string,
        proposedLeaseId: string, options?: ContainersChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: proposedLeaseId
          type:
            - string
          description: >
            Proposed lease ID, in a GUID string format. The Blob service

            returns 400 (Invalid request) if the proposed lease ID is not in the
            correct format. See Guid

            Constructor (String) for a list of valid GUID string formats.
        - id: options
          type:
            - az-blob-temp.ContainersChangeLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersChangeLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.constructor
    name: Containers
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Containers.
    syntax:
      content: 'new Containers(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - az-blob-temp.StorageClientContext
          description: |
            Reference to the service client.
    package: az-blob-temp
  - uid: az-blob-temp.Containers.create_1
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    syntax:
      content: 'function create(options: ContainersCreateOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersCreateOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.create
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    syntax:
      content: function create()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.create_3
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    syntax:
      content: >-
        function create(options: ContainersCreateOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersCreateOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.create_2
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    syntax:
      content: 'function create(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.createWithHttpOperationResponse
    name: createWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    syntax:
      content: >-
        function createWithHttpOperationResponse(options?:
        ContainersCreateOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersCreateResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.deleteMethod
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    syntax:
      content: function deleteMethod()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.deleteMethod_2
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    syntax:
      content: 'function deleteMethod(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.deleteMethod_3
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    syntax:
      content: >-
        function deleteMethod(options: ContainersDeleteMethodOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersDeleteMethodOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.deleteMethod_1
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    syntax:
      content: 'function deleteMethod(options: ContainersDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersDeleteMethodOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.deleteMethodWithHttpOperationResponse
    name: deleteMethodWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(options?:
        ContainersDeleteMethodOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersDeleteResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getAccessPolicy_1
    name: getAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    syntax:
      content: >-
        function getAccessPolicy(options:
        ContainersGetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetAccessPolicyOptionalParams
          description: ''
      return:
        type:
          - 'Promise<az-blob-temp.SignedIdentifier[]>'
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getAccessPolicy_2
    name: getAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    syntax:
      content: >-
        function getAccessPolicy(callback:
        msRest.ServiceCallback<SignedIdentifier[]>)
      parameters:
        - id: callback
          type:
            - 'msRest.ServiceCallback<az-blob-temp.SignedIdentifier[]>'
          description: ''
      return:
        type:
          - 'Promise<az-blob-temp.SignedIdentifier[]>'
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getAccessPolicy_3
    name: getAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    syntax:
      content: >-
        function getAccessPolicy(options:
        ContainersGetAccessPolicyOptionalParams, callback:
        msRest.ServiceCallback<SignedIdentifier[]>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetAccessPolicyOptionalParams
          description: ''
        - id: callback
          type:
            - 'msRest.ServiceCallback<az-blob-temp.SignedIdentifier[]>'
          description: ''
      return:
        type:
          - 'Promise<az-blob-temp.SignedIdentifier[]>'
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getAccessPolicy
    name: getAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    syntax:
      content: function getAccessPolicy()
      parameters: []
      return:
        type:
          - 'Promise<az-blob-temp.SignedIdentifier[]>'
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getAccessPolicyWithHttpOperationResponse
    name: getAccessPolicyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    syntax:
      content: >-
        function getAccessPolicyWithHttpOperationResponse(options?:
        ContainersGetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetAccessPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersGetAccessPolicyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getProperties
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    syntax:
      content: function getProperties()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getProperties_1
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    syntax:
      content: 'function getProperties(options: ContainersGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetPropertiesOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getProperties_2
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    syntax:
      content: 'function getProperties(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getProperties_3
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    syntax:
      content: >-
        function getProperties(options: ContainersGetPropertiesOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetPropertiesOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.getPropertiesWithHttpOperationResponse
    name: getPropertiesWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    syntax:
      content: >-
        function getPropertiesWithHttpOperationResponse(options?:
        ContainersGetPropertiesOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersGetPropertiesResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobFlatSegment
    name: listBlobFlatSegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: function listBlobFlatSegment()
      parameters: []
      return:
        type:
          - Promise<az-blob-temp.ListBlobsFlatResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobFlatSegment_2
    name: listBlobFlatSegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobFlatSegment(callback:
        msRest.ServiceCallback<ListBlobsFlatResponse>)
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.ListBlobsFlatResponse>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsFlatResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobFlatSegment_3
    name: listBlobFlatSegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobFlatSegment(options:
        ContainersListBlobFlatSegmentOptionalParams, callback:
        msRest.ServiceCallback<ListBlobsFlatResponse>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersListBlobFlatSegmentOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.ListBlobsFlatResponse>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsFlatResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobFlatSegment_1
    name: listBlobFlatSegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobFlatSegment(options:
        ContainersListBlobFlatSegmentOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersListBlobFlatSegmentOptionalParams
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsFlatResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobFlatSegmentWithHttpOperationResponse
    name: listBlobFlatSegmentWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobFlatSegmentWithHttpOperationResponse(options?:
        ContainersListBlobFlatSegmentOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersListBlobFlatSegmentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersListBlobFlatSegmentResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobHierarchySegment
    name: listBlobHierarchySegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: 'function listBlobHierarchySegment(delimiter: string)'
      parameters:
        - id: delimiter
          type:
            - string
          description: >
            When the request includes this parameter, the operation returns a

            BlobPrefix element in the response body that acts as a placeholder
            for all blobs whose names

            begin with the same substring up to the appearance of the delimiter
            character. The delimiter may

            be a single character or a string.
      return:
        type:
          - Promise<az-blob-temp.ListBlobsHierarchyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobHierarchySegment_1
    name: listBlobHierarchySegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, options:
        ContainersListBlobHierarchySegmentOptionalParams)
      parameters:
        - id: delimiter
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersListBlobHierarchySegmentOptionalParams
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsHierarchyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobHierarchySegment_3
    name: listBlobHierarchySegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, options:
        ContainersListBlobHierarchySegmentOptionalParams, callback:
        msRest.ServiceCallback<ListBlobsHierarchyResponse>)
      parameters:
        - id: delimiter
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersListBlobHierarchySegmentOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.ListBlobsHierarchyResponse>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsHierarchyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobHierarchySegment_2
    name: listBlobHierarchySegment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, callback:
        msRest.ServiceCallback<ListBlobsHierarchyResponse>)
      parameters:
        - id: delimiter
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.ListBlobsHierarchyResponse>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.ListBlobsHierarchyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.listBlobHierarchySegmentWithHttpOperationResponse
    name: listBlobHierarchySegmentWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    syntax:
      content: >-
        function listBlobHierarchySegmentWithHttpOperationResponse(delimiter:
        string, options?: ContainersListBlobHierarchySegmentOptionalParams)
      parameters:
        - id: delimiter
          type:
            - string
          description: >
            When the request includes this parameter, the operation returns a

            BlobPrefix element in the response body that acts as a placeholder
            for all blobs whose names

            begin with the same substring up to the appearance of the delimiter
            character. The delimiter may

            be a single character or a string.
        - id: options
          type:
            - az-blob-temp.ContainersListBlobHierarchySegmentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersListBlobHierarchySegmentResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.releaseLease
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function releaseLease(leaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.releaseLease_1
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        ContainersReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersReleaseLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.releaseLease_2
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function releaseLease(leaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.releaseLease_3
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        ContainersReleaseLeaseOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersReleaseLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.releaseLeaseWithHttpOperationResponse
    name: releaseLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function releaseLeaseWithHttpOperationResponse(leaseId: string,
        options?: ContainersReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: options
          type:
            - az-blob-temp.ContainersReleaseLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersReleaseLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.renewLease
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: 'function renewLease(leaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.renewLease_2
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function renewLease(leaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.renewLease_3
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        ContainersRenewLeaseOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersRenewLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.renewLease_1
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        ContainersRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.ContainersRenewLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.renewLeaseWithHttpOperationResponse
    name: renewLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    syntax:
      content: >-
        function renewLeaseWithHttpOperationResponse(leaseId: string, options?:
        ContainersRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: options
          type:
            - az-blob-temp.ContainersRenewLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersRenewLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setAccessPolicy
    name: setAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    syntax:
      content: function setAccessPolicy()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setAccessPolicy_1
    name: setAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    syntax:
      content: >-
        function setAccessPolicy(options:
        ContainersSetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetAccessPolicyOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setAccessPolicy_2
    name: setAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    syntax:
      content: 'function setAccessPolicy(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setAccessPolicy_3
    name: setAccessPolicy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    syntax:
      content: >-
        function setAccessPolicy(options:
        ContainersSetAccessPolicyOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetAccessPolicyOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setAccessPolicyWithHttpOperationResponse
    name: setAccessPolicyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    syntax:
      content: >-
        function setAccessPolicyWithHttpOperationResponse(options?:
        ContainersSetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetAccessPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersSetAccessPolicyResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setMetadata
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    syntax:
      content: function setMetadata()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setMetadata_1
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    syntax:
      content: 'function setMetadata(options: ContainersSetMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetMetadataOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setMetadata_2
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    syntax:
      content: 'function setMetadata(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setMetadata_3
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    syntax:
      content: >-
        function setMetadata(options: ContainersSetMetadataOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetMetadataOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Containers.setMetadataWithHttpOperationResponse
    name: setMetadataWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    syntax:
      content: >-
        function setMetadataWithHttpOperationResponse(options?:
        ContainersSetMetadataOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.ContainersSetMetadataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.ContainersSetMetadataResponse>
    package: az-blob-temp
references:
  - uid: az-blob-temp.StorageClientContext
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: az-blob-temp.StorageClientContext
  - uid: az-blob-temp.ContainersAcquireLeaseOptionalParams
    name: ContainersAcquireLeaseOptionalParams
    spec.typeScript:
      - name: ContainersAcquireLeaseOptionalParams
        fullName: ContainersAcquireLeaseOptionalParams
        uid: az-blob-temp.ContainersAcquireLeaseOptionalParams
  - uid: Promise<az-blob-temp.ContainersAcquireLeaseResponse>
    name: ContainersAcquireLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersAcquireLeaseResponse
        fullName: ContainersAcquireLeaseResponse
        uid: az-blob-temp.ContainersAcquireLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersBreakLeaseOptionalParams
    name: ContainersBreakLeaseOptionalParams
    spec.typeScript:
      - name: ContainersBreakLeaseOptionalParams
        fullName: ContainersBreakLeaseOptionalParams
        uid: az-blob-temp.ContainersBreakLeaseOptionalParams
  - uid: Promise<az-blob-temp.ContainersBreakLeaseResponse>
    name: ContainersBreakLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersBreakLeaseResponse
        fullName: ContainersBreakLeaseResponse
        uid: az-blob-temp.ContainersBreakLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersChangeLeaseOptionalParams
    name: ContainersChangeLeaseOptionalParams
    spec.typeScript:
      - name: ContainersChangeLeaseOptionalParams
        fullName: ContainersChangeLeaseOptionalParams
        uid: az-blob-temp.ContainersChangeLeaseOptionalParams
  - uid: Promise<az-blob-temp.ContainersChangeLeaseResponse>
    name: ContainersChangeLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersChangeLeaseResponse
        fullName: ContainersChangeLeaseResponse
        uid: az-blob-temp.ContainersChangeLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersCreateOptionalParams
    name: ContainersCreateOptionalParams
    spec.typeScript:
      - name: ContainersCreateOptionalParams
        fullName: ContainersCreateOptionalParams
        uid: az-blob-temp.ContainersCreateOptionalParams
  - uid: Promise<az-blob-temp.ContainersCreateResponse>
    name: ContainersCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersCreateResponse
        fullName: ContainersCreateResponse
        uid: az-blob-temp.ContainersCreateResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersDeleteMethodOptionalParams
    name: ContainersDeleteMethodOptionalParams
    spec.typeScript:
      - name: ContainersDeleteMethodOptionalParams
        fullName: ContainersDeleteMethodOptionalParams
        uid: az-blob-temp.ContainersDeleteMethodOptionalParams
  - uid: Promise<az-blob-temp.ContainersDeleteResponse>
    name: ContainersDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersDeleteResponse
        fullName: ContainersDeleteResponse
        uid: az-blob-temp.ContainersDeleteResponse
      - name: '>'
        fullName: '>'
  - uid: 'Promise<az-blob-temp.SignedIdentifier[]>'
    name: 'SignedIdentifier[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SignedIdentifier
        fullName: SignedIdentifier
        uid: az-blob-temp.SignedIdentifier
      - name: '[]>'
        fullName: '[]>'
  - uid: az-blob-temp.ContainersGetAccessPolicyOptionalParams
    name: ContainersGetAccessPolicyOptionalParams
    spec.typeScript:
      - name: ContainersGetAccessPolicyOptionalParams
        fullName: ContainersGetAccessPolicyOptionalParams
        uid: az-blob-temp.ContainersGetAccessPolicyOptionalParams
  - uid: 'msRest.ServiceCallback<az-blob-temp.SignedIdentifier[]>'
    name: 'SignedIdentifier[]>'
    spec.typeScript:
      - name: msRest.ServiceCallback<
        fullName: msRest.ServiceCallback<
      - name: SignedIdentifier
        fullName: SignedIdentifier
        uid: az-blob-temp.SignedIdentifier
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<az-blob-temp.ContainersGetAccessPolicyResponse>
    name: ContainersGetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersGetAccessPolicyResponse
        fullName: ContainersGetAccessPolicyResponse
        uid: az-blob-temp.ContainersGetAccessPolicyResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersGetPropertiesOptionalParams
    name: ContainersGetPropertiesOptionalParams
    spec.typeScript:
      - name: ContainersGetPropertiesOptionalParams
        fullName: ContainersGetPropertiesOptionalParams
        uid: az-blob-temp.ContainersGetPropertiesOptionalParams
  - uid: Promise<az-blob-temp.ContainersGetPropertiesResponse>
    name: ContainersGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersGetPropertiesResponse
        fullName: ContainersGetPropertiesResponse
        uid: az-blob-temp.ContainersGetPropertiesResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<az-blob-temp.ListBlobsFlatResponse>
    name: ListBlobsFlatResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ListBlobsFlatResponse
        fullName: ListBlobsFlatResponse
        uid: az-blob-temp.ListBlobsFlatResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersListBlobFlatSegmentOptionalParams
    name: ContainersListBlobFlatSegmentOptionalParams
    spec.typeScript:
      - name: ContainersListBlobFlatSegmentOptionalParams
        fullName: ContainersListBlobFlatSegmentOptionalParams
        uid: az-blob-temp.ContainersListBlobFlatSegmentOptionalParams
  - uid: msRest.ServiceCallback<az-blob-temp.ListBlobsFlatResponse>
    name: ListBlobsFlatResponse>
    spec.typeScript:
      - name: msRest.ServiceCallback<
        fullName: msRest.ServiceCallback<
      - name: ListBlobsFlatResponse
        fullName: ListBlobsFlatResponse
        uid: az-blob-temp.ListBlobsFlatResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<az-blob-temp.ContainersListBlobFlatSegmentResponse>
    name: ContainersListBlobFlatSegmentResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersListBlobFlatSegmentResponse
        fullName: ContainersListBlobFlatSegmentResponse
        uid: az-blob-temp.ContainersListBlobFlatSegmentResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<az-blob-temp.ListBlobsHierarchyResponse>
    name: ListBlobsHierarchyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ListBlobsHierarchyResponse
        fullName: ListBlobsHierarchyResponse
        uid: az-blob-temp.ListBlobsHierarchyResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersListBlobHierarchySegmentOptionalParams
    name: ContainersListBlobHierarchySegmentOptionalParams
    spec.typeScript:
      - name: ContainersListBlobHierarchySegmentOptionalParams
        fullName: ContainersListBlobHierarchySegmentOptionalParams
        uid: az-blob-temp.ContainersListBlobHierarchySegmentOptionalParams
  - uid: msRest.ServiceCallback<az-blob-temp.ListBlobsHierarchyResponse>
    name: ListBlobsHierarchyResponse>
    spec.typeScript:
      - name: msRest.ServiceCallback<
        fullName: msRest.ServiceCallback<
      - name: ListBlobsHierarchyResponse
        fullName: ListBlobsHierarchyResponse
        uid: az-blob-temp.ListBlobsHierarchyResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<az-blob-temp.ContainersListBlobHierarchySegmentResponse>
    name: ContainersListBlobHierarchySegmentResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersListBlobHierarchySegmentResponse
        fullName: ContainersListBlobHierarchySegmentResponse
        uid: az-blob-temp.ContainersListBlobHierarchySegmentResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersReleaseLeaseOptionalParams
    name: ContainersReleaseLeaseOptionalParams
    spec.typeScript:
      - name: ContainersReleaseLeaseOptionalParams
        fullName: ContainersReleaseLeaseOptionalParams
        uid: az-blob-temp.ContainersReleaseLeaseOptionalParams
  - uid: Promise<az-blob-temp.ContainersReleaseLeaseResponse>
    name: ContainersReleaseLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersReleaseLeaseResponse
        fullName: ContainersReleaseLeaseResponse
        uid: az-blob-temp.ContainersReleaseLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersRenewLeaseOptionalParams
    name: ContainersRenewLeaseOptionalParams
    spec.typeScript:
      - name: ContainersRenewLeaseOptionalParams
        fullName: ContainersRenewLeaseOptionalParams
        uid: az-blob-temp.ContainersRenewLeaseOptionalParams
  - uid: Promise<az-blob-temp.ContainersRenewLeaseResponse>
    name: ContainersRenewLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersRenewLeaseResponse
        fullName: ContainersRenewLeaseResponse
        uid: az-blob-temp.ContainersRenewLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersSetAccessPolicyOptionalParams
    name: ContainersSetAccessPolicyOptionalParams
    spec.typeScript:
      - name: ContainersSetAccessPolicyOptionalParams
        fullName: ContainersSetAccessPolicyOptionalParams
        uid: az-blob-temp.ContainersSetAccessPolicyOptionalParams
  - uid: Promise<az-blob-temp.ContainersSetAccessPolicyResponse>
    name: ContainersSetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersSetAccessPolicyResponse
        fullName: ContainersSetAccessPolicyResponse
        uid: az-blob-temp.ContainersSetAccessPolicyResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.ContainersSetMetadataOptionalParams
    name: ContainersSetMetadataOptionalParams
    spec.typeScript:
      - name: ContainersSetMetadataOptionalParams
        fullName: ContainersSetMetadataOptionalParams
        uid: az-blob-temp.ContainersSetMetadataOptionalParams
  - uid: Promise<az-blob-temp.ContainersSetMetadataResponse>
    name: ContainersSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainersSetMetadataResponse
        fullName: ContainersSetMetadataResponse
        uid: az-blob-temp.ContainersSetMetadataResponse
      - name: '>'
        fullName: '>'
