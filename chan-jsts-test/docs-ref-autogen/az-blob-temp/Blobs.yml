### YamlMime:UniversalReference
items:
  - uid: az-blob-temp.Blobs
    name: Blobs
    fullName: Blobs
    children:
      - az-blob-temp.Blobs.abortCopyFromURL
      - az-blob-temp.Blobs.abortCopyFromURL_2
      - az-blob-temp.Blobs.abortCopyFromURL_3
      - az-blob-temp.Blobs.abortCopyFromURL_1
      - az-blob-temp.Blobs.abortCopyFromURLWithHttpOperationResponse
      - az-blob-temp.Blobs.acquireLease
      - az-blob-temp.Blobs.acquireLease_1
      - az-blob-temp.Blobs.acquireLease_2
      - az-blob-temp.Blobs.acquireLease_3
      - az-blob-temp.Blobs.acquireLeaseWithHttpOperationResponse
      - az-blob-temp.Blobs.constructor
      - az-blob-temp.Blobs.breakLease_1
      - az-blob-temp.Blobs.breakLease_3
      - az-blob-temp.Blobs.breakLease
      - az-blob-temp.Blobs.breakLease_2
      - az-blob-temp.Blobs.breakLeaseWithHttpOperationResponse
      - az-blob-temp.Blobs.changeLease_1
      - az-blob-temp.Blobs.changeLease_2
      - az-blob-temp.Blobs.changeLease_3
      - az-blob-temp.Blobs.changeLease
      - az-blob-temp.Blobs.changeLeaseWithHttpOperationResponse
      - az-blob-temp.Blobs.createSnapshot
      - az-blob-temp.Blobs.createSnapshot_2
      - az-blob-temp.Blobs.createSnapshot_3
      - az-blob-temp.Blobs.createSnapshot_1
      - az-blob-temp.Blobs.createSnapshotWithHttpOperationResponse
      - az-blob-temp.Blobs.deleteMethod
      - az-blob-temp.Blobs.deleteMethod_2
      - az-blob-temp.Blobs.deleteMethod_3
      - az-blob-temp.Blobs.deleteMethod_1
      - az-blob-temp.Blobs.deleteMethodWithHttpOperationResponse
      - az-blob-temp.Blobs.downloadWithHttpOperationResponse
      - az-blob-temp.Blobs.getProperties
      - az-blob-temp.Blobs.getProperties_1
      - az-blob-temp.Blobs.getProperties_2
      - az-blob-temp.Blobs.getProperties_3
      - az-blob-temp.Blobs.getPropertiesWithHttpOperationResponse
      - az-blob-temp.Blobs.releaseLease
      - az-blob-temp.Blobs.releaseLease_1
      - az-blob-temp.Blobs.releaseLease_3
      - az-blob-temp.Blobs.releaseLease_2
      - az-blob-temp.Blobs.releaseLeaseWithHttpOperationResponse
      - az-blob-temp.Blobs.renewLease
      - az-blob-temp.Blobs.renewLease_2
      - az-blob-temp.Blobs.renewLease_3
      - az-blob-temp.Blobs.renewLease_1
      - az-blob-temp.Blobs.renewLeaseWithHttpOperationResponse
      - az-blob-temp.Blobs.setHTTPHeaders_1
      - az-blob-temp.Blobs.setHTTPHeaders_2
      - az-blob-temp.Blobs.setHTTPHeaders_3
      - az-blob-temp.Blobs.setHTTPHeaders
      - az-blob-temp.Blobs.setHTTPHeadersWithHttpOperationResponse
      - az-blob-temp.Blobs.setMetadata
      - az-blob-temp.Blobs.setMetadata_1
      - az-blob-temp.Blobs.setMetadata_2
      - az-blob-temp.Blobs.setMetadata_3
      - az-blob-temp.Blobs.setMetadataWithHttpOperationResponse
      - az-blob-temp.Blobs.setTier_1
      - az-blob-temp.Blobs.setTier_2
      - az-blob-temp.Blobs.setTier_3
      - az-blob-temp.Blobs.setTier
      - az-blob-temp.Blobs.setTierWithHttpOperationResponse
      - az-blob-temp.Blobs.startCopyFromURL
      - az-blob-temp.Blobs.startCopyFromURL_1
      - az-blob-temp.Blobs.startCopyFromURL_2
      - az-blob-temp.Blobs.startCopyFromURL_3
      - az-blob-temp.Blobs.startCopyFromURLWithHttpOperationResponse
      - az-blob-temp.Blobs.undelete
      - az-blob-temp.Blobs.undelete_1
      - az-blob-temp.Blobs.undelete_2
      - az-blob-temp.Blobs.undelete_3
      - az-blob-temp.Blobs.undeleteWithHttpOperationResponse
    langs:
      - typeScript
    type: class
    summary: Class representing a Blobs.
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.abortCopyFromURL
    name: abortCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: 'function abortCopyFromURL(copyId: string)'
      parameters:
        - id: copyId
          type:
            - string
          description: >
            The copy identifier provided in the x-ms-copy-id header of the
            original

            Copy Blob operation.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.abortCopyFromURL_2
    name: abortCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: copyId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.abortCopyFromURL_3
    name: abortCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options:
        BlobsAbortCopyFromURLOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: copyId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsAbortCopyFromURLOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.abortCopyFromURL_1
    name: abortCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options:
        BlobsAbortCopyFromURLOptionalParams)
      parameters:
        - id: copyId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsAbortCopyFromURLOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.abortCopyFromURLWithHttpOperationResponse
    name: abortCopyFromURLWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Abort Copy From URL operation aborts a pending Copy From URL
      operation, and leaves a

      destination blob with zero length and full metadata.
    syntax:
      content: >-
        function abortCopyFromURLWithHttpOperationResponse(copyId: string,
        options?: BlobsAbortCopyFromURLOptionalParams)
      parameters:
        - id: copyId
          type:
            - string
          description: >
            The copy identifier provided in the x-ms-copy-id header of the
            original

            Copy Blob operation.
        - id: options
          type:
            - az-blob-temp.BlobsAbortCopyFromURLOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsAbortCopyFromURLResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.acquireLease
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: function acquireLease()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.acquireLease_1
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function acquireLease(options: BlobsAcquireLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsAcquireLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.acquireLease_2
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function acquireLease(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.acquireLease_3
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function acquireLease(options: BlobsAcquireLeaseOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsAcquireLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.acquireLeaseWithHttpOperationResponse
    name: acquireLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function acquireLeaseWithHttpOperationResponse(options?:
        BlobsAcquireLeaseOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsAcquireLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsAcquireLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.constructor
    name: Blobs
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Blobs.
    syntax:
      content: 'new Blobs(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - az-blob-temp.StorageClientContext
          description: |
            Reference to the service client.
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.breakLease_1
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function breakLease(options: BlobsBreakLeaseOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsBreakLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.breakLease_3
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function breakLease(options: BlobsBreakLeaseOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsBreakLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.breakLease
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: function breakLease()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.breakLease_2
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function breakLease(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.breakLeaseWithHttpOperationResponse
    name: breakLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function breakLeaseWithHttpOperationResponse(options?:
        BlobsBreakLeaseOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsBreakLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsBreakLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.changeLease_1
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        BlobsChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsChangeLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.changeLease_2
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.changeLease_3
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        BlobsChangeLeaseOptionalParams, callback: msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: proposedLeaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsChangeLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.changeLease
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function changeLease(leaseId: string, proposedLeaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: proposedLeaseId
          type:
            - string
          description: >
            Proposed lease ID, in a GUID string format. The Blob service

            returns 400 (Invalid request) if the proposed lease ID is not in the
            correct format. See Guid

            Constructor (String) for a list of valid GUID string formats.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.changeLeaseWithHttpOperationResponse
    name: changeLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function changeLeaseWithHttpOperationResponse(leaseId: string,
        proposedLeaseId: string, options?: BlobsChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: proposedLeaseId
          type:
            - string
          description: >
            Proposed lease ID, in a GUID string format. The Blob service

            returns 400 (Invalid request) if the proposed lease ID is not in the
            correct format. See Guid

            Constructor (String) for a list of valid GUID string formats.
        - id: options
          type:
            - az-blob-temp.BlobsChangeLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsChangeLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.createSnapshot
    name: createSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: function createSnapshot()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.createSnapshot_2
    name: createSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: 'function createSnapshot(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.createSnapshot_3
    name: createSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: >-
        function createSnapshot(options: BlobsCreateSnapshotOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsCreateSnapshotOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.createSnapshot_1
    name: createSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: 'function createSnapshot(options: BlobsCreateSnapshotOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsCreateSnapshotOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.createSnapshotWithHttpOperationResponse
    name: createSnapshotWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: The Create Snapshot operation creates a read-only snapshot of a blob
    syntax:
      content: >-
        function createSnapshotWithHttpOperationResponse(options?:
        BlobsCreateSnapshotOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsCreateSnapshotOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsCreateSnapshotResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.deleteMethod
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: function deleteMethod()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.deleteMethod_2
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: 'function deleteMethod(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.deleteMethod_3
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: >-
        function deleteMethod(options: BlobsDeleteMethodOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsDeleteMethodOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.deleteMethod_1
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: 'function deleteMethod(options: BlobsDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsDeleteMethodOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.deleteMethodWithHttpOperationResponse
    name: deleteMethodWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the storage account's soft delete feature is disabled then, when a blob
      is deleted, it is

      permanently removed from the storage account. If the storage account's
      soft delete feature is

      enabled, then, when a blob is deleted, it is marked for deletion and
      becomes inaccessible

      immediately. However, the blob service retains the blob or snapshot for
      the number of days

      specified by the DeleteRetentionPolicy section of [Storage service
      properties]

      (Set-Blob-Service-Properties.md). After the specified number of days has
      passed, the blob's data

      is permanently removed from the storage account. Note that you continue to
      be charged for the

      soft-deleted blob's storage until it is permanently removed. Use the List
      Blobs API and specify

      the "include=deleted" query parameter to discover which blobs and
      snapshots have been soft

      deleted. You can then use the Undelete Blob API to restore a soft-deleted
      blob. All other

      operations on a soft-deleted blob or snapshot causes the service to return
      an HTTP status code

      of 404 (ResourceNotFound).
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(options?:
        BlobsDeleteMethodOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsDeleteResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.downloadWithHttpOperationResponse
    name: downloadWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Download operation reads or downloads a blob from the system,
      including its metadata and

      properties. You can also call Download to read a snapshot.
    syntax:
      content: >-
        function downloadWithHttpOperationResponse(options?:
        BlobsDownloadOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsDownloadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsDownloadResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.getProperties
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: function getProperties()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.getProperties_1
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: 'function getProperties(options: BlobsGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsGetPropertiesOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.getProperties_2
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: 'function getProperties(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.getProperties_3
    name: getProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: >-
        function getProperties(options: BlobsGetPropertiesOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsGetPropertiesOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.getPropertiesWithHttpOperationResponse
    name: getPropertiesWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Properties operation returns all user-defined metadata, standard
      HTTP properties, and

      system properties for the blob. It does not return the content of the
      blob.
    syntax:
      content: >-
        function getPropertiesWithHttpOperationResponse(options?:
        BlobsGetPropertiesOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsGetPropertiesResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.releaseLease
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function releaseLease(leaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.releaseLease_1
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        BlobsReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsReleaseLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.releaseLease_3
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        BlobsReleaseLeaseOptionalParams, callback: msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsReleaseLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.releaseLease_2
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function releaseLease(leaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.releaseLeaseWithHttpOperationResponse
    name: releaseLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function releaseLeaseWithHttpOperationResponse(leaseId: string,
        options?: BlobsReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: options
          type:
            - az-blob-temp.BlobsReleaseLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsReleaseLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.renewLease
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: 'function renewLease(leaseId: string)'
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.renewLease_2
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function renewLease(leaseId: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.renewLease_3
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        BlobsRenewLeaseOptionalParams, callback: msRest.ServiceCallback<void>)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsRenewLeaseOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.renewLease_1
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        BlobsRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsRenewLeaseOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.renewLeaseWithHttpOperationResponse
    name: renewLeaseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      [Update] The Lease Blob operation establishes and manages a lock on a blob
      for write and delete

      operations
    syntax:
      content: >-
        function renewLeaseWithHttpOperationResponse(leaseId: string, options?:
        BlobsRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type:
            - string
          description: >
            If specified, the operation only succeeds if the container's lease
            is

            active and matches this ID.
        - id: options
          type:
            - az-blob-temp.BlobsRenewLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsRenewLeaseResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setHTTPHeaders_1
    name: setHTTPHeaders
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: 'function setHTTPHeaders(options: BlobsSetHTTPHeadersOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetHTTPHeadersOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setHTTPHeaders_2
    name: setHTTPHeaders
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: 'function setHTTPHeaders(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setHTTPHeaders_3
    name: setHTTPHeaders
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: >-
        function setHTTPHeaders(options: BlobsSetHTTPHeadersOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetHTTPHeadersOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setHTTPHeaders
    name: setHTTPHeaders
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: function setHTTPHeaders()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setHTTPHeadersWithHttpOperationResponse
    name: setHTTPHeadersWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: The Set HTTP Headers operation sets system properties on the blob
    syntax:
      content: >-
        function setHTTPHeadersWithHttpOperationResponse(options?:
        BlobsSetHTTPHeadersOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetHTTPHeadersOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsSetHTTPHeadersResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setMetadata
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: function setMetadata()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setMetadata_1
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: 'function setMetadata(options: BlobsSetMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetMetadataOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setMetadata_2
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: 'function setMetadata(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setMetadata_3
    name: setMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: >-
        function setMetadata(options: BlobsSetMetadataOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetMetadataOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setMetadataWithHttpOperationResponse
    name: setMetadataWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Blob Metadata operation sets user-defined metadata for the
      specified blob as one or more

      name-value pairs
    syntax:
      content: >-
        function setMetadataWithHttpOperationResponse(options?:
        BlobsSetMetadataOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsSetMetadataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsSetMetadataResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setTier_1
    name: setTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: 'function setTier(tier: AccessTier, options: BlobsSetTierOptionalParams)'
      parameters:
        - id: tier
          type:
            - az-blob-temp.AccessTier
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsSetTierOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setTier_2
    name: setTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: >-
        function setTier(tier: AccessTier, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: tier
          type:
            - az-blob-temp.AccessTier
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setTier_3
    name: setTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: >-
        function setTier(tier: AccessTier, options: BlobsSetTierOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: tier
          type:
            - az-blob-temp.AccessTier
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsSetTierOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setTier
    name: setTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: 'function setTier(tier: AccessTier)'
      parameters:
        - id: tier
          type:
            - az-blob-temp.AccessTier
          description: >
            Indicates the tier to be set on the blob. Possible values include:

            'P4', 'P6', 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool',
            'Archive'
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.setTierWithHttpOperationResponse
    name: setTierWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Set Tier operation sets the tier on a blob. The operation is allowed
      on a page blob in a

      premium storage account and on a block blob in a blob storage account
      (locally redundant storage

      only). A premium page blob's tier determines the allowed size, IOPS, and
      bandwidth of the blob.

      A block blob's tier determines Hot/Cool/Archive storage type. This
      operation does not update the

      blob's ETag.
    syntax:
      content: >-
        function setTierWithHttpOperationResponse(tier: AccessTier, options?:
        BlobsSetTierOptionalParams)
      parameters:
        - id: tier
          type:
            - az-blob-temp.AccessTier
          description: >
            Indicates the tier to be set on the blob. Possible values include:

            'P4', 'P6', 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool',
            'Archive'
        - id: options
          type:
            - az-blob-temp.BlobsSetTierOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsSetTierResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.startCopyFromURL
    name: startCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: 'function startCopyFromURL(copySource: string)'
      parameters:
        - id: copySource
          type:
            - string
          description: >
            Specifies the name of the source page blob snapshot. This value is a

            URL of up to 2 KB in length that specifies a page blob snapshot. The
            value should be URL-encoded

            as it would appear in a request URI. The source blob must either be
            public or must be

            authenticated via a shared access signature.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.startCopyFromURL_1
    name: startCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options:
        BlobsStartCopyFromURLOptionalParams)
      parameters:
        - id: copySource
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsStartCopyFromURLOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.startCopyFromURL_2
    name: startCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: copySource
          type:
            - string
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.startCopyFromURL_3
    name: startCopyFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options:
        BlobsStartCopyFromURLOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: copySource
          type:
            - string
          description: ''
        - id: options
          type:
            - az-blob-temp.BlobsStartCopyFromURLOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.startCopyFromURLWithHttpOperationResponse
    name: startCopyFromURLWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Start Copy From URL operation copies a blob or an internet resource to
      a new blob.
    syntax:
      content: >-
        function startCopyFromURLWithHttpOperationResponse(copySource: string,
        options?: BlobsStartCopyFromURLOptionalParams)
      parameters:
        - id: copySource
          type:
            - string
          description: >
            Specifies the name of the source page blob snapshot. This value is a

            URL of up to 2 KB in length that specifies a page blob snapshot. The
            value should be URL-encoded

            as it would appear in a request URI. The source blob must either be
            public or must be

            authenticated via a shared access signature.
        - id: options
          type:
            - az-blob-temp.BlobsStartCopyFromURLOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsStartCopyFromURLResponse>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.undelete
    name: undelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: function undelete()
      parameters: []
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.undelete_1
    name: undelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: 'function undelete(options: BlobsUndeleteOptionalParams)'
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsUndeleteOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.undelete_2
    name: undelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: 'function undelete(callback: msRest.ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.undelete_3
    name: undelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: >-
        function undelete(options: BlobsUndeleteOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsUndeleteOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.Blobs.undeleteWithHttpOperationResponse
    name: undeleteWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: Undelete a blob that was previously soft deleted
    syntax:
      content: >-
        function undeleteWithHttpOperationResponse(options?:
        BlobsUndeleteOptionalParams)
      parameters:
        - id: options
          type:
            - az-blob-temp.BlobsUndeleteOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlobsUndeleteResponse>
    package: az-blob-temp
references:
  - uid: az-blob-temp.StorageClientContext
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: az-blob-temp.StorageClientContext
  - uid: az-blob-temp.BlobsAbortCopyFromURLOptionalParams
    name: BlobsAbortCopyFromURLOptionalParams
    spec.typeScript:
      - name: BlobsAbortCopyFromURLOptionalParams
        fullName: BlobsAbortCopyFromURLOptionalParams
        uid: az-blob-temp.BlobsAbortCopyFromURLOptionalParams
  - uid: Promise<az-blob-temp.BlobsAbortCopyFromURLResponse>
    name: BlobsAbortCopyFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsAbortCopyFromURLResponse
        fullName: BlobsAbortCopyFromURLResponse
        uid: az-blob-temp.BlobsAbortCopyFromURLResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsAcquireLeaseOptionalParams
    name: BlobsAcquireLeaseOptionalParams
    spec.typeScript:
      - name: BlobsAcquireLeaseOptionalParams
        fullName: BlobsAcquireLeaseOptionalParams
        uid: az-blob-temp.BlobsAcquireLeaseOptionalParams
  - uid: Promise<az-blob-temp.BlobsAcquireLeaseResponse>
    name: BlobsAcquireLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsAcquireLeaseResponse
        fullName: BlobsAcquireLeaseResponse
        uid: az-blob-temp.BlobsAcquireLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsBreakLeaseOptionalParams
    name: BlobsBreakLeaseOptionalParams
    spec.typeScript:
      - name: BlobsBreakLeaseOptionalParams
        fullName: BlobsBreakLeaseOptionalParams
        uid: az-blob-temp.BlobsBreakLeaseOptionalParams
  - uid: Promise<az-blob-temp.BlobsBreakLeaseResponse>
    name: BlobsBreakLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsBreakLeaseResponse
        fullName: BlobsBreakLeaseResponse
        uid: az-blob-temp.BlobsBreakLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsChangeLeaseOptionalParams
    name: BlobsChangeLeaseOptionalParams
    spec.typeScript:
      - name: BlobsChangeLeaseOptionalParams
        fullName: BlobsChangeLeaseOptionalParams
        uid: az-blob-temp.BlobsChangeLeaseOptionalParams
  - uid: Promise<az-blob-temp.BlobsChangeLeaseResponse>
    name: BlobsChangeLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsChangeLeaseResponse
        fullName: BlobsChangeLeaseResponse
        uid: az-blob-temp.BlobsChangeLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsCreateSnapshotOptionalParams
    name: BlobsCreateSnapshotOptionalParams
    spec.typeScript:
      - name: BlobsCreateSnapshotOptionalParams
        fullName: BlobsCreateSnapshotOptionalParams
        uid: az-blob-temp.BlobsCreateSnapshotOptionalParams
  - uid: Promise<az-blob-temp.BlobsCreateSnapshotResponse>
    name: BlobsCreateSnapshotResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsCreateSnapshotResponse
        fullName: BlobsCreateSnapshotResponse
        uid: az-blob-temp.BlobsCreateSnapshotResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsDeleteMethodOptionalParams
    name: BlobsDeleteMethodOptionalParams
    spec.typeScript:
      - name: BlobsDeleteMethodOptionalParams
        fullName: BlobsDeleteMethodOptionalParams
        uid: az-blob-temp.BlobsDeleteMethodOptionalParams
  - uid: Promise<az-blob-temp.BlobsDeleteResponse>
    name: BlobsDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsDeleteResponse
        fullName: BlobsDeleteResponse
        uid: az-blob-temp.BlobsDeleteResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsDownloadOptionalParams
    name: BlobsDownloadOptionalParams
    spec.typeScript:
      - name: BlobsDownloadOptionalParams
        fullName: BlobsDownloadOptionalParams
        uid: az-blob-temp.BlobsDownloadOptionalParams
  - uid: Promise<az-blob-temp.BlobsDownloadResponse>
    name: BlobsDownloadResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsDownloadResponse
        fullName: BlobsDownloadResponse
        uid: az-blob-temp.BlobsDownloadResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsGetPropertiesOptionalParams
    name: BlobsGetPropertiesOptionalParams
    spec.typeScript:
      - name: BlobsGetPropertiesOptionalParams
        fullName: BlobsGetPropertiesOptionalParams
        uid: az-blob-temp.BlobsGetPropertiesOptionalParams
  - uid: Promise<az-blob-temp.BlobsGetPropertiesResponse>
    name: BlobsGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsGetPropertiesResponse
        fullName: BlobsGetPropertiesResponse
        uid: az-blob-temp.BlobsGetPropertiesResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsReleaseLeaseOptionalParams
    name: BlobsReleaseLeaseOptionalParams
    spec.typeScript:
      - name: BlobsReleaseLeaseOptionalParams
        fullName: BlobsReleaseLeaseOptionalParams
        uid: az-blob-temp.BlobsReleaseLeaseOptionalParams
  - uid: Promise<az-blob-temp.BlobsReleaseLeaseResponse>
    name: BlobsReleaseLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsReleaseLeaseResponse
        fullName: BlobsReleaseLeaseResponse
        uid: az-blob-temp.BlobsReleaseLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsRenewLeaseOptionalParams
    name: BlobsRenewLeaseOptionalParams
    spec.typeScript:
      - name: BlobsRenewLeaseOptionalParams
        fullName: BlobsRenewLeaseOptionalParams
        uid: az-blob-temp.BlobsRenewLeaseOptionalParams
  - uid: Promise<az-blob-temp.BlobsRenewLeaseResponse>
    name: BlobsRenewLeaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsRenewLeaseResponse
        fullName: BlobsRenewLeaseResponse
        uid: az-blob-temp.BlobsRenewLeaseResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsSetHTTPHeadersOptionalParams
    name: BlobsSetHTTPHeadersOptionalParams
    spec.typeScript:
      - name: BlobsSetHTTPHeadersOptionalParams
        fullName: BlobsSetHTTPHeadersOptionalParams
        uid: az-blob-temp.BlobsSetHTTPHeadersOptionalParams
  - uid: Promise<az-blob-temp.BlobsSetHTTPHeadersResponse>
    name: BlobsSetHTTPHeadersResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsSetHTTPHeadersResponse
        fullName: BlobsSetHTTPHeadersResponse
        uid: az-blob-temp.BlobsSetHTTPHeadersResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsSetMetadataOptionalParams
    name: BlobsSetMetadataOptionalParams
    spec.typeScript:
      - name: BlobsSetMetadataOptionalParams
        fullName: BlobsSetMetadataOptionalParams
        uid: az-blob-temp.BlobsSetMetadataOptionalParams
  - uid: Promise<az-blob-temp.BlobsSetMetadataResponse>
    name: BlobsSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsSetMetadataResponse
        fullName: BlobsSetMetadataResponse
        uid: az-blob-temp.BlobsSetMetadataResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.AccessTier
    name: AccessTier
    spec.typeScript:
      - name: AccessTier
        fullName: AccessTier
        uid: az-blob-temp.AccessTier
  - uid: az-blob-temp.BlobsSetTierOptionalParams
    name: BlobsSetTierOptionalParams
    spec.typeScript:
      - name: BlobsSetTierOptionalParams
        fullName: BlobsSetTierOptionalParams
        uid: az-blob-temp.BlobsSetTierOptionalParams
  - uid: Promise<az-blob-temp.BlobsSetTierResponse>
    name: BlobsSetTierResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsSetTierResponse
        fullName: BlobsSetTierResponse
        uid: az-blob-temp.BlobsSetTierResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsStartCopyFromURLOptionalParams
    name: BlobsStartCopyFromURLOptionalParams
    spec.typeScript:
      - name: BlobsStartCopyFromURLOptionalParams
        fullName: BlobsStartCopyFromURLOptionalParams
        uid: az-blob-temp.BlobsStartCopyFromURLOptionalParams
  - uid: Promise<az-blob-temp.BlobsStartCopyFromURLResponse>
    name: BlobsStartCopyFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsStartCopyFromURLResponse
        fullName: BlobsStartCopyFromURLResponse
        uid: az-blob-temp.BlobsStartCopyFromURLResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlobsUndeleteOptionalParams
    name: BlobsUndeleteOptionalParams
    spec.typeScript:
      - name: BlobsUndeleteOptionalParams
        fullName: BlobsUndeleteOptionalParams
        uid: az-blob-temp.BlobsUndeleteOptionalParams
  - uid: Promise<az-blob-temp.BlobsUndeleteResponse>
    name: BlobsUndeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobsUndeleteResponse
        fullName: BlobsUndeleteResponse
        uid: az-blob-temp.BlobsUndeleteResponse
      - name: '>'
        fullName: '>'
