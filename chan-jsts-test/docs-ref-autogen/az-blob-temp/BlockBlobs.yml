### YamlMime:UniversalReference
items:
  - uid: az-blob-temp.BlockBlobs
    name: BlockBlobs
    fullName: BlockBlobs
    children: []
    langs:
      - typeScript
    type: class
    summary: Class representing a BlockBlobs.
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.constructor
    name: BlockBlobs
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a BlockBlobs.
    syntax:
      content: 'new BlockBlobs(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - az-blob-temp.StorageClientContext
          description: |
            Reference to the service client.
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.commitBlockList_1
    name: commitBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, options:
        BlockBlobsCommitBlockListOptionalParams)
      parameters:
        - id: blocks
          type:
            - az-blob-temp.BlockLookupList
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsCommitBlockListOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.commitBlockList_2
    name: commitBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: blocks
          type:
            - az-blob-temp.BlockLookupList
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.commitBlockList_3
    name: commitBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, options:
        BlockBlobsCommitBlockListOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: blocks
          type:
            - az-blob-temp.BlockLookupList
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsCommitBlockListOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.commitBlockList
    name: commitBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: 'function commitBlockList(blocks: BlockLookupList)'
      parameters:
        - id: blocks
          type:
            - az-blob-temp.BlockLookupList
          description: |+

      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.commitBlockListWithHttpOperationResponse
    name: commitBlockListWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: >-
        function commitBlockListWithHttpOperationResponse(blocks:
        BlockLookupList, options?: BlockBlobsCommitBlockListOptionalParams)
      parameters:
        - id: blocks
          type:
            - az-blob-temp.BlockLookupList
          description: |+

        - id: options
          type:
            - az-blob-temp.BlockBlobsCommitBlockListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlockBlobsCommitBlockListResponse>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.getBlockList
    name: getBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: 'function getBlockList(listType: BlockListType)'
      parameters:
        - id: listType
          type:
            - az-blob-temp.BlockListType
          description: >
            Specifies whether to return the list of committed blocks, the

            list of uncommitted blocks, or both lists together. Possible values
            include: 'committed',

            'uncommitted', 'all'
      return:
        type:
          - Promise<az-blob-temp.BlockList>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.getBlockList_1
    name: getBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: >-
        function getBlockList(listType: BlockListType, options:
        BlockBlobsGetBlockListOptionalParams)
      parameters:
        - id: listType
          type:
            - az-blob-temp.BlockListType
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsGetBlockListOptionalParams
          description: ''
      return:
        type:
          - Promise<az-blob-temp.BlockList>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.getBlockList_2
    name: getBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: >-
        function getBlockList(listType: BlockListType, callback:
        msRest.ServiceCallback<BlockList>)
      parameters:
        - id: listType
          type:
            - az-blob-temp.BlockListType
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.BlockList>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.BlockList>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.getBlockList_3
    name: getBlockList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: >-
        function getBlockList(listType: BlockListType, options:
        BlockBlobsGetBlockListOptionalParams, callback:
        msRest.ServiceCallback<BlockList>)
      parameters:
        - id: listType
          type:
            - az-blob-temp.BlockListType
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsGetBlockListOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<az-blob-temp.BlockList>
          description: ''
      return:
        type:
          - Promise<az-blob-temp.BlockList>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.getBlockListWithHttpOperationResponse
    name: getBlockListWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: >-
        function getBlockListWithHttpOperationResponse(listType: BlockListType,
        options?: BlockBlobsGetBlockListOptionalParams)
      parameters:
        - id: listType
          type:
            - az-blob-temp.BlockListType
          description: >
            Specifies whether to return the list of committed blocks, the

            list of uncommitted blocks, or both lists together. Possible values
            include: 'committed',

            'uncommitted', 'all'
        - id: options
          type:
            - az-blob-temp.BlockBlobsGetBlockListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlockBlobsGetBlockListResponse>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.stageBlock
    name: stageBlock
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        msRest.HttpRequestBody)
      parameters:
        - id: blockId
          type:
            - string
          description: >
            A valid Base64 string value that identifies the block. Prior to

            encoding, the string must be less than or equal to 64 bytes in size.
            For a given blob, the

            length of the value specified for the blockid parameter must be the
            same size for each block.
        - id: contentLength
          type:
            - number
          description: |
            The length of the request.
        - id: body
          type:
            - msRest.HttpRequestBody
          description: |
            Initial data
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.stageBlock_1
    name: stageBlock
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        msRest.HttpRequestBody, options: BlockBlobsStageBlockOptionalParams)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsStageBlockOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.stageBlock_2
    name: stageBlock
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.stageBlock_3
    name: stageBlock
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        msRest.HttpRequestBody, options: BlockBlobsStageBlockOptionalParams,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsStageBlockOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.stageBlockWithHttpOperationResponse
    name: stageBlockWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlockWithHttpOperationResponse(blockId: string,
        contentLength: number, body: msRest.HttpRequestBody, options?:
        BlockBlobsStageBlockOptionalParams)
      parameters:
        - id: blockId
          type:
            - string
          description: >
            A valid Base64 string value that identifies the block. Prior to

            encoding, the string must be less than or equal to 64 bytes in size.
            For a given blob, the

            length of the value specified for the blockid parameter must be the
            same size for each block.
        - id: contentLength
          type:
            - number
          description: |
            The length of the request.
        - id: body
          type:
            - msRest.HttpRequestBody
          description: |
            Initial data
        - id: options
          type:
            - az-blob-temp.BlockBlobsStageBlockOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlockBlobsStageBlockResponse>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.upload
    name: upload
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: 'function upload(body: msRest.HttpRequestBody, contentLength: number)'
      parameters:
        - id: body
          type:
            - msRest.HttpRequestBody
          description: |
            Initial data
        - id: contentLength
          type:
            - number
          description: |
            The length of the request.
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.upload_1
    name: upload
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: >-
        function upload(body: msRest.HttpRequestBody, contentLength: number,
        options: BlockBlobsUploadOptionalParams)
      parameters:
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsUploadOptionalParams
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.upload_2
    name: upload
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: >-
        function upload(body: msRest.HttpRequestBody, contentLength: number,
        callback: msRest.ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.upload_3
    name: upload
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: >-
        function upload(body: msRest.HttpRequestBody, contentLength: number,
        options: BlockBlobsUploadOptionalParams, callback:
        msRest.ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - msRest.HttpRequestBody
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - az-blob-temp.BlockBlobsUploadOptionalParams
          description: ''
        - id: callback
          type:
            - msRest.ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: az-blob-temp
  - uid: az-blob-temp.BlockBlobs.uploadWithHttpOperationResponse
    name: uploadWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: >-
        function uploadWithHttpOperationResponse(body: msRest.HttpRequestBody,
        contentLength: number, options?: BlockBlobsUploadOptionalParams)
      parameters:
        - id: body
          type:
            - msRest.HttpRequestBody
          description: |
            Initial data
        - id: contentLength
          type:
            - number
          description: |
            The length of the request.
        - id: options
          type:
            - az-blob-temp.BlockBlobsUploadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<az-blob-temp.BlockBlobsUploadResponse>
    package: az-blob-temp
references:
  - uid: az-blob-temp.StorageClientContext
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: az-blob-temp.StorageClientContext
  - uid: az-blob-temp.BlockLookupList
    name: BlockLookupList
    spec.typeScript:
      - name: BlockLookupList
        fullName: BlockLookupList
        uid: az-blob-temp.BlockLookupList
  - uid: az-blob-temp.BlockBlobsCommitBlockListOptionalParams
    name: BlockBlobsCommitBlockListOptionalParams
    spec.typeScript:
      - name: BlockBlobsCommitBlockListOptionalParams
        fullName: BlockBlobsCommitBlockListOptionalParams
        uid: az-blob-temp.BlockBlobsCommitBlockListOptionalParams
  - uid: Promise<az-blob-temp.BlockBlobsCommitBlockListResponse>
    name: BlockBlobsCommitBlockListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobsCommitBlockListResponse
        fullName: BlockBlobsCommitBlockListResponse
        uid: az-blob-temp.BlockBlobsCommitBlockListResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlockListType
    name: BlockListType
    spec.typeScript:
      - name: BlockListType
        fullName: BlockListType
        uid: az-blob-temp.BlockListType
  - uid: Promise<az-blob-temp.BlockList>
    name: BlockList>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockList
        fullName: BlockList
        uid: az-blob-temp.BlockList
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlockBlobsGetBlockListOptionalParams
    name: BlockBlobsGetBlockListOptionalParams
    spec.typeScript:
      - name: BlockBlobsGetBlockListOptionalParams
        fullName: BlockBlobsGetBlockListOptionalParams
        uid: az-blob-temp.BlockBlobsGetBlockListOptionalParams
  - uid: msRest.ServiceCallback<az-blob-temp.BlockList>
    name: BlockList>
    spec.typeScript:
      - name: msRest.ServiceCallback<
        fullName: msRest.ServiceCallback<
      - name: BlockList
        fullName: BlockList
        uid: az-blob-temp.BlockList
      - name: '>'
        fullName: '>'
  - uid: Promise<az-blob-temp.BlockBlobsGetBlockListResponse>
    name: BlockBlobsGetBlockListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobsGetBlockListResponse
        fullName: BlockBlobsGetBlockListResponse
        uid: az-blob-temp.BlockBlobsGetBlockListResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlockBlobsStageBlockOptionalParams
    name: BlockBlobsStageBlockOptionalParams
    spec.typeScript:
      - name: BlockBlobsStageBlockOptionalParams
        fullName: BlockBlobsStageBlockOptionalParams
        uid: az-blob-temp.BlockBlobsStageBlockOptionalParams
  - uid: Promise<az-blob-temp.BlockBlobsStageBlockResponse>
    name: BlockBlobsStageBlockResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobsStageBlockResponse
        fullName: BlockBlobsStageBlockResponse
        uid: az-blob-temp.BlockBlobsStageBlockResponse
      - name: '>'
        fullName: '>'
  - uid: az-blob-temp.BlockBlobsUploadOptionalParams
    name: BlockBlobsUploadOptionalParams
    spec.typeScript:
      - name: BlockBlobsUploadOptionalParams
        fullName: BlockBlobsUploadOptionalParams
        uid: az-blob-temp.BlockBlobsUploadOptionalParams
  - uid: Promise<az-blob-temp.BlockBlobsUploadResponse>
    name: BlockBlobsUploadResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobsUploadResponse
        fullName: BlockBlobsUploadResponse
        uid: az-blob-temp.BlockBlobsUploadResponse
      - name: '>'
        fullName: '>'
